/*******************************************************************************************
 * Initiate and Decision making class.******************************************************
 * Ramin Edjlal*****************************************************************************
 * Call Of Constructor From Constructor***************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * The Storing AllDraw Object in Self Constructor Caused Stack Overflow*******************0.12**4**Managements and Cuation Programing**********************(+)
 * Link List Of Storing String Caused A Stack Over Flow***********************************0.12**4**Managements and Cuation Programing**********************(+)
 * Wait For Finished Current AStarGreedy Caused To Long Time*************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Need To Heuristic (Arvin) Function(s) to Manage Cell in Form1**************************0.12**4**Managements and Cuation Programing**********************(+)
 * First Scanning Movements of Things Anomaly*********************************************0.12**4**Managements and Cuation Programing**********************(+)
 * In Current Version of Heuristic Table Doesn’t Reached(Zero)****************************0.12**4**Managements and Cuation Programing**********************(+)
 * In Current Version InitiateForEveryThisngsHome Dosn't Work*****************************0.12**4**Managements and Cuation Programing**********************(+)
 * In This Version ThinkingQuantum Taking A LotofTime(AStarGreedyt Array Tree)**********************0.12**4**Managements and Cuation Programing**********************(+)
 * Heuristic Work In AStarGreedys. But Scanning Dosen’t Works************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Adding Clone Caused To Stack Overflow**************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Clone Caused To StackOverFlow**********************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Row And Column Become Zero in Virtualization*******************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Initiate Error*************************************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Seems To Be Logical Drawing ***********************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * int Suddenly Changing****************************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * AllDraw Object Sub Objects List When Return from local Scope Become Zero.**************0.12**4**Managements and Cuation Programing**********************(+)
 * Heuristic Dosn't Work*******************************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * int Order Of Visualization Changed Suddenly******************************************0.12**4**Managements and Cuation Programing**********************(+)
 * int Changes with no movement*********************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Table Not Gate (Inversion of Table List) Doesn’t help to do Normally*******************0.12**4**Managements and Cuation Programing**********************(+)
 * Literally Errors Correction************************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * From Arrangements of Things Reaches Suddenly Things Location OccuRS********************0.12**4**Managements and Cuation Programing**********************(+)
 * The Arrangements is Logical************************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * The int changes and the arrangements changes are not clearly obvious*****************0.12**4**Managements and Cuation Programing**********************(+)
 * int Changes Solved. no movements*****************************************************0.12**4**Managements and Cuation Programing**********************(+)(-+)
 * Things movements Anomally**************************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Chess Rules Anomally*******************************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Heuristic Function Not Work************************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Heuristic Work But the Table is Empty**************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Table is Not Empty But the Movement is Not Logical*************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Clear Dirty Part.**********************************************************************0.88**1**Risk Control********************************************(*)QC-OK.
 * Need to Restricted Approval. Taking a lot of time ThinkingQuantum Computation*****************0.12**4**Managements and Cuation Programing**********************(+)
 * No movements In Virtualization*********************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Chess Rules Abnormal ThinkingQuantum movements. No movement greater than 2********************0.12**4**Managements and Cuation Programing**********************(+)
 * Problem For Drawing of ThinkingQuantum Things*************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Heuristic Constant Result**************************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * One movements Right .Heuristic Remaining Constant Results******************************0.12**4**Managements and Cuation Programing**********************(+)
 * Constant Heuristic Result**************************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Need To Add A Heuristic Useful Another*************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Heuristic Function Does’ Work Allis suddenly Become Zero that Previously Working*******0.12**4**Managements and Cuation Programing**********************(+)
 * No Movement Greater than one order in Computer 'Alice'*********************************0.12**4**Managements and Cuation Programing**********************(+)
 * Tow movements in Computer 'Alice' Of two Different Order int*************************0.12**4**Managements and Cuation Programing**********************(+)
 * Heuristic Not Work Greater than 3 Length Count of A************************************0.12**4**Managements and Cuation Programing**********************(+)
 * 'They Don't Really Take care about us'. Misleading in Heuristic King Supported*********0.12**4**Managements and Cuation Programing**********************(+)
 * Non Order Movments*********************************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Misleading at Stage three. no illegal movement greater than three**********************0.12**4**Managements and Cuation Programing**********************(+)
 * ThinkingQuantum Order Misleading**************************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Hit Mechanism Malfunctional************************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Tow movements At One 'Alice' Order time************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Heuristic Computer By Computer 'Alice' by 'Bob' Caused to Loop Heuristic.**************0.12**4**Managements and Cuation Programing**********************(+)
 * Learning Automata of  also leads to re loop heuristic***************************0.88**1**Risk Control********************************************(*)QC-OK.
 * Heuristic Learning Automata 'Alice' By 'Bob' Leads to Re loop**************************0.12**4**Managements and Cuation Programing**********************(+)
 * Heuristic Things Loop 'Alice' By 'Bob'*************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Self 'Check' Detection Failure By 'Alice'***********************************************0.12**4**Managements and Cuation Programing**********************(+)
 * 'Penalty' Value Of All Become zero althouth the one should be non Penalty**************0.88**1**Risk Control********************************************(*)
 * Clone Dosn't Copy All Content of AllDraw Dummy*****************************************0.12**4**Managements and Cuation Programing**********************(+)
 * CheckRemovable By Self King Solved.Penalty Action Misleading****************************0.88**1**Risk Control********************************************(-*)QC-OK.
 * 'Check' Detection Failure***************************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Mechanisam Of Order in Predict Failed.*************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * 'Alice' King Virtualization or Table Content of King Misleading************************0.12**4**Managements and Cuation Programing**********************(+)
 * With The All Things Heuristic Signing Mechnisam Some Movments become null Table.********0.12**4**Managements and Cuation Programing**********************(+)
 * AStarGreedy First Search Not Working. Misleading MalFunction Virtualization.******************0.12**4**Managements and Cuation Programing**********************(+)
 * AStarGreedy First Table is Null at Bob Order.*************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * AStarGreedy First SetVirtualization and Table Misleading By Alice.****************************0.12**4**Managements and Cuation Programing**********************(+)
 * No ReASon Logically For MalFunction  Refrigtz.Timer AStarGreedy First Dynamic Refrigtz.Timer.*******************0.12**4**Managements and Cuation Programing**********************(+)
 * AStarGreedyt ThinkingQuantum Taking a lot of time.***********************************************0.12**4**Managements and Cuation Programing**********************([+]
 * AStarGreedy First Not Work.*******************************************************************0.12**4**Managements and Cuation Programing**********************[+]
 * AStarGreedy First Not Work.Refrigtz.Timer Stop At Greater than 2,3,4,5,6,7 Movments.*******************0.12**4**Managements and Cuation Programing**********************[+]
 * No ReASon For MalFunction of AStarGreedytNotFoundHeuristicAStarGreedyt.***********************0.12**4**Managements and Cuation Programing**********************[+]
 * Problem Solved.No ReASon to NullExeption of AStarGreedytHeuristic Algorithm.***************0.88**1**Risk Control********************************************[-*]QC-OK.
 * Function Evaluation Disabled .At Initiate AStarGreedytGenetic Found Sysntax.**************0.88**1**Risk Control********************************************[*]
 * Index WAS Out Of Range Exeption WAS Not Handled.Colud Not Be Handle.*******************0.12**4**Managements and Cuation Programing**********************{+}
 * No Logical Mechanism To Reconstructe Current AllDraw Objects.**************************0.12**4**Managements and Cuation Programing**********************{+}
 * AStarGreedy First Sysntax is legal and The table is constant table.***************************0.12**4**Managements and Cuation Programing**********************{+}
 * Table Content Empty. No Syntax Exist.**************************************************0.12**4**Managements and Cuation Programing**********************{+}
 * Game Begin From First When the Soldiers Move Ordinary Complete in AStarGreedy First***********0.88**1**Risk Control********************************************{*}QC-OK.
 * New Instatnt Of Program CuASe to Begin Fron First.*************************************0.12**4**Managements and Cuation Programing**********************<+>
 * No Logically ReASon For New Game Of Program. New Instatnt Not Detected.****************0.12**4**Managements and Cuation Programing**********************<+>
 * Internal New Instatnt Of FormeRefregitz is MalFunction.********************************0.12**4**Managements and Cuation Programing**********************<+>
 * AStarGreedy First CC Changes to CC Normal Game.***********************************************0.12**4**Managements and Cuation Programing**********************<+>
 * Game CC UnContoroled.******************************************************************0.12**4**Managements and Cuation Programing**********************<+>
 * MalFunction of Syntax and Movments.By Alice and Bob.***********************************0.12**4**Managements and Cuation Programing**********************<+>
 * Threading Solved! The OutOfRangeIndex Not Work.****************************************0.12**4**Managements and Cuation Programing**********************[-+]
 * Vituallization error!No Best Matches between Truth of table content and irtualization**0.12**4**Managements and Cuation Programing**********************[+]
 * Dynamic Programming for Stroring ADraw THISDummy Adraw Value MalFunction.**************0.12**4**Managements and Cuation Programing**********************(+)
 * Order is Constant in Dynamic Programming.**********************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Table MalFunction at Dynamic Programming.At Step 3.************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Some Movments are MalFuncational at Dynamic Programming.*******************************0.12**4**Managements and Cuation Programing**********************(+)
 * Heuristic Overlay Tow Part of ADraw and StoreADraw Sections at Different levels Tab Cal.0.12**4**Managements and Cuation Programing**********************(+)
 * Not to be needing again calculation. MalFunction is depend of tow part.****************0.12**4**Managements and Cuation Programing**********************(+)
 * BackWard Loos of Things AllDraw Mechnisam.*********************************************0.88**1**Risk Control********************************************(*)QC-OK.
 * Some Dynamic Programming MalFunction Movments.*****************************************0.88**1**Risk Control********************************************(*)QC-OK.
 * Syntax and Forward and Backward Movments Syntax is MalFunction.************************0.12**4**Managements and Cuation Programing**********************<+>
 * Database and Virtualization Forward and Backward MalFunction***************************0.12**4**Managements and Cuation Programing**********************<+>
 * Reproduction of Thinfs Missleading.****************************************************0.88**1**Risk Control********************************************<*>QC-OK.
 * Reproduction of Some Things are MalFunction Movments.**********************************0.12**4**Managements and Cuation Programing**********************{+}
 * AStarGreedy Count of Dynamic Programming Misleadig.AStarGreedy Operation Count Mal Function.*********0.88**1**Risk Control********************************************(*)QC-OK.
 * Heuristic By Alice is MalFunction.******************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * ObjectDanger Identification By Alice is MalFunction.*****************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Check Identification By Alice is MalFunction.*******************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Check Recognized But CheckMate Not Recognized!***********************************************0.12**4**Managements and Cuation Programing**********************(_+)
 * Penalty Regard Mechanism Misleading.***************************************************0.12**4**Managements and Cuation Programing**********************{+}
 * Inhereted LearningAtamata Caused to Shared Parent Allocated Variable.******************0.12**4**Managements and Cuation Programing**********************{+}
 * 'Check' By 'Alice' Not Removed UnreASonably.********************************************0.88**1**Risk Control********************************************{*}QC-OK.
 * AStarGreedyt Heuristic Found MalFunction at Check Alice.************************************0.12**4**Managements and Cuation Programing**********************{+}
 * Sortments of ADRAW and Construction is MalFunction at AStarGreedy Dynamic Programming.********0.12**4**Managements and Cuation Programing**********************{+}
 * Heuristic AStarGreedy First were Worked Out UnreASonably such Situation(Golden Sword Magic).***0.88**1**Risk Control********************************************{*}QC-OK.
 * Converted 'King' of 'Alice' to 'Elephant' UnReASonably.********************************0.12**4**Managements and Cuation Programing**********************(+)
 * 'Long Game' ; But MalFunction of Game.*************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * 'Always' in Current game is 'Bob'.*****************************************************0.12**4**Managements and Cuation Programing**********************(+)
 * Current Table of ADRAW is Correct Table But the Game is MalFunction.*******************0.12**4**Managements and Cuation Programing**********************(+)
 * Move of Current Table AStarGreedy First Heuristic found ;found an ovelay in 'Bob' and 'Alice'**0.12**4**Managements and Cuation Programing**********************(+)
 * Current Table in High Level Become Null and prevent of 'LongGame' Strategy.************0.12**4**Managements and Cuation Programing**********************(+)
 * 'LongGame' Become short Undetectably UnreASonably;Clear Store Non Detectably.**********0.88**1**Risk Control********************************************(*)QC-OK.
 * All Draw AStarGreedy First section some movments have not been accurred considerably.*********0.88**1**Risk Control********************************************(*)QC-OK.
 * 'Long Game' Breaks Suddendly without Monitor Caused.***********************************0.12**4**Managements and Cuation Programing**********************{+}
 * Overlay Some Movments of 'Long Game' Breaked.Caused Probability to break.**************0.12**4**Managements and Cuation Programing**********************{+}
 * SomeTimes All Situation of Current Games Become Cleared and No Table Founded.**********0.12**4**Managements and Cuation Programing**********************{+}
 * Gray Soldeir is Only Movmnets and Converts in Heuristic and No Move are detectable.*****0.12**4**Managements and Cuation Programing**********************{+}
 * DEEPLY Recursive Tree of Second Version Become in Some Null At Hurristic Finsished.****0.12**4**Managements and Cuation Programing**********************{+}
 * AStarGreedy Heuristic Content is Zero. No Calculation of AStarGreedy Heuristic Calculation.************0.12**4**Managements and Cuation Programing**********************{+}
 * MalFunction of Dep Heuristic Person and MalFunction Movments of CC AStarGreedy Heuristic********0.88**1**Risk Control********************************************{*}QC-OK.
 * Mal Function of Reconstruction of AStarGreedy Objects In Initiate AStarGreedy First.*****************0.12**4**Managements and Cuation Programing**********************<+>
 * Hurisic Operantional Have Mal Function Behaviour.**************************************0.12**4**Managements and Cuation Programing**********************<+>
 * Table Zero of AStarGreedy First Heuristic Mal Function.****************************************0.12**4**Managements and Cuation Programing**********************<+>
 * AStarGreedy First Initiate Method Result Object Content Mal Function.*************************0.12**4**Managements and Cuation Programing**********************<+>
 * Table Nopt Found Of AStarGreedy First Heuristic.Mal Function of Initiate and Heuristic.*********0.12**4**Managements and Cuation Programing**********************<+>
 * Table Foundation Successfule. Traversaling of All Tree Not Successfule.****************0.12**4**Managements and Cuation Programing**********************<+>
 * Table Some Movments Intiaiazation Mal Function.****************************************0.12**4**Managements and Cuation Programing**********************{+}
 * BackWard Max Check CheckMate Mechanism For Best Heuristic is Unknown**************************0.12**4**Managements and Cuation Programing**********************{+}
 * Minister After Calculation AStarGreedyHeuristic At AStarGreedyHeuristic becomes Null.******************0.88**1**Risk Control********************************************(*)QC-OK
 * All Objects Possible Movments Not calculating During AStarGreedytsearch Method.***********0.88**1**Risk Control********************************************{*}QC_OK
 * Mechanisam olf AStarGreedytHeuristic and Hurisistic is QC-Ok. But Table foundation Illegal.0.88**1**Risk Control********************************************<*>QC-OK
 * Full Game Indexing Parameters Misleading UnLogically.*************************************0.88**1**Risk Control********************************************(*)QC_OK
 * Index out of Range Unlogically at Full Game Soldier Order Brown.**************************0.88**1**Risk Control********************************************<*>QC_OK
 * Execution make zero table but trace make valid table.*************************************0.88**1**Risk Control********************************************{*}Qc-OK.
 * Virtualization need to more hardware capabilities gone to malfunction virtualization.******0.88**1**Risk Control*******************************************{*}QC-BAD.
 * MalFunction on AllDraw Hadeling of Draw Midle Target Motion Graphics.**********************0.88**1**Risk Control*******************************************{*}QC-BAD.
 * ********************************************************************************************************************************************************(+:Sum(63)) 
 * 1394/12/19**********************************************************************************************************************************************(*:Sum(4))
 * ********************************************************************************************************************************************************(-:sum(2)) (_:Sum(0)):2:(+:Sum(3)) (-:Sum(1)) (*:Sum(2)) 3: (+:Sum(4)) (*:Sum(1)) 4:(+:Sum(6))  5:(+:Sum(2)) (-:Sum(1)) 6:(+:Sum(6)) (*:Sum(2)) 7.(+:Sum(2)) (*:Sum(1)) 8.(+:Sum(1)) 9.(+:Sum(4)) (*:Sum(1)) (-:Sum(1)) 10.(+:Sum(4)) (*:Sum(2)) 11.(+:Sum(4)) 12.(+:Sum(2)) (*:Sum(2)) 13.(+:Sum(4)) 14.(+:Sum(2)) (*:Sum(1)) 15.(+:Sum(6)) 16.(+:Sum(2)) 17.(QC-OK.:Sum(13))
 */
using System;
using System.Collections.Generic;
using System.Text;
using System.Drawing;
using System.Threading;
using System.Threading.Tasks;
using System.IO;
using System.Diagnostics;
using System.Runtime.Serialization.Formatters.Binary;
namespace QuantumRefrigiz
{



    [Serializable]

    public class AllDraw
    {   //Initiate Variables. 
        bool[] ThinkingQuantumAllowed = { false, false, false, false, false, false, false, false, false, false, false, false };

        public static int[,,] QuntumTable = {
            {{-1, -1, - 1, -1, -1, -1, -1, -1 },
             {-1, -1, - 1, -1, -1, -1, -1, -1 },
             {-1, -1, - 1, -1, -1, -1, -1, -1 },
             {-1, -1, - 1, -1, -1, -1, -1, -1 },
             {-1, -1, - 1, -1, -1, -1, -1, -1 },
             {-1, -1, - 1, -1, -1, -1, -1, -1 },
             {-1, -1, - 1, -1, -1, -1, -1, -1 },
             {-1, -1, - 1, -1, -1, -1, -1, -1 }},
             {{-1, -1, - 1, -1, -1, -1, -1, -1 },
              {-1, -1, - 1, -1, -1, -1, -1, -1 },
              {-1, -1, - 1, -1, -1, -1, -1, -1 },
              {-1, -1, - 1, -1, -1, -1, -1, -1 },
              {-1, -1, - 1, -1, -1, -1, -1, -1 },
              {-1, -1, - 1, -1, -1, -1, -1, -1 },
              {-1, -1, - 1, -1, -1, -1, -1, -1 },
              {-1, -1, - 1, -1, -1, -1, -1, -1 }}};

        [field: NonSerialized] List<Task> tH = new List<Task>();
        [field: NonSerialized] List<Task> TH = new List<Task>();

        public static bool Deeperthandeeper = false;

        public static bool FirstTraversalTree = true;
        public static int NumberOfLeafComputation = 0;
        public bool IsCurrentDraw = false;


        public int HaveKilled = 0;
        StringBuilder Space = new StringBuilder("&nbsp;");
        int Spaces = 0;
        bool SetDeptIgnore = false;
        long Now = DateTime.Now.Hour * (36000000 * 24) + DateTime.Now.Minute * 36000000 + DateTime.Now.Second * 600000 + DateTime.Now.Millisecond;
        long Later = DateTime.Now.Hour * (36000000 * 24) + DateTime.Now.Minute * 36000000 + DateTime.Now.Second * 600000 + DateTime.Now.Millisecond;
        StackFrame callStack = new StackFrame(1, true);
        int[,] Tabl = new int[8, 8];
        public int OrderP = 0;
        public static int DepthIterative = 0;
        int PerceptionCount = 0;
        public String OutPutAction = "";
        public static StringBuilder OutPut = new StringBuilder("");
        public static StringBuilder ActionString = new StringBuilder("");
        public static bool ActionStringReady = false;
        //static variable to be Initiate
        List<int[]> ValuableSelfSupported = new List<int[]>();
        public static bool RegardOccurred = false;
        public static int SuppportCountStaticGray = 0;
        public static int SuppportCountStaticBrown = 0;
        int CurrentAStarGredyMax = 0;
        public static int TaskBegin = 0;
        public static int TaskEnd = 0;
        public static String Root = System.IO.Path.GetDirectoryName(Environment.GetCommandLineArgs()[0]);
        public static int OrderPlate = 1;
        public static bool Blitz = false;
        public static int ConvertedKind = -2;
        public static bool ConvertWait = true;
        public static bool Stockfish = false;
        public static bool Person = true;
        public static bool THISSecradioButtonGrayOrderChecked = false;
        public static bool THISSecradioButtonBrownOrderChecked = false;
        public static String THIScomboBoxMaxLevelText = "";
        public static AllDraw THISDummy = null;
        public static bool StateCP = false;
        public static bool StateCC = false;
        public static int LastRowQ = -1;
        public static int LastColumnQ = -1;
        public static int NextRowQ = -1;
        public static int NextColumnQ = -1;
        public static int MovmentsNumber = 0;
        public static int MaxAStarGreedyHeuristicProgress = 0;
        public static bool EndOfGame = false;
        const int ThresholdBlitz = 10000;
        const int ThresholdFullGame = 20000;
        public bool SetRowColumnFinished = false;
        public static int MinThinkingQuantumTreeDepth = Int32.MaxValue;
        static int MaxDuringLevelThinkingQuantumCreation = 0;
        public int MaxHeuristicxT = Int32.MinValue;
        public bool MovementsAStarGreedyHeuristicFoundT = false;
        public bool IgnoreSelfObjectsT = false;
        public bool UsePenaltyRegardMechnisamT = true;
        public bool BestMovmentsT = false;
        public bool PredictHeuristicT = true;
        public bool OnlySelfT = false;
        public bool AStarGreedyHeuristicT = false;
        public int[] Index = { -1, -1, -1, -1, -1, -1 }, jindex = { -1, -1, -1, -1, -1, -1 }, Kind = { -1, -1, -1, -1, -1, -1 };
        public bool ArrangmentsChanged = false;
        public static int AStarGreedytMaxCount = 0;
        public static bool FoundATable = false;
        public static int Less = Int32.MinValue;
        public bool CastlesKing = false;
        List<int[,]> MaxHeuristicAStarGreedytBackWardTable = new List<int[,]>();
        public static int increASedProgress = 0;
        public static int CurrentHeuristic = Int32.MinValue;
        public static int SignAttack = 1;
        public static int SignObjectDangour = 1;
        public static int SignReducedAttacked = -1;
        public static int SignSupport = 1;
        public static int SignKiller = 1;
        public static int SignMovments = 1;
        public static int SignDistance = -1;
        public static int SignKingSafe = -1;
        public static int SignKingDangour = -1;
        public static bool DrawTable = true;
        public static int[,] TableVeryfy = new int[8, 8];
        public static int MaxAStarGreedy = 1;
        public static int[,] TableVeryfyConst = new int[8, 8];
        public static List<int[,]> TableCurrent = new List<int[,]>();
        public static bool NoTableFound = false;
        public static bool DynamicAStarGreedytPrograming = false;
        public static List<AllDraw> StoreADraw = new List<AllDraw>();
        public static List<int> StoreADrawAStarGreedy = new List<int>();
        public static bool UseDoubleTime = false;
        public static int AStarGreedyiLevelMax;
        public static bool AStarGreadyFirstSearch = true;
        public static String ImageRoot = AllDraw.Root + "\\Images";
        public static String ImagesSubRoot = AllDraw.ImageRoot + "\\Fit\\Small\\";
        public static bool RedrawTable = true;
        public static String SyntaxToWrite = "";
        public static bool SodierConversionOcuured = false;
        public static int SodierMovments = 1;
        public static int ElefantMovments = 1;
        public static int HourseMovments = 1;
        public static int CastleMovments = 1;
        public static int MinisterMovments = 1;
        public static int KingMovments = 1;
        /*public int SodierMidle = 8;
        public int SodierHigh = 16;
        public int ElefantMidle = 2;
        public int ElefantHigh = 4;
        public int HourseMidle = 2;
        public int HourseHight = 4;
        public int CastleMidle = 2;
        public int CastleHigh = 4;
        public int MinisterMidle = 1;
        public int MinisterHigh = 2;
        public int KingMidle = 1;
        public int KingHigh = 2;
        */
        public int SodierMidle = 0;
        public int SodierHigh = 0;
        public int ElefantMidle = 0;
        public int ElefantHigh = 0;
        public int HourseMidle = 0;
        public int HourseHight = 0;
        public int CastleMidle = 0;
        public int CastleHigh = 0;
        public int MinisterMidle = 0;
        public int MinisterHigh = 0;
        public int KingMidle = 0;
        public int KingHigh = 0;
        //ChessPerdict APredict = null;
        int RW = 0;
        int CL = 0;
        int Ki = 0;
        int RW1 = 0;
        int CL1 = 0;
        int Ki1 = 0;
        int MaxLess1 = 0;
        int RW2 = 0;
        int CL2 = 0;
        int Ki2 = 0;
        int MaxLess2 = 0;
        int RW3 = 0;
        int CL3 = 0;
        int Ki3 = 0;
        int MaxLess3 = 0;
        int RW4 = 0;
        int CL4 = 0;
        int Ki4 = 0;
        int MaxLess4 = 0;
        int RW5 = 0;
        int CL5 = 0;
        int Ki5 = 0;
        int MaxLess5 = 0;
        int RW6 = 0;
        int CL6 = 0;
        int Ki6 = 0;
        int MaxLess6 = 0;
        public static int LoopHeuristicIndex = 0;
        static List<int> RWList = new List<int>();
        static List<int> ClList = new List<int>();
        static List<int> KiList = new List<int>();
        static public List<int[,]> TableListAction = new List<int[,]>();
        public int Move = 0;
        static public int MouseClick = 0;
        int[] AStarGreedyIndex = new int[20];

        public List<int[,]> TableList = new List<int[,]>();
        public int AStarGreedy = 0;
        public DrawSoldierQ[] SolderesOnTable = new DrawSoldierQ[16];
        public DrawElefantQ[] ElephantOnTable = new DrawElefantQ[4];
        public DrawHourseQ[] HoursesOnTable = new DrawHourseQ[4];
        public DrawCastleQ[] CastlesOnTable = new DrawCastleQ[4];
        public DrawMinisterQ[] MinisterOnTable = new DrawMinisterQ[2];
        public DrawKingQ[] KingOnTable = new DrawKingQ[2];
        List<int[]> MaxHeuristicAStarGreedytBackWard = new List<int[]>();
        const int MaxSoldeirFounded = 2;
        const int MaxElephntFounded = 6;
        const int MaxHourseFounded = 10;
        const int MaxCastlesFounded = 14;
        const int MaxMinisterFounded = 18;
        const int MaxKingFounded = 22;
        [NonSerialized()] public Task ob;
        //Making String datAStructure to root variable
        public AllDraw AStarGreedyString = null;

        //Error Handling
        static void Log(Exception ex)
        {
            long Time = TimeElapced.TimeNow();
            Object a = new Object();
            lock (a)
            {
                string stackTrace = ex.ToString();
                File.AppendAllText(AllDraw.Root + "\\ErrorProgramRun.txt", stackTrace + ": On" + DateTime.Now.ToString()); // path of file where stack trace will be stored.
            }
            AllDraw.OutPut.Append("\r\nALLDrawLog:" + (TimeElapced.TimeNow() - Time).ToString());
        }
        //Determine when a MoveOccured.
        //Note for before move.At most one  moves.
        public static bool IsAeMoveOccured(bool IsMove)
        {
            long Time = TimeElapced.TimeNow();
            bool Is = false;
            if (!IsMove)
            {
                int IsInt = (new Random()).Next(0, 32);
                Is = System.Convert.ToBoolean(IsInt % 2);
            }
            AllDraw.OutPut.Append("\r\nIsAeMoveOccured:" + (TimeElapced.TimeNow() - Time).ToString());
            return Is;
        }
        void TimeEnd()
        {
            //long Time = TimeElapced.TimeNow();Spaces++;

            Now = DateTime.Now.Hour * (60000 * 24) + DateTime.Now.Minute * 60000 + DateTime.Now.Second * 1000 + DateTime.Now.Millisecond;
            long Later = Now;
            do
            {
                Later = DateTime.Now.Hour * (60000 * 24) + DateTime.Now.Minute * 60000 + DateTime.Now.Second * 1000 + DateTime.Now.Millisecond;

            } while (Later - Now < 3 * 60000);

            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("TimeEnd:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;

        }
        //Determine and set numbers of all curent state table severASl kinds node.
        public void SetObjectNumbers(int[,] TabS)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a = new Object();
            lock (a)
            {
                //Initiate
                SodierMidle = 0;
                SodierHigh = 0;
                ElefantMidle = 0;
                ElefantHigh = 0;
                HourseMidle = 0;
                HourseHight = 0;
                CastleMidle = 0;
                CastleHigh = 0;
                MinisterMidle = 0;
                MinisterHigh = 0;
                KingMidle = 0;
                KingHigh = 0;
                for (int h = 0; h < 8; h++)
                    for (int s = 0; s < 8; s++)
                    {
                        //Cal Solider Gray
                        if (TabS[h, s] == 1)
                        {
                            //IncreASe
                            SodierMidle++;
                            SodierHigh++;
                        }//Elephant Gray
                        else if (TabS[h, s] == 2)
                        {
                            //IncreASe
                            ElefantMidle++;
                            ElefantHigh++;
                        }
                        //Hoirse Gray
                        else if (TabS[h, s] == 3)
                        {
                            //IncreASe
                            HourseMidle++;
                            HourseHight++;
                        }
                        //Castle Gray
                        else if (TabS[h, s] == 4)
                        {
                            //IncreASe
                            CastleMidle++;
                            CastleHigh++;
                        }
                        //Minister Gray
                        else if (TabS[h, s] == 5)
                        {
                            //IncreASe
                            MinisterMidle++;
                            MinisterHigh++;
                        }
                        //King Gray
                        else if (TabS[h, s] == 6)
                        {
                            //IncreASe
                            KingMidle++;
                            KingHigh++;
                        }
                        else//Solder Brown
                            if (TabS[h, s] == -1)
                        {
                            //IncreASe
                            SodierHigh++;
                        }
                        else if (TabS[h, s] == -2)//Elepant Brown
                        {
                            //IncreASe
                            ElefantHigh++;
                        }
                        else if (TabS[h, s] == -3)//Hourse Brown
                        {
                            //IncreASe
                            HourseHight++;
                        }
                        else if (TabS[h, s] == -4)//Castle Brown
                        {
                            //IncreASe
                            CastleHigh++;
                        }
                        else if (TabS[h, s] == -5)//Mincter Brown
                        {
                            //IncreASe
                            MinisterHigh++;
                        }
                        else if (TabS[h, s] == -6)//King Brown
                        {
                            //IncrreASe
                            KingHigh++;
                        }
                    }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("SetObjectNumbers:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;

        }
        //Found of Specific Objects uniqued
        float[] FoundLocationOfObject(ref int[,] Tabl, int Kind, bool IsGray)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a = new Object();
            lock (a)
            {
                //Initaite
                float[] Location = { -1, -1 };
                //Locate and search
                for (var i = 0; i < 8; i++)
                    for (var j = 0; j < 8; j++)
                    {
                        //When is Gray
                        if (IsGray)
                        {
                            //When object found
                            if (Tabl[i, j] == Kind)
                            {
                                //Srote location
                                Location[0] = i;
                                Location[1] = j;
                                //Clear Objects from table
                                Tabl[i, j] = 0;

                            }
                        }
                        else//Is Brown
                        {
                            //When Found
                            if (Tabl[i, j] * -1 == Kind)
                            {
                                //Store Location
                                Location[0] = i;
                                Location[1] = j;
                                //Clear from table
                                Tabl[i, j] = 0;

                            }
                        }

                    }
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundLocationOfObject:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                //returnb location
                return Location;

            }
        }
        //Constructor
        public AllDraw(int Order, bool MovementsAStarGreedyHeuristicTFou, bool IgnoreSelfObject, bool UsePenaltyRegardMechnisa, bool BestMovment, bool PredictHurist, bool OnlySel, bool AStarGreedyHuris, bool Arrangments)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a = new Object();
            lock (a)
            {

                MaxHeuristicxT = Int32.MinValue;
                MovementsAStarGreedyHeuristicFoundT = MovementsAStarGreedyHeuristicTFou;
                IgnoreSelfObjectsT = IgnoreSelfObject;
                UsePenaltyRegardMechnisamT = UsePenaltyRegardMechnisa;
                BestMovmentsT = BestMovment;
                PredictHeuristicT = PredictHurist;
                OnlySelfT = OnlySel;
                AStarGreedyHeuristicT = AStarGreedyHuris;
                ArrangmentsChanged = Arrangments;
                Object Om = new Object();
                lock (Om)
                {
                    FoundATable = false;
                }
                CastlesKing = false;
                increASedProgress = 0;
                Object ol = new Object();
                lock (ol)
                {
                    CurrentHeuristic = Int32.MinValue;

                    DrawTable = false;

                    TableVeryfy = new int[8, 8];

                    TableVeryfyConst = new int[8, 8];

                    TableCurrent.Clear();

                    NoTableFound = false;

                    DynamicAStarGreedytPrograming = false;

                    UseDoubleTime = false;
                    AStarGreadyFirstSearch = true;
                    ImageRoot = AllDraw.Root + "\\Images";
                    ImagesSubRoot = AllDraw.ImageRoot + "\\Fit\\Small\\";
                }
                RedrawTable = true;
                SodierConversionOcuured = false;
                SodierMovments = 1;
                ElefantMovments = 1;
                HourseMovments = 1;
                CastleMovments = 1;
                MinisterMovments = 1;
                KingMovments = 1;
                /*SodierMidle = 8;
                SodierHigh = 16;
                ElefantMidle = 2;
                ElefantHigh = 4;
                HourseMidle = 2;
                HourseHight = 4;
                CastleMidle = 2;
                CastleHigh = 4;
                MinisterMidle = 1;
                MinisterHigh = 2;
                KingMidle = 1;
                KingHigh = 2;*/
                //APredict = null;
                RW = 0;
                CL = 0;
                Ki = 0;
                RW1 = 0;
                CL1 = 0;
                Ki1 = 0;
                MaxLess1 = 0;
                RW2 = 0;
                CL2 = 0;
                Ki2 = 0;
                MaxLess2 = 0;
                RW3 = 0;
                CL3 = 0;
                Ki3 = 0;
                MaxLess3 = 0;
                RW4 = 0;
                CL4 = 0;
                Ki4 = 0;
                MaxLess4 = 0;
                RW5 = 0;
                CL5 = 0;
                Ki5 = 0;
                MaxLess5 = 0;
                RW6 = 0;
                CL6 = 0;
                Ki6 = 0;
                MaxLess6 = 0;
                LoopHeuristicIndex = 0;
                Move = 0;
                //MouseClick = 0;
                AStarGreedyIndex = new int[20];
                AStarGreedy = 0;
                SolderesOnTable = null;
                ElephantOnTable = null;
                HoursesOnTable = null;
                CastlesOnTable = null;
                MinisterOnTable = null;

                KingOnTable = null;
                MaxHeuristicAStarGreedytBackWard.Clear();

                //Initiayte Locally Variables.
                TableList = new List<int[,]>();
                //APredict = new ChessPerdict(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged//, ref th
                //    );
                OrderP = Order;
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("AllDraw_1:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;

            }
        }
        //Clone Copy Method
        public void Clone(AllDraw AA)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {



                if (AA == null)
                {
                    AA = new AllDraw(OrderP, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged);
                    AA.TableList.Add(TableList[0]);
                }
                AA.Tabl = new int[8, 8];
                for (var i = 0; i < 8; i++)
                    for (var j = 0; j < 8; j++)
                        AA.Tabl[i, j] = Tabl[i, j];
                AA.OrderP = OrderP;

                AA.PerceptionCount = PerceptionCount;
                AA.OutPutAction = OutPutAction;
                //static variable to be Initiate
                AA.ValuableSelfSupported = new List<int[]>();
                for (var i = 0; i < 8; i++)
                    for (var j = 0; j < 8; j++)
                        AA.ValuableSelfSupported.Add(ValuableSelfSupported[i]);
                AA.CurrentAStarGredyMax = CurrentAStarGredyMax;
                for (var i = 0; i < 6; i++)
                    AA.Index[i] = Index[i];
                for (var i = 0; i < 6; i++)
                    AA.jindex[i] = jindex[i];
                for (var i = 0; i < 6; i++)
                    AA.Kind[i] = Kind[i];
                if (AStarGreedyString != null)
                    AStarGreedyString.Clone(AA.AStarGreedyString);
                if (TableList.Count == 1)
                    SetObjectNumbers(TableList[0]);
                MaxHeuristicxT = Int32.MinValue;
                AA.MovementsAStarGreedyHeuristicFoundT = MovementsAStarGreedyHeuristicFoundT;
                AA.IgnoreSelfObjectsT = IgnoreSelfObjectsT;
                AA.UsePenaltyRegardMechnisamT = UsePenaltyRegardMechnisamT;
                AA.BestMovmentsT = BestMovmentsT;
                AA.PredictHeuristicT = PredictHeuristicT;
                AA.OnlySelfT = OnlySelfT;
                AA.AStarGreedyHeuristicT = AStarGreedyHeuristicT;
                AA.ArrangmentsChanged = ArrangmentsChanged;
                AA.CastlesKing = CastlesKing;


                AA.SodierMidle = SodierMidle;
                AA.SodierHigh = SodierHigh;
                AA.ElefantMidle = ElefantMidle;
                AA.ElefantHigh = ElefantHigh;
                AA.HourseMidle = HourseMidle;
                AA.HourseHight = HourseHight;
                AA.CastleMidle = CastleMidle;
                AA.CastleHigh = CastleHigh;
                AA.MinisterMidle = MinisterMidle;
                AA.MinisterHigh = MinisterHigh;
                AA.KingMidle = KingMidle;
                AA.KingHigh = KingHigh;
                //Initiate a new class object and clone a copy.

                AA.SolderesOnTable = new DrawSoldierQ[SodierHigh];
                AA.ArrangmentsChanged = ArrangmentsChanged;
                for (var i = 0; i < SodierHigh; i++)
                {

                    SolderesOnTable[i].Clone(ref AA.SolderesOnTable[i]);

                }
                AA.ElephantOnTable = new DrawElefantQ[ElefantHigh];
                for (var i = 0; i < ElefantHigh; i++)
                {

                    ElephantOnTable[i].Clone(ref AA.ElephantOnTable[i]);


                }
                AA.HoursesOnTable = new DrawHourseQ[HourseHight];
                for (var i = 0; i < HourseHight; i++)
                {

                    HoursesOnTable[i].Clone(ref AA.HoursesOnTable[i]);


                }
                AA.CastlesOnTable = new DrawCastleQ[CastleHigh];
                for (var i = 0; i < CastleHigh; i++)
                {

                    CastlesOnTable[i].Clone(ref AA.CastlesOnTable[i]);


                }
                AA.MinisterOnTable = new DrawMinisterQ[MinisterHigh];
                for (var i = 0; i < MinisterHigh; i++)
                {

                    MinisterOnTable[i].Clone(ref AA.MinisterOnTable[i]);


                }
                AA.KingOnTable = new DrawKingQ[KingHigh];
                for (var i = 0; i < KingHigh; i++)
                {

                    KingOnTable[i].Clone(ref AA.KingOnTable[i]);


                }
                AA.AStarGreedy = AStarGreedy;

                if (AA.TableList.Count > 0)
                    AA.TableList.Clear();
                for (var i = 0; i < TableList.Count; i++)
                    AA.TableList.Add(TableList[i]);
                if (AA.TableList.Count > 0)
                    AA.SetObjectNumbers(AA.TableList[0]);
                AA.AStarGreedy = AStarGreedy;
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("Clone:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //a Constructor
        public AllDraw(int Order, bool MovementsAStarGreedyHeuristicTFou, bool IgnoreSelfObject, bool UsePenaltyRegardMechnisa, bool BestMovment, bool PredictHurist, bool OnlySel, bool AStarGreedyHuris, bool Arrangments, AllDraw THi)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a = new Object();
            lock (a)
            {
                OrderP = Order;
                MaxHeuristicxT = Int32.MinValue;
                MovementsAStarGreedyHeuristicFoundT = MovementsAStarGreedyHeuristicTFou;
                IgnoreSelfObjectsT = IgnoreSelfObject;
                UsePenaltyRegardMechnisamT = UsePenaltyRegardMechnisa;
                BestMovmentsT = BestMovment;
                PredictHeuristicT = PredictHurist;
                OnlySelfT = OnlySel;
                AStarGreedyHeuristicT = AStarGreedyHuris;
                if (!Arrangments)
                    ArrangmentsChanged = Arrangments;
                else
                    ArrangmentsChanged = Arrangments;
                Object Om = new Object();
                lock (Om)
                {
                    AStarGreedytMaxCount = 0;
                }
                Object Omm = new Object();
                lock (Omm)
                {
                    FoundATable = false;
                }
                CastlesKing = false;
                increASedProgress = 0;
                Object ol = new Object();
                lock (ol)
                {
                    CurrentHeuristic = Int32.MinValue;

                    DrawTable = false;

                    TableVeryfy = new int[8, 8];

                    TableVeryfyConst = new int[8, 8];

                    TableCurrent.Clear();

                    NoTableFound = false;

                    DynamicAStarGreedytPrograming = false;
                    UseDoubleTime = false;
                    AStarGreadyFirstSearch = true;
                    ImageRoot = AllDraw.Root + "\\Images";
                    ImagesSubRoot = AllDraw.ImageRoot + "\\Fit\\Small\\";
                }
                RedrawTable = true;
                SodierConversionOcuured = false;
                SodierMovments = 1;
                ElefantMovments = 1;
                HourseMovments = 1;
                CastleMovments = 1;
                MinisterMovments = 1;
                KingMovments = 1;
                SodierMidle = 8;
                SodierHigh = 16;
                ElefantMidle = 2;
                ElefantHigh = 4;
                HourseMidle = 2;
                HourseHight = 4;
                CastleMidle = 2;
                CastleHigh = 4;
                MinisterMidle = 1;
                MinisterHigh = 2;
                KingMidle = 1;
                KingHigh = 2;

                //APredict = null;
                RW = 0;
                CL = 0;
                Ki = 0;
                RW1 = 0;
                CL1 = 0;
                Ki1 = 0;
                MaxLess1 = 0;
                RW2 = 0;
                CL2 = 0;
                Ki2 = 0;
                MaxLess2 = 0;
                RW3 = 0;
                CL3 = 0;
                Ki3 = 0;
                MaxLess3 = 0;
                RW4 = 0;
                CL4 = 0;
                Ki4 = 0;
                MaxLess4 = 0;
                RW5 = 0;
                CL5 = 0;
                Ki5 = 0;
                MaxLess5 = 0;
                RW6 = 0;
                CL6 = 0;
                Ki6 = 0;
                MaxLess6 = 0;
                LoopHeuristicIndex = 0;
                Move = 0;
                //MouseClick = 0;
                AStarGreedyIndex = new int[20];
                AStarGreedy = 0;
                /*SolderesOnTable = null;
                ElephantOnTable = null;
                HoursesOnTable = null;
                CastlesOnTable = null;
                MinisterOnTable = null;
                KingOnTable = null;
                */
                Object OOOO = new Object();
                lock (OOOO)
                {
                    MaxDuringLevelThinkingQuantumCreation = System.Convert.ToInt32(AllDraw.THIScomboBoxMaxLevelText);
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("AllDraw_2:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //Check For ThinkingQuantum Of Current Item Movments Finished.
        public bool AllCurrentAStarGreedyThinkingQuantumFinished(AllDraw Dum, int i, int j, int Kind)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a = new Object();
            lock (a)
            {
                //For All kind of Current ThinkingQuantum depend of current type consider finshing state ThinkingQuantum.
                bool Finished = false;
                {
                    //For Soldier
                    if (Kind == 1)
                    {

                        if (Dum.SolderesOnTable[i].SoldierThinkingQuantum[0].ThinkingQuantumFinished)
                            return true;
                    }
                    //For Elephant
                    else if (Kind == 2)
                    {
                        if (Dum.ElephantOnTable[i].ElefantThinkingQuantum[0].ThinkingQuantumFinished)
                            return true;
                    }
                    //For Hourse.
                    else if (Kind == 3)
                    {
                        if (Dum.HoursesOnTable[i].HourseThinkingQuantum[0].ThinkingQuantumFinished)
                            return true;
                    }
                    //For Castles.
                    else if (Kind == 4)
                    {
                        if (Dum.CastlesOnTable[i].CastleThinkingQuantum[0].ThinkingQuantumFinished)
                            return true;
                    }
                    //For Minsters.
                    else if (Kind == 5)
                    {
                        if (Dum.MinisterOnTable[i].MinisterThinkingQuantum[0].ThinkingQuantumFinished)
                            return true;
                    }
                    //For Kings.
                    else if (Kind == 6)
                    {
                        if (Dum.KingOnTable[i].KingThinkingQuantum[0].ThinkingQuantumFinished)
                            return true;
                    }
                }
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("AllCurrentAStarGreedyThinkingQuantumFinished:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return Finished;

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("AllDraw_2:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }

        //Rearrange AllDraw Object Content.
        public void SetRowColumn(int index, bool Verify = false)
        {
            if (Verify)
            {
                if (SetRowColumn())
                    return;
                int Dummy = OrderP;
                AllDraw thisAStarGreedyString = new AllDraw(OrderP, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged); thisAStarGreedyString = this.AStarGreedyString;
                //long Time = TimeElapced.TimeNow(); Spaces++;
                Object a1 = new Object();
                lock (a1)
                {

                    SetObjectNumbers(TableList[0]);

                    int So1 = 0;
                    int So2 = SodierMidle;
                    int El1 = 0;
                    int El2 = ElefantMidle;
                    int Ho1 = 0;
                    int Ho2 = HourseMidle;
                    int Br1 = 0;
                    int Br2 = CastleMidle;
                    int Mi1 = 0;
                    int Mi2 = MinisterMidle;
                    int Ki1 = 0;
                    int Ki2 = KingMidle;


                    SetRowColumnFinished = false;

                    Move = 0;
                    //Intiate Dummy Variables.
                    //When Conversion Occured.

                    //When Table Exist.
                    if (TableList.Count > 0)
                    {
                        //For Every Table Things.
                        for (int Column = 0; Column < 8; Column++)
                            for (int Row = 0; Row < 8; Row++)
                            {
                                /* if (!TableZero(Tabl))
                                 {

                                     if (TableEqual(CloneATable(TableList[index]), Tabl))
                                         return;
                                 }*/
                                if (CloneATable(TableList[index])[Row, Column] == 0)
                                    continue;
                                //When Things are Soldiers.
                                if (System.Math.Abs(CloneATable(TableList[index])[Row, Column]) == 1)
                                {
                                    //Determine int
                                    Color a;

                                    if (CloneATable(TableList[index])[Row, Column] > 0)
                                    {
                                        OrderP = 1;
                                        a = Color.Gray;
                                    }
                                    else
                                    {
                                        OrderP = -1;
                                        a = Color.Brown;
                                    }     //When int is Gray. 
                                    if (a == Color.Gray)
                                    {

                                        //Construct Soder Gray.
                                        SolderesOnTable[So1].Row = Row;
                                        SolderesOnTable[So1].Column = Column;

                                        //IncreASe So1.
                                        So1++;
                                        if (So1 > SodierMidle)
                                        {
                                            SodierMidle++;
                                            SodierHigh++;
                                        }



                                    }
                                    //When int is Brown
                                    else
                                    {

                                        //Construct Soldeir Brown.
                                        SolderesOnTable[So2].Row = Row;
                                        SolderesOnTable[So2].Column = Column;

                                        //IncreASe So2.
                                        So2++;
                                        if (So2 > SodierHigh)
                                            SodierHigh++;


                                    }
                                }
                                else //For Elephant Objects.
                                    if (System.Math.Abs(CloneATable(TableList[index])[Row, Column]) == 2)
                                {
                                    //Initiate Local Variables.
                                    Color a;
                                    if (CloneATable(TableList[index])[Row, Column] > 0)
                                    {
                                        OrderP = 1;
                                        a = Color.Gray;
                                    }
                                    else
                                    {
                                        OrderP = -1;
                                        a = Color.Brown;
                                    }    //If Gray Elepahnt
                                    if (a == Color.Gray)
                                    {


                                        //Construction of Draw Object.
                                        ElephantOnTable[El1].Row = Row;
                                        ElephantOnTable[El1].Column = Column;

                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(El1, OrderP, 2);
                                        //Increament of Gray Index.
                                        El1++;
                                        //If New Object Increament Gray Objects.
                                        if (El1 > ElefantMidle)
                                        {
                                            ElefantMidle++;
                                            ElefantHigh++;
                                        }

                                    }
                                    else//For Brown Elephant .Objects
                                    {


                                        //Construction of Draw Brown Elephant Object. 
                                        ElephantOnTable[El2].Row = Row;
                                        ElephantOnTable[El2].Column = Column;

                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(El2, OrderP, 2);
                                        //Increament of Index.
                                        El2++;
                                        //When New Brown Elephant Object Increament of Index.
                                        if (El2 > ElefantHigh)
                                            ElefantHigh++;


                                    }
                                }
                                else//For Hourse Objects.
                                        if (System.Math.Abs(CloneATable(TableList[index])[Row, Column]) == 3)
                                {
                                    //Initiate Local Varibale and int.
                                    Color a;
                                    if (CloneATable(TableList[index])[Row, Column] > 0)
                                    {
                                        OrderP = 1;
                                        a = Color.Gray;
                                    }
                                    else
                                    {
                                        OrderP = -1;
                                        a = Color.Brown;
                                    }                //If Gray Hourse.
                                    if (a == Color.Gray)
                                    {



                                        //Construction of Draw Brown Hourse.
                                        HoursesOnTable[Ho1].Row = Row;
                                        HoursesOnTable[Ho1].Column = Column;


                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(Ho1, OrderP, 3);
                                        //Increament of Index.
                                        Ho1++;
                                        //when There is New Gray Hourse IncreASe.
                                        if (Ho1 > HourseMidle)
                                        {
                                            HourseMidle++;
                                            HourseHight++;
                                        }

                                    }//For Brown Hourses.
                                    else
                                    {


                                        //Construction of Draw Brown Hourse.
                                        HoursesOnTable[Ho2].Row = Row;
                                        HoursesOnTable[Ho2].Column = Column;

                                        //Increament of Index.
                                        Ho2++;
                                        //When New Brown Hourse Exist Exist Index.
                                        if (Ho2 > HourseHight)
                                            HourseHight++;

                                    }
                                }
                                else//For Castles Objects.
                                            if (System.Math.Abs(CloneATable(TableList[index])[Row, Column]) == 4)
                                {
                                    //Initiate of Local Variables.
                                    Color a;
                                    if (CloneATable(TableList[index])[Row, Column] > 0)
                                    {
                                        OrderP = 1;
                                        a = Color.Gray;
                                    }
                                    else
                                    {
                                        OrderP = -1;
                                        a = Color.Brown;
                                    }         //For Gray int.
                                    if (a == Color.Gray)
                                    {



                                        //Construction of New Draw Gray Castles.
                                        CastlesOnTable[Br1].Row = Row;
                                        CastlesOnTable[Br1].Column = Column;
                                        //Increamnt of Index.
                                        Br1++;
                                        //When New Gray Briges Increamnt Max Index.
                                        if (Br1 > CastleMidle)
                                        {
                                            CastleMidle++;
                                            CastleHigh++;
                                        }

                                    }//For Brown Castles.
                                    else
                                    {


                                        //Construction Draw of New Brown Castles.
                                        CastlesOnTable[Br2].Row = Row;
                                        CastlesOnTable[Br2].Column = Column;

                                        //Increament of Index.
                                        Br2++;
                                        //wehn Brown New Castles Detected Increament Max Index.
                                        if (Br2 > CastleHigh)
                                            CastleHigh++;

                                    }
                                }
                                else//For Minister Objects.
                                                if (System.Math.Abs(CloneATable(TableList[index])[Row, Column]) == 5)
                                {
                                    //Initiate Local int Varibales.
                                    Color a;
                                    if (CloneATable(TableList[index])[Row, Column] > 0)
                                    {
                                        OrderP = 1;
                                        a = Color.Gray;
                                    }
                                    else
                                    {
                                        OrderP = -1;
                                        a = Color.Brown;
                                    }     //For Gray ints.
                                    if (a == Color.Gray)
                                    {




                                        //construction of new draw Gray Minster.
                                        MinisterOnTable[Mi1].Row = Row;
                                        MinisterOnTable[Mi1].Column = Column;

                                        //Increament of Index.
                                        Mi1++;
                                        //Wehn New Gray Minster Detected Increament Max Indexes.
                                        if (Mi1 > MinisterMidle)
                                        {
                                            MinisterMidle++;
                                            MinisterHigh++;
                                        }


                                    }//For Brown  ints.
                                    else
                                    {


                                        //Construction of New Draw Brown Minster.
                                        MinisterOnTable[Mi2].Row = Row;
                                        MinisterOnTable[Mi2].Column = Column;

                                        //Increament Index.
                                        Mi2++;
                                        //When New Brown Minister Detected Increament Max Index.
                                        if (Mi2 > MinisterHigh)
                                            MinisterHigh++;

                                    }
                                }
                                else//for King Objects.        
                                if (System.Math.Abs(CloneATable(TableList[index])[Row, Column]) == 6)
                                {
                                    //Initiate Of int.
                                    Color a;
                                    if (CloneATable(TableList[index])[Row, Column] > 0)
                                    {
                                        OrderP = 1;
                                        a = Color.Gray;
                                    }
                                    else
                                    {
                                        OrderP = -1;
                                        a = Color.Brown;
                                    }     //int consideration.
                                    if (a == Color.Gray)
                                    {



                                        //Construction of New Draw Gray King.
                                        KingOnTable[Ki1].Row = Row;
                                        KingOnTable[Ki1].Column = Column;

                                        //Increament of Index.
                                        Ki1++;
                                        //when New Draw  Object Detected Increament Max Index.
                                        if (Ki1 > KingMidle)
                                        {
                                            KingMidle++;
                                            KingHigh++;

                                        }

                                    }//For Brown King int
                                    else
                                    {


                                        //Construction of New Draw King Brown Object.
                                        KingOnTable[Ki2].Row = Row;
                                        KingOnTable[Ki2].Column = Column;

                                        //Increament of Index.
                                        Ki2++;
                                        //When New Object Detected Increament Of Brown King Max Index.
                                        if (Ki2 > KingHigh)
                                            KingHigh++;

                                    }

                                }
                            }

                        //Make Empty Remaining.


                    }



                    SetObjectNumbers(TableList[0]);
                    for (var i = So1; i < SodierMidle; i++)
                        SolderesOnTable[i] = null;

                    for (var i = So2; i < SodierHigh; i++)
                        SolderesOnTable[i] = null;

                    for (var i = El1; i < ElefantMidle; i++)
                        ElephantOnTable[i] = null;

                    for (var i = El2; i < ElefantHigh; i++)
                        ElephantOnTable[i] = null;

                    for (var i = Ho1; i < HourseMidle; i++)
                        HoursesOnTable[i] = null;

                    for (var i = Ho2; i < HourseHight; i++)
                        HoursesOnTable[i] = null;

                    for (var i = Br1; i < CastleMidle; i++)
                        CastlesOnTable[i] = null;

                    for (var i = Br2; i < CastleHigh; i++)
                        CastlesOnTable[i] = null;

                    for (var i = Mi1; i < MinisterMidle; i++)
                        MinisterOnTable[i] = null;

                    for (var i = Mi2; i < MinisterHigh; i++)
                        MinisterOnTable[i] = null;

                    for (var i = Ki1; i < KingMidle; i++)
                        KingOnTable[i] = null;

                    for (var i = Ki2; i < KingHigh; i++)
                        KingOnTable[i] = null;
                    if (TableList.Count > 0)
                    {
                        for (var i = 0; i < 8; i++)
                            for (var j = 0; j < 8; j++)
                                Tabl[i, j] = TableList[0][i, j];
                    }
                    SetRowColumnFinished = true;
                }
                //{ AllDraw.OutPut.Append("\r\n"); for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space); AllDraw.OutPut.Append("SetRowColumn:" + (TimeElapced.TimeNow() - Time).ToString()); }
                Spaces--;
                this.AStarGreedyString = thisAStarGreedyString;
                OrderP = Dummy;
            }
            else
            {
                int Dummy = OrderP;
                AllDraw thisAStarGreedyString = new AllDraw(OrderP, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged); thisAStarGreedyString = this.AStarGreedyString;
                //long Time = TimeElapced.TimeNow(); Spaces++;
                Object a1 = new Object();
                lock (a1)
                {

                    SetObjectNumbers(TableList[0]);

                    int So1 = 0;
                    int So2 = SodierMidle;
                    int El1 = 0;
                    int El2 = ElefantMidle;
                    int Ho1 = 0;
                    int Ho2 = HourseMidle;
                    int Br1 = 0;
                    int Br2 = CastleMidle;
                    int Mi1 = 0;
                    int Mi2 = MinisterMidle;
                    int Ki1 = 0;
                    int Ki2 = KingMidle;


                    SetRowColumnFinished = false;

                    Move = 0;
                    //Intiate Dummy Variables.
                    //When Conversion Occured.
                    SolderesOnTable = new DrawSoldierQ[SodierHigh];
                    ElephantOnTable = new DrawElefantQ[ElefantHigh];
                    HoursesOnTable = new DrawHourseQ[HourseHight];
                    CastlesOnTable = new DrawCastleQ[CastleHigh];
                    MinisterOnTable = new DrawMinisterQ[MinisterHigh];
                    KingOnTable = new DrawKingQ[KingHigh];
                    AllDraw.SodierConversionOcuured = false;

                    //When Table Exist.
                    if (TableList.Count > 0)
                    {
                        //For Every Table Things.
                        for (int Column = 0; Column < 8; Column++)
                            for (int Row = 0; Row < 8; Row++)
                            {
                                /* if (!TableZero(Tabl))
                                 {

                                     if (TableEqual(CloneATable(TableList[index]), Tabl))
                                         return;
                                 }*/
                                if (CloneATable(TableList[index])[Row, Column] == 0)
                                    continue;
                                //When Things are Soldiers.
                                if (System.Math.Abs(CloneATable(TableList[index])[Row, Column]) == 1)
                                {
                                    //Determine int
                                    Color a;

                                    if (CloneATable(TableList[index])[Row, Column] > 0)
                                    {
                                        OrderP = 1;
                                        a = Color.Gray;
                                    }
                                    else
                                    {
                                        OrderP = -1;
                                        a = Color.Brown;
                                    }     //When int is Gray. 
                                    if (a == Color.Gray)
                                    {

                                        //Construct Soder Gray.
                                        SolderesOnTable[So1] = new DrawSoldierQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, Row, Column, a, CloneATable(TableList[index]), 1, false, So1);

                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(So1, OrderP, 1);

                                        //IncreASe So1.
                                        So1++;
                                        if (So1 > SodierMidle)
                                        {
                                            SodierMidle++;
                                            SodierHigh++;
                                        }



                                    }
                                    //When int is Brown
                                    else
                                    {

                                        //Construct Soldeir Brown.
                                        SolderesOnTable[So2] = new DrawSoldierQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, Row, Column, a, CloneATable(TableList[index]), -1, false, So2);

                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(So2, OrderP, 1);
                                        //IncreASe So2.
                                        So2++;
                                        if (So2 > SodierHigh)
                                            SodierHigh++;


                                    }
                                }
                                else //For Elephant Objects.
                                    if (System.Math.Abs(CloneATable(TableList[index])[Row, Column]) == 2)
                                {
                                    //Initiate Local Variables.
                                    Color a;
                                    if (CloneATable(TableList[index])[Row, Column] > 0)
                                    {
                                        OrderP = 1;
                                        a = Color.Gray;
                                    }
                                    else
                                    {
                                        OrderP = -1;
                                        a = Color.Brown;
                                    }    //If Gray Elepahnt
                                    if (a == Color.Gray)
                                    {


                                        //Construction of Draw Object.
                                        ElephantOnTable[El1] = new DrawElefantQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, Row, Column, a, CloneATable(TableList[index]), 1, false, El1);

                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(El1, OrderP, 2);
                                        //Increament of Gray Index.
                                        El1++;
                                        //If New Object Increament Gray Objects.
                                        if (El1 > ElefantMidle)
                                        {
                                            ElefantMidle++;
                                            ElefantHigh++;
                                        }

                                    }
                                    else//For Brown Elephant .Objects
                                    {


                                        //Construction of Draw Brown Elephant Object. 
                                        ElephantOnTable[El2] = new DrawElefantQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, Row, Column, a, CloneATable(TableList[index]), -1, false, El2);

                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(El2, OrderP, 2);
                                        //Increament of Index.
                                        El2++;
                                        //When New Brown Elephant Object Increament of Index.
                                        if (El2 > ElefantHigh)
                                            ElefantHigh++;


                                    }
                                }
                                else//For Hourse Objects.
                                        if (System.Math.Abs(CloneATable(TableList[index])[Row, Column]) == 3)
                                {
                                    //Initiate Local Varibale and int.
                                    Color a;
                                    if (CloneATable(TableList[index])[Row, Column] > 0)
                                    {
                                        OrderP = 1;
                                        a = Color.Gray;
                                    }
                                    else
                                    {
                                        OrderP = -1;
                                        a = Color.Brown;
                                    }                //If Gray Hourse.
                                    if (a == Color.Gray)
                                    {



                                        //Construction of Draw Brown Hourse.
                                        HoursesOnTable[Ho1] = new DrawHourseQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, Row, Column, a, CloneATable(TableList[index]), 1, false, Ho1);

                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(Ho1, OrderP, 3);
                                        //Increament of Index.
                                        Ho1++;
                                        //when There is New Gray Hourse IncreASe.
                                        if (Ho1 > HourseMidle)
                                        {
                                            HourseMidle++;
                                            HourseHight++;
                                        }

                                    }//For Brown Hourses.
                                    else
                                    {


                                        //Construction of Draw Brown Hourse.
                                        HoursesOnTable[Ho2] = new DrawHourseQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, Row, Column, a, CloneATable(TableList[index]), -1, false, Ho2);

                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(Ho2, OrderP, 3);
                                        //Increament of Index.
                                        Ho2++;
                                        //When New Brown Hourse Exist Exist Index.
                                        if (Ho2 > HourseHight)
                                            HourseHight++;

                                    }
                                }
                                else//For Castles Objects.
                                            if (System.Math.Abs(CloneATable(TableList[index])[Row, Column]) == 4)
                                {
                                    //Initiate of Local Variables.
                                    Color a;
                                    if (CloneATable(TableList[index])[Row, Column] > 0)
                                    {
                                        OrderP = 1;
                                        a = Color.Gray;
                                    }
                                    else
                                    {
                                        OrderP = -1;
                                        a = Color.Brown;
                                    }         //For Gray int.
                                    if (a == Color.Gray)
                                    {



                                        //Construction of New Draw Gray Castles.
                                        CastlesOnTable[Br1] = new DrawCastleQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, Row, Column, a, CloneATable(TableList[index]), 1, false, Br1);

                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(Br1, OrderP, 4);
                                        //Increamnt of Index.
                                        Br1++;
                                        //When New Gray Briges Increamnt Max Index.
                                        if (Br1 > CastleMidle)
                                        {
                                            CastleMidle++;
                                            CastleHigh++;
                                        }

                                    }//For Brown Castles.
                                    else
                                    {


                                        //Construction Draw of New Brown Castles.
                                        CastlesOnTable[Br2] = new DrawCastleQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, Row, Column, a, CloneATable(TableList[index]), -1, false, Br2);

                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(Br2, OrderP, 4);
                                        //Increament of Index.
                                        Br2++;
                                        //wehn Brown New Castles Detected Increament Max Index.
                                        if (Br2 > CastleHigh)
                                            CastleHigh++;

                                    }
                                }
                                else//For Minister Objects.
                                                if (System.Math.Abs(CloneATable(TableList[index])[Row, Column]) == 5)
                                {
                                    //Initiate Local int Varibales.
                                    Color a;
                                    if (CloneATable(TableList[index])[Row, Column] > 0)
                                    {
                                        OrderP = 1;
                                        a = Color.Gray;
                                    }
                                    else
                                    {
                                        OrderP = -1;
                                        a = Color.Brown;
                                    }     //For Gray ints.
                                    if (a == Color.Gray)
                                    {




                                        //construction of new draw Gray Minster.
                                        MinisterOnTable[Mi1] = new DrawMinisterQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, Row, Column, a, CloneATable(TableList[index]), 1, false, Mi1);

                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(Mi1, OrderP, 5);
                                        //Increament of Index.
                                        Mi1++;
                                        //Wehn New Gray Minster Detected Increament Max Indexes.
                                        if (Mi1 > MinisterMidle)
                                        {
                                            MinisterMidle++;
                                            MinisterHigh++;
                                        }


                                    }//For Brown  ints.
                                    else
                                    {


                                        //Construction of New Draw Brown Minster.
                                        MinisterOnTable[Mi2] = new DrawMinisterQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, Row, Column, a, CloneATable(TableList[index]), -1, false, Mi2);

                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(Mi2, OrderP, 5);
                                        //Increament Index.
                                        Mi2++;
                                        //When New Brown Minister Detected Increament Max Index.
                                        if (Mi2 > MinisterHigh)
                                            MinisterHigh++;

                                    }
                                }
                                else//for King Objects.        
                                if (System.Math.Abs(CloneATable(TableList[index])[Row, Column]) == 6)
                                {
                                    //Initiate Of int.
                                    Color a;
                                    if (CloneATable(TableList[index])[Row, Column] > 0)
                                    {
                                        OrderP = 1;
                                        a = Color.Gray;
                                    }
                                    else
                                    {
                                        OrderP = -1;
                                        a = Color.Brown;
                                    }     //int consideration.
                                    if (a == Color.Gray)
                                    {



                                        //Construction of New Draw Gray King.
                                        KingOnTable[Ki1] = new DrawKingQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, Row, Column, a, CloneATable(TableList[index]), 1, false, Ki1);

                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(Ki1, OrderP, 6);
                                        //Increament of Index.
                                        Ki1++;
                                        //when New Draw  Object Detected Increament Max Index.
                                        if (Ki1 > KingMidle)
                                        {
                                            KingMidle++;
                                            KingHigh++;

                                        }

                                    }//For Brown King int
                                    else
                                    {


                                        //Construction of New Draw King Brown Object.
                                        KingOnTable[Ki2] = new DrawKingQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, Row, Column, a, CloneATable(TableList[index]), -1, false, Ki2);

                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(Ki2, OrderP, 6);
                                        //Increament of Index.
                                        Ki2++;
                                        //When New Object Detected Increament Of Brown King Max Index.
                                        if (Ki2 > KingHigh)
                                            KingHigh++;

                                    }

                                }
                            }

                        //Make Empty Remaining.


                    }



                    SetObjectNumbers(TableList[0]);
                    for (var i = So1; i < SodierMidle; i++)
                        SolderesOnTable[i] = null;

                    for (var i = So2; i < SodierHigh; i++)
                        SolderesOnTable[i] = null;

                    for (var i = El1; i < ElefantMidle; i++)
                        ElephantOnTable[i] = null;

                    for (var i = El2; i < ElefantHigh; i++)
                        ElephantOnTable[i] = null;

                    for (var i = Ho1; i < HourseMidle; i++)
                        HoursesOnTable[i] = null;

                    for (var i = Ho2; i < HourseHight; i++)
                        HoursesOnTable[i] = null;

                    for (var i = Br1; i < CastleMidle; i++)
                        CastlesOnTable[i] = null;

                    for (var i = Br2; i < CastleHigh; i++)
                        CastlesOnTable[i] = null;

                    for (var i = Mi1; i < MinisterMidle; i++)
                        MinisterOnTable[i] = null;

                    for (var i = Mi2; i < MinisterHigh; i++)
                        MinisterOnTable[i] = null;

                    for (var i = Ki1; i < KingMidle; i++)
                        KingOnTable[i] = null;

                    for (var i = Ki2; i < KingHigh; i++)
                        KingOnTable[i] = null;
                    if (TableList.Count > 0)
                    {
                        for (var i = 0; i < 8; i++)
                            for (var j = 0; j < 8; j++)
                                Tabl[i, j] = TableList[0][i, j];
                    }
                    SetRowColumnFinished = true;
                }
                //{ AllDraw.OutPut.Append("\r\n"); for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space); AllDraw.OutPut.Append("SetRowColumn:" + (TimeElapced.TimeNow() - Time).ToString()); }
                Spaces--;
                this.AStarGreedyString = thisAStarGreedyString;
                OrderP = Dummy;
            }
            SetObjectNumbers(Tabl);
        }
        public bool SetRowColumn()
        {
            int Dummy = OrderP;
            AllDraw thisAStarGreedyString = new AllDraw(OrderP, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged); thisAStarGreedyString = this.AStarGreedyString;
            //long Time = TimeElapced.TimeNow(); Spaces++;
            Object a1 = new Object();
            lock (a1)
            {

                SetObjectNumbers(TableList[0]);

                int So1 = 0;
                int So2 = SodierMidle;
                int El1 = 0;
                int El2 = ElefantMidle;
                int Ho1 = 0;
                int Ho2 = HourseMidle;
                int Br1 = 0;
                int Br2 = CastleMidle;
                int Mi1 = 0;
                int Mi2 = MinisterMidle;
                int Ki1 = 0;
                int Ki2 = KingMidle;


                SetRowColumnFinished = false;

                Move = 0;

                //When Table Exist.
                if (TableList.Count > 0)
                {
                    //For Every Table Things.
                    for (int Column = 0; Column < 8; Column++)
                        for (int Row = 0; Row < 8; Row++)
                        {
                            /* if (!TableZero(Tabl))
                             {

                                 if (TableEqual(CloneATable(TableList[0]), Tabl))
                                     return;
                             }*/
                            if (CloneATable(TableList[0])[Row, Column] == 0)
                                continue;
                            //When Things are Soldiers.
                            if (System.Math.Abs(CloneATable(TableList[0])[Row, Column]) == 1)
                            {
                                //Determine int
                                Color a;

                                if (CloneATable(TableList[0])[Row, Column] > 0)
                                {
                                    OrderP = 1;
                                    a = Color.Gray;
                                }
                                else
                                {
                                    OrderP = -1;
                                    a = Color.Brown;
                                }     //When int is Gray. 
                                if (a == Color.Gray)
                                {
                                    if (TableList[0][(int)SolderesOnTable[So1].Row, (int)SolderesOnTable[So1].Column] != 1)
                                        return false;

                                    //IncreASe So1.
                                    So1++;
                                    if (So1 > SodierMidle)
                                    {
                                        SodierMidle++;
                                        SodierHigh++;
                                    }



                                }
                                //When int is Brown
                                else
                                {

                                    if (TableList[0][(int)SolderesOnTable[So2].Row, (int)SolderesOnTable[So2].Column] != -1)
                                        return false;
                                    //IncreASe So2.
                                    So2++;
                                    if (So2 > SodierHigh)
                                        SodierHigh++;


                                }
                            }
                            else //For Elephant Objects.
                                if (System.Math.Abs(CloneATable(TableList[0])[Row, Column]) == 2)
                            {
                                //Initiate Local Variables.
                                Color a;
                                if (CloneATable(TableList[0])[Row, Column] > 0)
                                {
                                    OrderP = 1;
                                    a = Color.Gray;
                                }
                                else
                                {
                                    OrderP = -1;
                                    a = Color.Brown;
                                }    //If Gray Elepahnt
                                if (a == Color.Gray)
                                {


                                    if (TableList[0][(int)ElephantOnTable[El1].Row, (int)ElephantOnTable[El1].Column] != 2)
                                        return false;
                                    //Increament of Gray 0.
                                    El1++;
                                    //If New Object Increament Gray Objects.
                                    if (El1 > ElefantMidle)
                                    {
                                        ElefantMidle++;
                                        ElefantHigh++;
                                    }

                                }
                                else//For Brown Elephant .Objects
                                {


                                    if (TableList[0][(int)ElephantOnTable[El2].Row, (int)ElephantOnTable[El2].Column] != -2)
                                        return false;
                                    //Increament of 0.
                                    El2++;
                                    //When New Brown Elephant Object Increament of 0.
                                    if (El2 > ElefantHigh)
                                        ElefantHigh++;


                                }
                            }
                            else//For Hourse Objects.
                                    if (System.Math.Abs(CloneATable(TableList[0])[Row, Column]) == 3)
                            {
                                //Initiate Local Varibale and int.
                                Color a;
                                if (CloneATable(TableList[0])[Row, Column] > 0)
                                {
                                    OrderP = 1;
                                    a = Color.Gray;
                                }
                                else
                                {
                                    OrderP = -1;
                                    a = Color.Brown;
                                }                //If Gray Hourse.
                                if (a == Color.Gray)
                                {



                                    if (TableList[0][(int)HoursesOnTable[Ho1].Row, (int)HoursesOnTable[Ho1].Column] != 3)
                                        return false;
                                    //Increament of 0.
                                    Ho1++;
                                    //when There is New Gray Hourse IncreASe.
                                    if (Ho1 > HourseMidle)
                                    {
                                        HourseMidle++;
                                        HourseHight++;
                                    }

                                }//For Brown Hourses.
                                else
                                {


                                    if (TableList[0][(int)HoursesOnTable[Ho2].Row, (int)HoursesOnTable[Ho2].Column] != -3)
                                        return false;
                                    //Increament of 0.
                                    Ho2++;
                                    //When New Brown Hourse Exist Exist 0.
                                    if (Ho2 > HourseHight)
                                        HourseHight++;

                                }
                            }
                            else//For Castles Objects.
                                        if (System.Math.Abs(CloneATable(TableList[0])[Row, Column]) == 4)
                            {
                                //Initiate of Local Variables.
                                Color a;
                                if (CloneATable(TableList[0])[Row, Column] > 0)
                                {
                                    OrderP = 1;
                                    a = Color.Gray;
                                }
                                else
                                {
                                    OrderP = -1;
                                    a = Color.Brown;
                                }         //For Gray int.
                                if (a == Color.Gray)
                                {



                                    if (TableList[0][(int)CastlesOnTable[Br1].Row, (int)CastlesOnTable[Br1].Column] != 4)
                                        return false;
                                    //Increamnt of 0.
                                    Br1++;
                                    //When New Gray Briges Increamnt Max 0.
                                    if (Br1 > CastleMidle)
                                    {
                                        CastleMidle++;
                                        CastleHigh++;
                                    }

                                }//For Brown Castles.
                                else
                                {


                                    if (TableList[0][(int)CastlesOnTable[Br2].Row, (int)CastlesOnTable[Br2].Column] != -4)
                                        return false;
                                    //Increament of 0.
                                    Br2++;
                                    //wehn Brown New Castles Detected Increament Max 0.
                                    if (Br2 > CastleHigh)
                                        CastleHigh++;

                                }
                            }
                            else//For Minister Objects.
                                            if (System.Math.Abs(CloneATable(TableList[0])[Row, Column]) == 5)
                            {
                                //Initiate Local int Varibales.
                                Color a;
                                if (CloneATable(TableList[0])[Row, Column] > 0)
                                {
                                    OrderP = 1;
                                    a = Color.Gray;
                                }
                                else
                                {
                                    OrderP = -1;
                                    a = Color.Brown;
                                }     //For Gray ints.
                                if (a == Color.Gray)
                                {




                                    if (TableList[0][(int)MinisterOnTable[Mi1].Row, (int)MinisterOnTable[Mi1].Column] != 5)
                                        return false;
                                    //Increament of 0.
                                    Mi1++;
                                    //Wehn New Gray Minster Detected Increament Max 0es.
                                    if (Mi1 > MinisterMidle)
                                    {
                                        MinisterMidle++;
                                        MinisterHigh++;
                                    }


                                }//For Brown  ints.
                                else
                                {


                                    if (TableList[0][(int)MinisterOnTable[Mi2].Row, (int)MinisterOnTable[Mi2].Column] != -5)
                                        return false;
                                    //Increament 0.
                                    Mi2++;
                                    //When New Brown Minister Detected Increament Max 0.
                                    if (Mi2 > MinisterHigh)
                                        MinisterHigh++;

                                }
                            }
                            else//for King Objects.        
                            if (System.Math.Abs(CloneATable(TableList[0])[Row, Column]) == 6)
                            {
                                //Initiate Of int.
                                Color a;
                                if (CloneATable(TableList[0])[Row, Column] > 0)
                                {
                                    OrderP = 1;
                                    a = Color.Gray;
                                }
                                else
                                {
                                    OrderP = -1;
                                    a = Color.Brown;
                                }     //int consideration.
                                if (a == Color.Gray)
                                {



                                    if (TableList[0][(int)KingOnTable[Ki1].Row, (int)KingOnTable[Ki1].Column] != 6)
                                        return false;
                                    //Increament of 0.
                                    Ki1++;
                                    //when New Draw  Object Detected Increament Max 0.
                                    if (Ki1 > KingMidle)
                                    {
                                        KingMidle++;
                                        KingHigh++;

                                    }

                                }//For Brown King int
                                else
                                {


                                    if (TableList[0][(int)KingOnTable[Ki2].Row, (int)KingOnTable[Ki2].Column] != -6)
                                        return false;
                                    //Increament of 0.
                                    Ki2++;
                                    //When New Object Detected Increament Of Brown King Max 0.
                                    if (Ki2 > KingHigh)
                                        KingHigh++;

                                }

                            }
                        }

                    //Make Empty Remaining.


                }



                SetObjectNumbers(TableList[0]);
               /* for (var i = So1; i < SodierMidle; i++)
                    SolderesOnTable[i] = null;

                for (var i = So2; i < SodierHigh; i++)
                    SolderesOnTable[i] = null;

                for (var i = El1; i < ElefantMidle; i++)
                    ElephantOnTable[i] = null;

                for (var i = El2; i < ElefantHigh; i++)
                    ElephantOnTable[i] = null;

                for (var i = Ho1; i < HourseMidle; i++)
                    HoursesOnTable[i] = null;

                for (var i = Ho2; i < HourseHight; i++)
                    HoursesOnTable[i] = null;

                for (var i = Br1; i < CastleMidle; i++)
                    CastlesOnTable[i] = null;

                for (var i = Br2; i < CastleHigh; i++)
                    CastlesOnTable[i] = null;

                for (var i = Mi1; i < MinisterMidle; i++)
                    MinisterOnTable[i] = null;

                for (var i = Mi2; i < MinisterHigh; i++)
                    MinisterOnTable[i] = null;

                for (var i = Ki1; i < KingMidle; i++)
                    KingOnTable[i] = null;
*/
                for (var i = Ki2; i < KingHigh; i++)
                    KingOnTable[i] = null;
                if (TableList.Count > 0)
                {
                    for (var i = 0; i < 8; i++)
                        for (var j = 0; j < 8; j++)
                            Tabl[i, j] = TableList[0][i, j];
                }
                SetRowColumnFinished = true;
            }
            //{ AllDraw.OutPut.Append("\r\n"); for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space); AllDraw.OutPut.Append("SetRowColumn:" + (TimeElapced.TimeNow() - Time).ToString()); }
            Spaces--;
            this.AStarGreedyString = thisAStarGreedyString;
            OrderP = Dummy;
            return true;
        }

        //Waite semaphore
        void SetRowColumnFinishedWait()
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a = new Object();
            lock (a)
            {
                do
                {

                    
                } while (!SetRowColumnFinished);
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("SetRowColumnFinishedWait:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //Max Index List Of Heuristic AStarGreedy First Method.
        public void BeginIndexFoundingMaxLessofMaxList(int ListIndex, List<int> Founded, ref int LessB)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a = new Object();
            lock (a)
            {
                //When There is Maximum Huristsic AStar Gredy Back Ward in Blitz Games.
                if (MaxHeuristicAStarGreedytBackWard.Count > 0)
                {
                    //When List Index is LessB than Founded.
                    if (ListIndex < MaxHeuristicAStarGreedytBackWard.Count)
                        return;
                    //Initiate Variable.
                    bool Added = false;
                    //Recursive Method.
                    BeginIndexFoundingMaxLessofMaxList(ListIndex++, Founded, ref LessB);
                    //When Greater LessB of First index Object Found.
                    if (LessB < MaxHeuristicAStarGreedytBackWard[ListIndex][1])
                    {
                        LessB = MaxHeuristicAStarGreedytBackWard[ListIndex][1];
                        Added = true;

                        Founded.Add(2);
                    }
                    //When Greater LessB of Second index Object Found.
                    if (LessB < MaxHeuristicAStarGreedytBackWard[ListIndex][5])
                    {
                        LessB = MaxHeuristicAStarGreedytBackWard[ListIndex][5];
                        if (Added)
                            Founded.RemoveAt(Founded.Count - 1);
                        Added = true;
                        Founded.Add(6);
                    }
                    //When Greater LessB of Third index Object Found.
                    if (LessB < MaxHeuristicAStarGreedytBackWard[ListIndex][9])
                    {
                        LessB = MaxHeuristicAStarGreedytBackWard[ListIndex][9];
                        if (Added)
                            Founded.RemoveAt(Founded.Count - 1);
                        Added = true;
                        Founded.Add(10);
                    }
                    //When Greater LessB of Foutrh index Object Found.
                    if (LessB < MaxHeuristicAStarGreedytBackWard[ListIndex][13])
                    {
                        LessB = MaxHeuristicAStarGreedytBackWard[ListIndex][13];
                        if (Added)
                            Founded.RemoveAt(Founded.Count - 1);
                        Added = true;
                        Founded.Add(14);
                    }
                    //When Greater LessB of Fifth index Object Found.
                    if (LessB < MaxHeuristicAStarGreedytBackWard[ListIndex][18])
                    {
                        LessB = MaxHeuristicAStarGreedytBackWard[ListIndex][18];
                        if (Added)
                            Founded.RemoveAt(Founded.Count - 1);
                        Added = true;
                        Founded.Add(19);
                    }
                    //When Greater LessB of Sith index Object Found.
                    if (LessB < MaxHeuristicAStarGreedytBackWard[ListIndex][22])
                    {
                        LessB = MaxHeuristicAStarGreedytBackWard[ListIndex][22];
                        if (Added)
                            Founded.RemoveAt(Founded.Count - 1);
                        Added = true;
                        Founded.Add(23);
                    }
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BeginIndexFoundingMaxLessofMaxList:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //Method for Check of Existence of Checkmate less than for checked mate.
        bool IsToCheckMateHASLessDeeperThanForCheckMate(AllDraw A, int Order, ref int ToCheckMate, ref int ForCheckMate, int AStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a = new Object();
            lock (a)
            {

                //Initiate variables.
                bool AA = false;
                int CDummy = Order;
                //For Gray One.
                if (Order == 1)
                {

                    //For Solderis.
                    for (var i = 0; i < SodierMidle; i++)
                        for (var j = 0; A.SolderesOnTable != null && SolderesOnTable[i] != null && A.SolderesOnTable[i].SoldierThinkingQuantum[0] != null && j < A.SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {


                            //When there is Brown checked mate.
                            if (A.SolderesOnTable[i].SoldierThinkingQuantum[0].CheckMateAStarGreedy == -1)
                            {
                                //Set.
                                ForCheckMate = AStarGreedy;
                                if (ToCheckMate >= 0)
                                    if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                        AA = true;
                            }
                            else
                            {
                                //When there is Gray Checked mate.
                                if (A.SolderesOnTable[i].SoldierThinkingQuantum[0].CheckMateAStarGreedy == 1)
                                {
                                    ToCheckMate = AStarGreedy;
                                    if (ForCheckMate >= 0)
                                        if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                            AA = true;
                                }
                            }

                            Order *= -1;
                            for (var ii = 0; A.SolderesOnTable != null && SolderesOnTable[i] != null && A.SolderesOnTable[i].SoldierThinkingQuantum[0] != null && ii < A.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; ii++)
                                AA = AA || IsToCheckMateHASLessDeeperThanForCheckMate(A.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[ii], Order, ref ToCheckMate, ref ForCheckMate, AStarGreedy++);
                            Order = CDummy;
                        }
                    for (var i = 0; i < ElefantMidle; i++)
                        for (var j = 0; A.ElephantOnTable != null && ElephantOnTable[i] != null && A.ElephantOnTable[i].ElefantThinkingQuantum[0] != null && j < A.ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {


                            //When there is Brown checked mate.
                            if (A.ElephantOnTable[i].ElefantThinkingQuantum[0].CheckMateAStarGreedy == -1)
                            {
                                ForCheckMate = AStarGreedy;
                                if (ToCheckMate >= 0)
                                    if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                        AA = true;



                            }
                            else
                            {
                                //When there is Gray Checked mate.
                                if (A.ElephantOnTable[i].ElefantThinkingQuantum[0].CheckMateAStarGreedy == 1)
                                {
                                    ToCheckMate = AStarGreedy;
                                    if (ForCheckMate >= 0)
                                        if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                            AA = true;
                                }
                            }

                            Order *= -1;
                            for (var ii = 0; A.ElephantOnTable != null && ElephantOnTable[i] != null && A.ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ii < A.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; ii++)
                                AA = AA || IsToCheckMateHASLessDeeperThanForCheckMate(A.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[ii], Order, ref ToCheckMate, ref ForCheckMate, AStarGreedy++);
                            Order = CDummy;
                        }
                    for (var i = 0; i < HourseMidle; i++)
                        for (var j = 0; A.HoursesOnTable != null && HoursesOnTable[i] != null && A.HoursesOnTable[i].HourseThinkingQuantum[0] != null && j < A.HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {


                            //When there is Brown checked mate.
                            if (A.HoursesOnTable[i].HourseThinkingQuantum[0].CheckMateAStarGreedy == -1)
                            {
                                ForCheckMate = AStarGreedy;
                                if (ToCheckMate >= 0)
                                    if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                        AA = true;
                            }
                            else
                            {
                                //When there is Gray Checked mate.
                                if (A.HoursesOnTable[i].HourseThinkingQuantum[0].CheckMateAStarGreedy == 1)
                                {
                                    ToCheckMate = AStarGreedy;
                                    if (ForCheckMate >= 0)
                                        if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                            AA = true;
                                }
                            }

                            Order *= -1;
                            for (var ii = 0; A.HoursesOnTable != null && HoursesOnTable[i] != null && A.HoursesOnTable[i].HourseThinkingQuantum[0] != null && ii < A.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; ii++)
                                AA = AA || IsToCheckMateHASLessDeeperThanForCheckMate(A.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[ii], Order, ref ToCheckMate, ref ForCheckMate, AStarGreedy++);
                            Order = CDummy;
                        }
                    for (var i = 0; i < CastleMidle; i++)
                        for (var j = 0; A.CastlesOnTable != null && CastlesOnTable[i] != null && A.CastlesOnTable[i].CastleThinkingQuantum[0] != null && j < A.CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {


                            //When there is Brown checked mate.
                            if (A.CastlesOnTable[i].CastleThinkingQuantum[0].CheckMateAStarGreedy == -1)
                            {
                                ForCheckMate = AStarGreedy;
                                if (ToCheckMate >= 0)
                                    if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                        AA = true;
                            }
                            else
                            {
                                //When there is Gray Checked mate.
                                if (A.CastlesOnTable[i].CastleThinkingQuantum[0].CheckMateAStarGreedy == 1)
                                {
                                    ToCheckMate = AStarGreedy;
                                    if (ForCheckMate >= 0)
                                        if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                            AA = true;
                                }
                            }

                            Order *= -1;
                            for (var ii = 0; A.CastlesOnTable != null && CastlesOnTable[i] != null && A.CastlesOnTable[i].CastleThinkingQuantum[0] != null && ii < A.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; ii++)
                                AA = AA || IsToCheckMateHASLessDeeperThanForCheckMate(A.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[ii], Order, ref ToCheckMate, ref ForCheckMate, AStarGreedy++);
                            Order = CDummy;
                        }
                    for (var i = 0; i < MinisterMidle; i++)
                        for (var j = 0; A.MinisterOnTable != null && MinisterOnTable[i] != null && A.MinisterOnTable[i].MinisterThinkingQuantum[0] != null && j < A.MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {


                            //When there is Brown checked mate.
                            if (A.MinisterOnTable[i].MinisterThinkingQuantum[0].CheckMateAStarGreedy == -1)
                            {
                                ForCheckMate = AStarGreedy;
                                if (ToCheckMate >= 0)
                                    if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                        AA = true;
                            }
                            else
                            {
                                //When there is Gray Checked mate.
                                if (A.MinisterOnTable[i].MinisterThinkingQuantum[0].CheckMateAStarGreedy == 1)
                                {
                                    ToCheckMate = AStarGreedy;
                                    if (ForCheckMate >= 0)
                                        if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                            AA = true;


                                }
                            }

                            Order *= -1;
                            for (var ii = 0; A.MinisterOnTable != null && MinisterOnTable[i] != null && A.MinisterOnTable[i].MinisterThinkingQuantum[0] != null && ii < A.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; ii++)
                                AA = AA || IsToCheckMateHASLessDeeperThanForCheckMate(A.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[ii], Order, ref ToCheckMate, ref ForCheckMate, AStarGreedy++);
                            Order = CDummy;
                        }
                    for (var i = 0; i < KingMidle; i++)
                        for (var j = 0; A.KingOnTable != null && KingOnTable[i] != null && A.KingOnTable[i].KingThinkingQuantum[0] != null && j < A.KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {


                            //When there is Brown checked mate.
                            if (A.KingOnTable[i].KingThinkingQuantum[0].CheckMateAStarGreedy == -1)
                            {
                                ForCheckMate = AStarGreedy;
                                if (ToCheckMate >= 0)
                                    if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                        AA = true;
                            }
                            else
                            {
                                //When there is Gray Checked mate.
                                if (A.KingOnTable[i].KingThinkingQuantum[0].CheckMateAStarGreedy == 1)
                                {
                                    ToCheckMate = AStarGreedy;
                                    if (ForCheckMate >= 0)
                                        if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                            AA = true;
                                }
                            }

                            Order *= -1;
                            for (var ii = 0; A.KingOnTable != null && KingOnTable[i] != null && A.KingOnTable[i].KingThinkingQuantum[0] != null && ii < A.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; ii++)
                                AA = AA || IsToCheckMateHASLessDeeperThanForCheckMate(A.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[ii], Order, ref ToCheckMate, ref ForCheckMate, AStarGreedy++);
                            Order = CDummy;
                        }
                }
                else
                {
                    //ChessRules.CurrentOrder = -1;
                    for (var i = SodierMidle; i < SodierHigh; i++)
                        for (var j = 0; A.SolderesOnTable != null && SolderesOnTable[i] != null && A.SolderesOnTable[i].SoldierThinkingQuantum[0] != null && j < A.SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {


                            //When there is Brown checked mate.
                            if (A.SolderesOnTable[i].SoldierThinkingQuantum[0].CheckMateAStarGreedy == -1)
                            {
                                ForCheckMate = AStarGreedy;
                                if (ToCheckMate >= 0)
                                    if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                        AA = true;
                            }
                            else
                            {
                                //When there is Gray Checked mate.
                                if (A.SolderesOnTable[i].SoldierThinkingQuantum[0].CheckMateAStarGreedy == 1)
                                {
                                    ToCheckMate = AStarGreedy;
                                    if (ForCheckMate >= 0)
                                        if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                            AA = true;
                                }
                            }

                            Order *= -1;
                            for (var ii = 0; A.SolderesOnTable != null && SolderesOnTable[i] != null && A.SolderesOnTable[i].SoldierThinkingQuantum[0] != null && ii < A.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; ii++)
                                AA = AA || IsToCheckMateHASLessDeeperThanForCheckMate(A.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[ii], Order, ref ToCheckMate, ref ForCheckMate, AStarGreedy++);
                            Order = CDummy;
                        }
                    for (var i = ElefantMidle; i < ElefantHigh; i++)
                        for (var j = 0; A.ElephantOnTable != null && ElephantOnTable[i] != null && A.ElephantOnTable[i].ElefantThinkingQuantum[0] != null && j < A.ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {


                            //When there is Brown checked mate.
                            if (A.ElephantOnTable[i].ElefantThinkingQuantum[0].CheckMateAStarGreedy == -1)
                            {
                                ForCheckMate = AStarGreedy;
                                if (ToCheckMate >= 0)
                                    if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                        AA = true;
                            }
                            else
                            {
                                //When there is Gray Checked mate.
                                if (A.ElephantOnTable[i].ElefantThinkingQuantum[0].CheckMateAStarGreedy == 1)
                                {
                                    ToCheckMate = AStarGreedy;
                                    if (ForCheckMate >= 0)
                                        if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                            AA = true;
                                }
                            }

                            Order *= -1;
                            for (var ii = 0; A.ElephantOnTable != null && ElephantOnTable[i] != null && A.ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ii < A.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; ii++)
                                AA = AA || IsToCheckMateHASLessDeeperThanForCheckMate(A.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[ii], Order, ref ToCheckMate, ref ForCheckMate, AStarGreedy++);
                            Order = CDummy;
                        }
                    for (var i = HourseMidle; i < HourseHight; i++)
                        for (var j = 0; A.HoursesOnTable != null && HoursesOnTable[i] != null && A.HoursesOnTable[i].HourseThinkingQuantum[0] != null && j < A.HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {


                            //When there is Brown checked mate.
                            if (A.HoursesOnTable[i].HourseThinkingQuantum[0].CheckMateAStarGreedy == -1)
                            {
                                ForCheckMate = AStarGreedy;
                                if (ToCheckMate >= 0)
                                    if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                        AA = true;
                            }
                            else
                            {
                                //When there is Gray Checked mate.
                                if (A.HoursesOnTable[i].HourseThinkingQuantum[0].CheckMateAStarGreedy == 1)
                                {
                                    ToCheckMate = AStarGreedy;
                                    if (ForCheckMate >= 0)
                                        if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                            AA = true;
                                }
                            }

                            Order *= -1;
                            for (var ii = 0; A.HoursesOnTable != null && HoursesOnTable[i] != null && A.HoursesOnTable[i].HourseThinkingQuantum[0] != null && ii < A.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; ii++)
                                AA = AA || IsToCheckMateHASLessDeeperThanForCheckMate(A.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[ii], Order, ref ToCheckMate, ref ForCheckMate, AStarGreedy++);
                            Order = CDummy;
                        }
                    for (var i = CastleMidle; i < CastleHigh; i++)
                        for (var j = 0; A.CastlesOnTable != null && CastlesOnTable[i] != null && A.CastlesOnTable[i].CastleThinkingQuantum[0] != null && j < A.CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {


                            //When there is Brown checked mate.
                            if (A.CastlesOnTable[i].CastleThinkingQuantum[0].CheckMateAStarGreedy == -1)
                            {
                                ForCheckMate = AStarGreedy;
                                if (ToCheckMate >= 0)
                                    if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                        AA = true;
                            }
                            else
                            {
                                //When there is Gray Checked mate.
                                if (A.CastlesOnTable[i].CastleThinkingQuantum[0].CheckMateAStarGreedy == 1)
                                {
                                    ToCheckMate = AStarGreedy;
                                    if (ForCheckMate >= 0)
                                        if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                            AA = true;
                                }
                            }

                            Order *= -1;
                            for (var ii = 0; A.CastlesOnTable != null && CastlesOnTable[i] != null && A.CastlesOnTable[i].CastleThinkingQuantum[0] != null && ii < A.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; ii++)
                                AA = AA || IsToCheckMateHASLessDeeperThanForCheckMate(A.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[ii], Order, ref ToCheckMate, ref ForCheckMate, AStarGreedy++);
                            Order = CDummy;
                        }
                    for (var i = MinisterMidle; i < MinisterHigh; i++)
                        for (var j = 0; A.MinisterOnTable != null && MinisterOnTable[i] != null && A.MinisterOnTable[i].MinisterThinkingQuantum[0] != null && j < A.MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {


                            //When there is Brown checked mate.
                            if (A.MinisterOnTable[i].MinisterThinkingQuantum[0].CheckMateAStarGreedy == -1)
                            {
                                ForCheckMate = AStarGreedy;
                                if (ToCheckMate >= 0)
                                    if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                        AA = true;
                            }
                            else
                            {
                                //When there is Gray Checked mate.
                                if (A.MinisterOnTable[i].MinisterThinkingQuantum[0].CheckMateAStarGreedy == 1)
                                {
                                    ToCheckMate = AStarGreedy;
                                    if (ForCheckMate >= 0)
                                        if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                            AA = true;
                                }
                            }


                            Order *= -1;
                            for (var ii = 0; A.MinisterOnTable != null && MinisterOnTable[i] != null && A.MinisterOnTable[i].MinisterThinkingQuantum[0] != null && ii < A.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; ii++)
                                AA = AA || IsToCheckMateHASLessDeeperThanForCheckMate(A.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[ii], Order, ref ToCheckMate, ref ForCheckMate, AStarGreedy++);
                            Order = CDummy;
                        }
                    for (var i = KingMidle; i < KingHigh; i++)
                        for (var j = 0; A.KingOnTable != null && KingOnTable[i] != null && A.KingOnTable[i].KingThinkingQuantum[0] != null && j < A.KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {


                            //When there is Brown checked mate.
                            if (A.KingOnTable[i].KingThinkingQuantum[0].CheckMateAStarGreedy == -1)
                            {
                                ForCheckMate = AStarGreedy;
                                if (ToCheckMate >= 0)
                                    if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                        AA = true;
                            }
                            else
                            {
                                //When there is Gray Checked mate.
                                if (A.KingOnTable[i].KingThinkingQuantum[0].CheckMateAStarGreedy == 1)
                                {
                                    ToCheckMate = AStarGreedy;
                                    if (ForCheckMate >= 0)
                                        if (ToCheckMate < ForCheckMate && ToCheckMate >= 0)
                                            AA = true;
                                }
                            }


                            Order *= -1;
                            for (var ii = 0; A.KingOnTable != null && KingOnTable[i] != null && A.KingOnTable[i].KingThinkingQuantum[0] != null && ii < A.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; ii++)
                                AA = AA || IsToCheckMateHASLessDeeperThanForCheckMate(A.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[ii], Order, ref ToCheckMate, ref ForCheckMate, AStarGreedy++);
                            Order = CDummy;
                        }

                }
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("IsToCheckMateHASLessDeeperThanForCheckMate:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                ChessRules.CurrentOrder = CDummy;
                return AA;
            }
        }
        //When Penalty Regard Branches expanded to sub branches.
        void IsPenaltyRegardCheckMateAtBranch(int Order, ref int Do, AllDraw Base)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a = new Object();
            lock (a)
            {
                int CDummy = ChessRules.CurrentOrder;
                int COrder = Order;
                //For Gray Order.
                if (Order == 1)
                {
                    ChessRules AA = null;

                    //ChessRules.CurrentOrder = 1;
                    //For  Soldeirs.
                    for (var i = 0; i < SodierMidle; i++)
                        for (var j = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && j < SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {


                            //Create Rules Objects For Soldiers.
                            AA = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j][SolderesOnTable[i].SoldierThinkingQuantum[0].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[0].RowColumnSoldier[j][1]]
                                , SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j]
                                , Order
                                , SolderesOnTable[i].SoldierThinkingQuantum[0].RowColumnSoldier[j][0]
                                , SolderesOnTable[i].SoldierThinkingQuantum[0].RowColumnSoldier[j][1]);
                            //When CheckMate Occured for Current Sodiers
                            if (AA.CheckMate(SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j], Order))
                                //When Self CheckMate
                                if (AllDraw.OrderPlate == 1 && AA.CheckMateGray)
                                {
                                    //Return Ignore
                                    Do = -1;
                                    //Set Superposition.
                                    SolderesOnTable[i].SoldierThinkingQuantum[0].CheckMateAStarGreedy = -1;
                                    //Penalty Subbranchs.
                                    MakePenaltyAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                }
                                else
                                {
                                    //When Enemy CheckMate
                                    if (AllDraw.OrderPlate == -1 && AA.CheckMateBrown)
                                    {
                                        //Set Regard and Set Movements.
                                        Do = 1;
                                        //Regard Subbranchs.
                                        MakeRegardAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                        //Set Superpostion.
                                        SolderesOnTable[i].SoldierThinkingQuantum[0].CheckMateAStarGreedy = 1;
                                    }
                                }

                            if (Do != -1)
                            {
                                Order *= -1;
                                ChessRules.CurrentOrder *= -1;
                                //For Subbranchs.
                                for (var ii = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && ii < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    SolderesOnTable[ii].SoldierThinkingQuantum[0].AStarGreedy[i].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, Base);
                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                            }

                        }
                    //For Elephant.
                    for (var i = 0; i < ElefantMidle; i++)
                        for (var j = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && j < ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {


                            //Create Elephant Rules.
                            AA = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j][ElephantOnTable[i].ElefantThinkingQuantum[0].RowColumnElefant[j][0], ElephantOnTable[i].ElefantThinkingQuantum[0].RowColumnElefant[j][1]]
                            , ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j]
                            , Order
                            , ElephantOnTable[i].ElefantThinkingQuantum[0].RowColumnElefant[j][0]
                            , ElephantOnTable[i].ElefantThinkingQuantum[0].RowColumnElefant[j][1]);
                            //When CheckMate Occured for Current Elephant.
                            if (AA.CheckMate(ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j], Order))
                                //For Self Order CheckMate.
                                if (AllDraw.OrderPlate == 1 && AA.CheckMateGray)
                                {
                                    //Set Penalty Ignore.
                                    Do = -1;
                                    //Set Superposition.
                                    ElephantOnTable[i].ElefantThinkingQuantum[0].CheckMateAStarGreedy = -1;
                                    //Penalty Subbranchs.
                                    MakePenaltyAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                }
                                else
                                {
                                    //For Enemy Order CheckMate.
                                    if (AllDraw.OrderPlate == -1 && AA.CheckMateBrown)
                                    {
                                        //Set Regard Continue.
                                        Do = 1;
                                        //Regard Subolders.
                                        MakeRegardAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                        //Set Superposition.
                                        ElephantOnTable[i].ElefantThinkingQuantum[0].CheckMateAStarGreedy = 1;
                                    }
                                }

                            if (Do != -1)
                            {
                                Order *= -1;
                                ChessRules.CurrentOrder *= -1;
                                //For Subbranchs.
                                for (var ii = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ii < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    ElephantOnTable[ii].ElefantThinkingQuantum[0].AStarGreedy[i].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, Base);
                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                            }
                        }
                    //For Hourse.
                    for (var i = 0; i < HourseMidle; i++)
                        for (var j = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && j < HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {


                            //Set Hourse Rules Objects.
                            AA = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse[j][HoursesOnTable[i].HourseThinkingQuantum[0].RowColumnHourse[j][0], HoursesOnTable[i].HourseThinkingQuantum[0].RowColumnHourse[j][1]]
                            , HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse[j]
                            , Order
                            , HoursesOnTable[i].HourseThinkingQuantum[0].RowColumnHourse[j][0]
                            , HoursesOnTable[i].HourseThinkingQuantum[0].RowColumnHourse[j][1]);
                            //When CheckMate Occured.
                            if (AA.CheckMate(HoursesOnTable[i].HourseThinkingQuantum[0].TableListSolder[j], Order))
                                //For Self CheckMate.
                                if (AllDraw.OrderPlate == 1 && AA.CheckMateGray)
                                {
                                    //Set Ignore.
                                    Do = -1;
                                    //Set Superposition.
                                    HoursesOnTable[i].HourseThinkingQuantum[0].CheckMateAStarGreedy = -1;
                                    //Penalty Subbranchs.
                                    MakePenaltyAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                }
                                else
                                {
                                    //For Enemy CheckMate.
                                    if (AllDraw.OrderPlate == -1 && AA.CheckMateBrown)
                                    {
                                        //Set Regard.
                                        Do = 1;
                                        //Superposition.
                                        HoursesOnTable[i].HourseThinkingQuantum[0].CheckMateAStarGreedy = 1;
                                        //Set Regard For Sub Branches.
                                        MakeRegardAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                    }
                                }

                            if (Do != -1)
                            {
                                Order *= -1;
                                ChessRules.CurrentOrder *= -1;
                                //Sub branchs For Hourse.
                                for (var ii = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && ii < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[ii].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, Base);
                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                            }
                        }
                    //For Gray Briges.
                    for (var i = 0; i < CastleMidle; i++)
                        for (var j = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && j < CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {


                            //Castles Gray Rules.
                            AA = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j][CastlesOnTable[i].CastleThinkingQuantum[0].RowColumnCastle[j][0], CastlesOnTable[i].CastleThinkingQuantum[0].RowColumnCastle[j][1]]
                            , CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j]
                            , Order
                            , CastlesOnTable[i].CastleThinkingQuantum[0].RowColumnCastle[j][0]
                            , CastlesOnTable[i].CastleThinkingQuantum[0].RowColumnCastle[j][1]);
                            //When Current Gray Castles CheckMate.
                            if (AA.CheckMate(CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j], Order))
                                //For Self CheckMate
                                if (AllDraw.OrderPlate == 1 && AA.CheckMateGray)
                                {
                                    //Set Penalty Ignore.
                                    Do = -1;
                                    //Set Superposition.
                                    CastlesOnTable[i].CastleThinkingQuantum[0].CheckMateAStarGreedy = -1;
                                    //Penalty Sub branchs.
                                    MakePenaltyAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                }
                                else
                                {
                                    //For Enemy CheckMate.
                                    if (AllDraw.OrderPlate == -1 && AA.CheckMateBrown)
                                    {
                                        //Set Regard.
                                        Do = 1;
                                        //Superpoistion.
                                        CastlesOnTable[i].CastleThinkingQuantum[0].CheckMateAStarGreedy = 1;
                                        //Set Regard Subbranchs.
                                        MakeRegardAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                    }
                                }

                            if (Do != -1)
                            {
                                Order *= -1;
                                ChessRules.CurrentOrder *= -1;
                                //For Castles Gray Subbranchs.

                                for (var ii = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && ii < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[ii].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, Base);

                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                            }
                        }
                    //For Ministers Gray.
                    for (var i = 0; i < MinisterMidle; i++)
                        for (var j = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && j < MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {


                            //Minister Gray Rules.
                            AA = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j][MinisterOnTable[i].MinisterThinkingQuantum[0].RowColumnMinister[j][0], MinisterOnTable[i].MinisterThinkingQuantum[0].RowColumnMinister[j][1]]
                            , MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j]
                            , Order
                            , MinisterOnTable[i].MinisterThinkingQuantum[0].RowColumnMinister[j][0]
                            , MinisterOnTable[i].MinisterThinkingQuantum[0].RowColumnMinister[j][1]);
                            //When M ate Occured in Minister Gray.
                            if (AA.CheckMate(MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j], Order))
                                //Self CheckMate.
                                if (AllDraw.OrderPlate == 1 && AA.CheckMateGray)
                                {
                                    //Penalty Ignore.
                                    Do = -1;
                                    //Superpostion.
                                    MinisterOnTable[i].MinisterThinkingQuantum[0].CheckMateAStarGreedy = -1;
                                    //Penalty Subbranchs.
                                    MakePenaltyAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                }
                                else
                                {
                                    //For Enemy CheckMate.
                                    if (AllDraw.OrderPlate == -1 && AA.CheckMateBrown)
                                    {
                                        //Regard Setting.
                                        Do = 1;
                                        //Superpoistion.
                                        MinisterOnTable[i].MinisterThinkingQuantum[0].CheckMateAStarGreedy = 1;
                                        //Set Subbranchs Regard.
                                        MakeRegardAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                    }
                                }

                            if (Do != -1)
                            {
                                Order *= -1;
                                ChessRules.CurrentOrder *= -1;
                                //For Gray Ministers Subbranchs.

                                for (var ii = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && ii < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[ii].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, Base);

                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                            }
                        }
                    //For Gray King.
                    for (var i = 0; i < KingMidle; i++)
                        for (var j = 0; KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum[0] != null && j < KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {


                            //Gray King Rules.
                            AA = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, KingOnTable[i].KingThinkingQuantum[0].TableListKing[j][KingOnTable[i].KingThinkingQuantum[0].RowColumnKing[j][0], KingOnTable[i].KingThinkingQuantum[0].RowColumnKing[j][1]]
                            , KingOnTable[i].KingThinkingQuantum[0].TableListKing[j]
                            , Order
                            , KingOnTable[i].KingThinkingQuantum[0].RowColumnKing[j][0]
                            , KingOnTable[i].KingThinkingQuantum[0].RowColumnKing[j][1]);
                            //When CheckMate Occured in King Gray.
                            if (AA.CheckMate(KingOnTable[i].KingThinkingQuantum[0].TableListKing[j], Order))
                                //Self CheckMate.
                                if (AllDraw.OrderPlate == 1 && AA.CheckMateGray)
                                {
                                    //Penalty Ignore.
                                    Do = -1;
                                    //Superposition.
                                    KingOnTable[i].KingThinkingQuantum[0].CheckMateAStarGreedy = -1;
                                    //Penalty Subbranchs.
                                    MakePenaltyAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                }
                                else
                                {
                                    //Self CheckMate.
                                    if (AllDraw.OrderPlate == -1 && AA.CheckMateBrown)
                                    {
                                        //Regard Setting.
                                        Do = 1;
                                        //Superpoistion.
                                        KingOnTable[i].KingThinkingQuantum[0].CheckMateAStarGreedy = 1;
                                        //Regard Subbranchs.
                                        MakeRegardAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                    }
                                }

                            if (Do != -1)
                            {
                                Order *= -1;
                                ChessRules.CurrentOrder *= -1;
                                //For King Gray Subbranchs.

                                for (var ii = 0; KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum[0] != null && ii < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[ii].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, Base);

                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                            }
                        }
                }
                //For Brown Order.
                else
                {
                    ChessRules AA = null;
                    //ChessRules.CurrentOrder = -1;
                    //For Solders Brown.
                    for (var i = SodierMidle; i < SodierHigh; i++)
                        for (var j = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && j < SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {


                            //Solders Brown Rules.
                            AA = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j][SolderesOnTable[i].SoldierThinkingQuantum[0].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[0].RowColumnSoldier[j][1]]
                            , SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j]
                            , Order
                            , SolderesOnTable[i].SoldierThinkingQuantum[0].RowColumnSoldier[j][0]
                            , SolderesOnTable[i].SoldierThinkingQuantum[0].RowColumnSoldier[j][1]);
                            //When Solders Brown CheckMate Occured.
                            if (AA.CheckMate(SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j], Order))
                                //Self CheckMate.
                                if (AllDraw.OrderPlate == -1 && AA.CheckMateBrown)
                                {
                                    //Ignore Penalty.
                                    Do = -1;
                                    //Supperpoistion.
                                    SolderesOnTable[i].SoldierThinkingQuantum[0].CheckMateAStarGreedy = -1;
                                    //Penalty Subbranchs Soders Brown.
                                    MakePenaltyAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                }
                                else
                                {
                                    //Self CheckMate.
                                    if (AllDraw.OrderPlate == 1 && AA.CheckMateGray)
                                    {
                                        //Set Regard.
                                        Do = 1;
                                        //Superpoition.
                                        SolderesOnTable[i].SoldierThinkingQuantum[0].CheckMateAStarGreedy = 1;
                                        //Penalty Subbranchs.
                                        MakeRegardAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                    }
                                }

                            if (Do != -1)
                            {
                                Order *= -1;
                                ChessRules.CurrentOrder *= -1;
                                //Solders Brown Subbranchs Calling.

                                for (var ii = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && ii < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[ii].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, Base);

                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                            }
                        }
                    //Elephant Brown 
                    for (var i = ElefantMidle; i < ElefantHigh; i++)
                        for (var j = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && j < ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {


                            //Elephant Brown Rules.
                            AA = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j][ElephantOnTable[i].ElefantThinkingQuantum[0].RowColumnElefant[j][0], ElephantOnTable[i].ElefantThinkingQuantum[0].RowColumnElefant[j][1]]
                            , ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j]
                            , Order
                            , ElephantOnTable[i].ElefantThinkingQuantum[0].RowColumnElefant[j][0]
                            , ElephantOnTable[i].ElefantThinkingQuantum[0].RowColumnElefant[j][1]);
                            //CheckMate Occured in Elephenat Brown.
                            if (AA.CheckMate(ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j], Order))
                                //Self CheckMate.
                                if (AllDraw.OrderPlate == -1 && AA.CheckMateBrown)
                                {
                                    //Ignore Penalty.
                                    Do = -1;
                                    //Superpoistion.
                                    ElephantOnTable[i].ElefantThinkingQuantum[0].CheckMateAStarGreedy = -1;
                                    //Penalty Subbranchs.
                                    MakePenaltyAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                }
                                else
                                {
                                    //CheckMate Enemy.
                                    if (AllDraw.OrderPlate == 1 && AA.CheckMateGray)
                                    {
                                        //Set Regrading.
                                        Do = 1;
                                        //Superposition.
                                        ElephantOnTable[i].ElefantThinkingQuantum[0].CheckMateAStarGreedy = 1;
                                        //Regrad Subbranchs.
                                        MakeRegardAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                    }
                                }

                            if (Do != -1)
                            {
                                Order *= -1;
                                ChessRules.CurrentOrder *= -1;
                                //Subbranchs Elephenat Brown Calling.

                                for (var ii = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ii < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[ii].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, Base);

                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                            }
                        }
                    //Hourse Brown 
                    for (var i = HourseMidle; i < HourseHight; i++)
                        for (var j = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && j < HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {


                            //Hourse Brown Rules.
                            AA = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse[j][HoursesOnTable[i].HourseThinkingQuantum[0].RowColumnHourse[j][0], HoursesOnTable[i].HourseThinkingQuantum[0].RowColumnHourse[j][1]]
                            , HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse[j]
                            , Order
                            , HoursesOnTable[i].HourseThinkingQuantum[0].RowColumnHourse[j][0]
                            , HoursesOnTable[i].HourseThinkingQuantum[0].RowColumnHourse[j][1]);
                            //When Hourse Broin CheckMate Ocuucred.
                            if (AA.CheckMate(HoursesOnTable[i].HourseThinkingQuantum[0].TableListSolder[j], Order))
                                //Self CheckMate.
                                if (AllDraw.OrderPlate == -1 && AA.CheckMateBrown)
                                {
                                    //Ignore Penalty.
                                    Do = -1;
                                    //Superposition.
                                    HoursesOnTable[i].HourseThinkingQuantum[0].CheckMateAStarGreedy = -1;
                                    //Penalty Subbranchs.
                                    MakePenaltyAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                }
                                else
                                {
                                    //CheckMate Enemy.
                                    if (AllDraw.OrderPlate == 1 && AA.CheckMateGray)
                                    {
                                        //Set Regrad.
                                        Do = 1;
                                        //Superposition.
                                        HoursesOnTable[i].HourseThinkingQuantum[0].CheckMateAStarGreedy = 1;
                                        //Regrad Subbranchs.
                                        MakeRegardAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                    }
                                }

                            if (Do != -1)
                            {
                                Order *= -1;
                                ChessRules.CurrentOrder *= -1;
                                //Hourse Brown Calling Subbranchs.

                                for (var ii = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && ii < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[ii].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, Base);

                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                            }
                        }
                    //Castles Brown 
                    for (var i = CastleMidle; i < CastleHigh; i++)
                        for (var j = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && j < CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {


                            //Castles Brown Rules.
                            AA = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j][CastlesOnTable[i].CastleThinkingQuantum[0].RowColumnCastle[j][0], CastlesOnTable[i].CastleThinkingQuantum[0].RowColumnCastle[j][1]]
                            , CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j]
                            , Order
                            , CastlesOnTable[i].CastleThinkingQuantum[0].RowColumnCastle[j][0]
                            , CastlesOnTable[i].CastleThinkingQuantum[0].RowColumnCastle[j][1]);
                            //When Brown Castles CheckMate Occured.
                            if (AA.CheckMate(CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j], Order))
                                //Self CheckMate.
                                if (AllDraw.OrderPlate == -1 && AA.CheckMateBrown)
                                {
                                    //Ignore CheckMate.
                                    Do = -1;
                                    //Superpoistion.
                                    CastlesOnTable[i].CastleThinkingQuantum[0].CheckMateAStarGreedy = -1;
                                    //Subbranchs Penalty.
                                    MakePenaltyAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                }
                                else
                                {
                                    //CheckMate Enemy.
                                    if (AllDraw.OrderPlate == 1 && AA.CheckMateGray)
                                    {
                                        //Set Regard.
                                        Do = 1;
                                        //Superpoistion.
                                        CastlesOnTable[i].CastleThinkingQuantum[0].CheckMateAStarGreedy = 1;
                                        //Regard Subbranchs.
                                        MakeRegardAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                    }
                                }

                            if (Do != -1)
                            {
                                Order *= -1;
                                ChessRules.CurrentOrder *= -1;
                                //Brown Castles Calling Subbranches.

                                for (var ii = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && ii < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[ii].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, Base);

                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                            }
                        }
                    //Minister Brown 
                    for (var i = MinisterMidle; i < MinisterHigh; i++)
                        for (var j = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && j < MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {


                            //Minister Brown Rules.
                            AA = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j][MinisterOnTable[i].MinisterThinkingQuantum[0].RowColumnMinister[j][0], MinisterOnTable[i].MinisterThinkingQuantum[0].RowColumnMinister[j][1]]
                            , MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j]
                            , Order
                            , MinisterOnTable[i].MinisterThinkingQuantum[0].RowColumnMinister[j][0]
                            , MinisterOnTable[i].MinisterThinkingQuantum[0].RowColumnMinister[j][1]);
                            //When Minister Borwn CheckMate Occcured.
                            if (AA.CheckMate(MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j], Order))
                                //Self CheckMate.
                                if (AllDraw.OrderPlate == -1 && AA.CheckMateBrown)
                                {
                                    //Set Ignore.
                                    Do = -1;
                                    //Superpoistion.
                                    MinisterOnTable[i].MinisterThinkingQuantum[0].CheckMateAStarGreedy = -1;
                                    //Penalty Subbranches.
                                    MakePenaltyAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                }
                                else
                                {
                                    //CheckMate Enemy.
                                    if (AllDraw.OrderPlate == 1 && AA.CheckMateGray)
                                    {
                                        //Set Regard.
                                        Do = 1;
                                        //Superposition.
                                        MinisterOnTable[i].MinisterThinkingQuantum[0].CheckMateAStarGreedy = 1;
                                        //Regard SubBranches.
                                        MakeRegardAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                    }
                                }


                            if (Do != -1)
                            {
                                Order *= -1;
                                ChessRules.CurrentOrder *= -1;
                                //Minister Brown SubBranches Calling.

                                for (var ii = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && ii < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[ii].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, Base);

                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                            }
                        }
                    //King Brown
                    for (var i = KingMidle; i < KingHigh; i++)
                        for (var j = 0; KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum[0] != null && j < KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {


                            //King Brown Rules.
                            AA = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, KingOnTable[i].KingThinkingQuantum[0].TableListKing[j][KingOnTable[i].KingThinkingQuantum[0].RowColumnKing[j][0], KingOnTable[i].KingThinkingQuantum[0].RowColumnKing[j][1]]
                            , KingOnTable[i].KingThinkingQuantum[0].TableListKing[j]
                            , Order
                            , KingOnTable[i].KingThinkingQuantum[0].RowColumnKing[j][0]
                            , KingOnTable[i].KingThinkingQuantum[0].RowColumnKing[j][1]);
                            //When King Brown Rules CheckMate Occcured.
                            if (AA.CheckMate(KingOnTable[i].KingThinkingQuantum[0].TableListKing[j], Order))
                                //Self CheckMate.
                                if (AllDraw.OrderPlate == -1 && AA.CheckMateBrown)
                                {
                                    //Set Ignore.
                                    Do = -1;
                                    //Superposition.
                                    KingOnTable[i].KingThinkingQuantum[0].CheckMateAStarGreedy = -1;
                                    //Penalty SubBranches.
                                    MakePenaltyAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                }
                                else
                                {
                                    //CheckMate Enemy.
                                    if (AllDraw.OrderPlate == 1 && AA.CheckMateGray)
                                    {
                                        //Set Regard.
                                        Do = 1;
                                        //Superposition.
                                        KingOnTable[i].KingThinkingQuantum[0].CheckMateAStarGreedy = 1;
                                        //Regard Subbranches.
                                        MakeRegardAllCheckMateBranches(Base, AllDraw.OrderPlate);
                                    }
                                }


                            if (Do != -1)
                            {
                                Order *= -1;
                                ChessRules.CurrentOrder *= -1;
                                //King Brown Subbranches Calling.

                                for (var ii = 0; KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum[0] != null && ii < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[ii].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, Base);

                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                            }
                        }

                }
                ChessRules.CurrentOrder = CDummy;
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("IsPenaltyRegardCheckMateAtBranch:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //A Mechanisam for penalty all subbranches of chiled of root at contained of same childes  of making penalty by target 
        public void MakePenaltyAllCheckMateBranches(AllDraw A, int Order)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a = new Object();
            lock (a)
            {
                int COrder = Order;
                int CDummy = ChessRules.CurrentOrder;
                if (Order == 1)
                {
                    //For Solider Gray
                    for (var i = 0; i < SodierMidle; i++)
                        for (var j = 0; A.SolderesOnTable != null && SolderesOnTable[i] != null && A.SolderesOnTable[i].SoldierThinkingQuantum[0] != null && j < A.SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {
                            //make penalty
                            A.SolderesOnTable[i].SoldierThinkingQuantum[0].PenaltyRegardListSolder[i].LearningAlgorithmPenalty();
                            //For deeper chiled.
                            Order *= -1; ChessRules.CurrentOrder *= -1;
                            for (var ii = 0; A.SolderesOnTable != null && SolderesOnTable[i] != null && A.SolderesOnTable[i].SoldierThinkingQuantum[0] != null && ii < A.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakePenaltyAllCheckMateBranches(A.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[ii], Order);
                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //For Elephant Gray 
                    for (var i = 0; i < ElefantMidle; i++)
                        for (var j = 0; A.ElephantOnTable != null && ElephantOnTable[i] != null && A.ElephantOnTable[i].ElefantThinkingQuantum[0] != null && j < A.ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {

                            //make penalty
                            A.ElephantOnTable[i].ElefantThinkingQuantum[0].PenaltyRegardListElefant[j].LearningAlgorithmPenalty();

                            //For Depper chiled
                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            for (var ii = 0; A.ElephantOnTable != null && ElephantOnTable[i] != null && A.ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ii < A.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakePenaltyAllCheckMateBranches(A.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //For Hourse Gray
                    for (var i = 0; i < HourseMidle; i++)
                        for (var j = 0; A.HoursesOnTable != null && HoursesOnTable[i] != null && A.HoursesOnTable[i].HourseThinkingQuantum[0] != null && j < A.HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {
                            //make penalty
                            A.HoursesOnTable[i].HourseThinkingQuantum[0].PenaltyRegardListHourse[j].LearningAlgorithmPenalty();


                            //for deeper chiled
                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            for (var ii = 0; A.HoursesOnTable != null && HoursesOnTable[i] != null && A.HoursesOnTable[i].HourseThinkingQuantum[0] != null && ii < A.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakePenaltyAllCheckMateBranches(A.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //for Castle gray
                    for (var i = 0; i < CastleMidle; i++)
                        for (var j = 0; A.CastlesOnTable != null && CastlesOnTable[i] != null && A.CastlesOnTable[i].CastleThinkingQuantum[0] != null && j < A.CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {
                            //make penalty
                            A.CastlesOnTable[i].CastleThinkingQuantum[0].PenaltyRegardListCastle[j].LearningAlgorithmPenalty();

                            //for deeper chiled
                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            for (var ii = 0; A.CastlesOnTable != null && CastlesOnTable[i] != null && A.CastlesOnTable[i].CastleThinkingQuantum[0] != null && ii < A.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakePenaltyAllCheckMateBranches(A.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //for minister gray
                    for (var i = 0; i < MinisterMidle; i++)
                        for (var j = 0; A.MinisterOnTable != null && MinisterOnTable[i] != null && A.MinisterOnTable[i].MinisterThinkingQuantum[0] != null && j < A.MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {
                            //make penalty
                            A.MinisterOnTable[i].MinisterThinkingQuantum[0].PenaltyRegardListMinister[j].LearningAlgorithmPenalty();

                            //for deeper chiled
                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            for (var ii = 0; A.MinisterOnTable != null && MinisterOnTable[i] != null && A.MinisterOnTable[i].MinisterThinkingQuantum[0] != null && ii < A.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakePenaltyAllCheckMateBranches(A.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //for gray king
                    for (var i = 0; i < KingMidle; i++)
                        for (var j = 0; A.KingOnTable != null && KingOnTable[i] != null && A.KingOnTable[i].KingThinkingQuantum[0] != null && j < A.KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {
                            //make penalty  
                            A.KingOnTable[i].KingThinkingQuantum[0].PenaltyRegardListKing[j].LearningAlgorithmPenalty();

                            //for deeper chiled
                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            for (var ii = 0; A.KingOnTable != null && KingOnTable[i] != null && A.KingOnTable[i].KingThinkingQuantum[0] != null && ii < A.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakePenaltyAllCheckMateBranches(A.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                }
                else//brown
                {
                    //for soldier brown
                    for (var i = SodierMidle; i < SodierHigh; i++)
                        for (var j = 0; A.SolderesOnTable != null && SolderesOnTable[i] != null && A.SolderesOnTable[i].SoldierThinkingQuantum[0] != null && j < A.SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {
                            //make penalty
                            A.SolderesOnTable[i].SoldierThinkingQuantum[0].PenaltyRegardListSolder[i].LearningAlgorithmPenalty();
                            //for deeper chiled
                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            for (var ii = 0; A.SolderesOnTable != null && SolderesOnTable[i] != null && A.SolderesOnTable[i].SoldierThinkingQuantum[0] != null && ii < A.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakePenaltyAllCheckMateBranches(A.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //for elephant brown
                    for (var i = ElefantMidle; i < ElefantHigh; i++)
                        for (var j = 0; A.ElephantOnTable != null && ElephantOnTable[i] != null && A.ElephantOnTable[i].ElefantThinkingQuantum[0] != null && j < A.ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {
                            //make penalty
                            A.ElephantOnTable[i].ElefantThinkingQuantum[0].PenaltyRegardListElefant[j].LearningAlgorithmPenalty();

                            //for deeper chiled
                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            for (var ii = 0; A.ElephantOnTable != null && ElephantOnTable[i] != null && A.ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ii < A.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakePenaltyAllCheckMateBranches(A.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //for hourse brown
                    for (var i = HourseMidle; i < HourseHight; i++)
                        for (var j = 0; A.HoursesOnTable != null && HoursesOnTable[i] != null && A.HoursesOnTable[i].HourseThinkingQuantum[0] != null && j < A.HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {
                            //make penalty
                            A.HoursesOnTable[i].HourseThinkingQuantum[0].PenaltyRegardListHourse[j].LearningAlgorithmPenalty();


                            //for deeper chiled
                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            for (var ii = 0; A.HoursesOnTable != null && HoursesOnTable[i] != null && A.HoursesOnTable[i].HourseThinkingQuantum[0] != null && ii < A.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakePenaltyAllCheckMateBranches(A.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //for cASytle brown
                    for (var i = CastleMidle; i < CastleHigh; i++)
                        for (var j = 0; A.CastlesOnTable != null && CastlesOnTable[i] != null && A.CastlesOnTable[i].CastleThinkingQuantum[0] != null && j < A.CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {
                            //make penalty
                            A.CastlesOnTable[i].CastleThinkingQuantum[0].PenaltyRegardListCastle[j].LearningAlgorithmPenalty();

                            //for deeper chiled
                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            for (var ii = 0; A.CastlesOnTable != null && CastlesOnTable[i] != null && A.CastlesOnTable[i].CastleThinkingQuantum[0] != null && ii < A.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakePenaltyAllCheckMateBranches(A.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //for minsiter brown
                    for (var i = MinisterMidle; i < MinisterHigh; i++)
                        for (var j = 0; A.MinisterOnTable != null && MinisterOnTable[i] != null && A.MinisterOnTable[i].MinisterThinkingQuantum[0] != null && j < A.MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {
                            //make penalty
                            A.MinisterOnTable[i].MinisterThinkingQuantum[0].PenaltyRegardListMinister[j].LearningAlgorithmPenalty();

                            //fopfor weeper chiled
                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            for (var ii = 0; A.MinisterOnTable != null && MinisterOnTable[i] != null && A.MinisterOnTable[i].MinisterThinkingQuantum[0] != null && ii < A.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakePenaltyAllCheckMateBranches(A.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //for king brown
                    for (var i = KingMidle; i < MinisterHigh; i++)
                        for (var j = 0; A.KingOnTable != null && KingOnTable[i] != null && A.KingOnTable[i].KingThinkingQuantum[0] != null && j < A.KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {
                            //make penalty
                            A.KingOnTable[i].KingThinkingQuantum[0].PenaltyRegardListKing[j].LearningAlgorithmPenalty();

                            //for deeper chiled
                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            for (var ii = 0; A.KingOnTable != null && KingOnTable[i] != null && A.KingOnTable[i].KingThinkingQuantum[0] != null && ii < A.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakePenaltyAllCheckMateBranches(A.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("MakePenaltyAllCheckMateBranches:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //remove penalty from root current node.
        public AllDraw RemovePenalltyFromFirstBranches(int Order)

        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a = new Object();
            lock (a)
            {
                //gray
                if (Order == 1)
                {
                    //for gray solder
                    for (var i = 0; i < SodierMidle; i++)
                        for (var j = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && j < SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {
                            //iniatite penalty vars to false.
                            UsePenaltyRegardMechnisamT = false;

                            SolderesOnTable[i].SoldierThinkingQuantum[0].PenaltyRegardListSolder[j].Initiate();
                            for (int k = 0; k < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; k++)
                                SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[k].RemovePenalltyFromFirstBranches(Order * -1);

                        }
                    //for gray elephant
                    for (var i = 0; i < ElefantMidle; i++)
                        for (var j = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && j < ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {
                            //iniatite penalty vars to false.
                            UsePenaltyRegardMechnisamT = false;


                            ElephantOnTable[i].ElefantThinkingQuantum[0].PenaltyRegardListElefant[j].Initiate();
                            for (int k = 0; k < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; k++)
                                ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[k].RemovePenalltyFromFirstBranches(Order * -1);


                        }
                    //for gray hourse
                    for (var i = 0; i < HourseMidle; i++)
                        for (var j = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && j < HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {
                            //iniatite penalty vars to false.
                            UsePenaltyRegardMechnisamT = false;

                            HoursesOnTable[i].HourseThinkingQuantum[0].PenaltyRegardListHourse[j].Initiate();
                            for (int k = 0; k < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; k++)
                                HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[k].RemovePenalltyFromFirstBranches(Order * -1);



                        }
                    //for Castle gray
                    for (var i = 0; i < CastleMidle; i++)
                        for (var j = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && j < CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {
                            //iniatite penalty vars to false.
                            UsePenaltyRegardMechnisamT = false;


                            CastlesOnTable[i].CastleThinkingQuantum[0].PenaltyRegardListCastle[j].Initiate();
                            for (int k = 0; k < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; k++)
                                CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[k].RemovePenalltyFromFirstBranches(Order * -1);


                        }
                    //for gray minsiter
                    for (var i = 0; i < MinisterMidle; i++)
                        for (var j = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && j < MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {
                            //iniatite penalty vars to false.
                            UsePenaltyRegardMechnisamT = false;


                            MinisterOnTable[i].MinisterThinkingQuantum[0].PenaltyRegardListMinister[j].Initiate();
                            for (int k = 0; k < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; k++)
                                MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[k].RemovePenalltyFromFirstBranches(Order * -1);


                        }
                    //for gray minster
                    for (var i = 0; i < KingMidle; i++)
                        for (var j = 0; KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum[0] != null && j < KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {
                            //iniatite penalty vars to false.
                            UsePenaltyRegardMechnisamT = false;


                            KingOnTable[i].KingThinkingQuantum[0].PenaltyRegardListKing[j].Initiate();
                            for (int k = 0; k < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; k++)
                                KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[k].RemovePenalltyFromFirstBranches(Order * -1);


                        }
                }
                else
                {
                    //for brown soldeir
                    for (var i = SodierMidle; i < SodierHigh; i++)
                        for (var j = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && j < SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {
                            //iniatite penalty vars to false.
                            UsePenaltyRegardMechnisamT = false;


                            SolderesOnTable[i].SoldierThinkingQuantum[0].PenaltyRegardListSolder[j].Initiate();
                            for (int k = 0; k < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; k++)
                                SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[k].RemovePenalltyFromFirstBranches(Order * -1);

                        }
                    //for brown elephant
                    for (var i = ElefantMidle; i < ElefantHigh; i++)
                        for (var j = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && j < ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {
                            //iniatite penalty vars to false.
                            UsePenaltyRegardMechnisamT = false;


                            ElephantOnTable[i].ElefantThinkingQuantum[0].PenaltyRegardListElefant[j].Initiate();
                            for (int k = 0; k < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; k++)
                                ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[k].RemovePenalltyFromFirstBranches(Order * -1);


                        }
                    //for brown hourse
                    for (var i = HourseMidle; i < HourseHight; i++)
                        for (var j = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && j < HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {
                            //iniatite penalty vars to false.
                            UsePenaltyRegardMechnisamT = false;


                            HoursesOnTable[i].HourseThinkingQuantum[0].PenaltyRegardListHourse[j].Initiate();
                            for (int k = 0; k < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; k++)
                                HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[k].RemovePenalltyFromFirstBranches(Order * -1);



                        }
                    //for brown Castle
                    for (var i = CastleMidle; i < CastleHigh; i++)
                        for (var j = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && j < CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {
                            //iniatite penalty vars to false.
                            UsePenaltyRegardMechnisamT = false;


                            CastlesOnTable[i].CastleThinkingQuantum[0].PenaltyRegardListCastle[j].Initiate();
                            for (int k = 0; k < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; k++)
                                CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[k].RemovePenalltyFromFirstBranches(Order * -1);


                        }
                    //for brown ,minster
                    for (var i = MinisterMidle; i < MinisterHigh; i++)
                        for (var j = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && j < MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {
                            //iniatite penalty vars to false.
                            UsePenaltyRegardMechnisamT = false;


                            MinisterOnTable[i].MinisterThinkingQuantum[0].PenaltyRegardListMinister[j].Initiate();
                            for (int k = 0; k < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; k++)
                                MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[k].RemovePenalltyFromFirstBranches(Order * -1);


                        }
                    //for brown king
                    for (var i = KingMidle; i < KingHigh; i++)
                        for (var j = 0; KingOnTable != null && KingOnTable[i] != null
                            && KingOnTable[i].KingThinkingQuantum[0] != null && j < KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {
                            //iniatite penalty vars to false.
                            UsePenaltyRegardMechnisamT = false;

                            KingOnTable[i].KingThinkingQuantum[0].PenaltyRegardListKing[j].Initiate();
                            for (int k = 0; k < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; k++)
                                KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[k].RemovePenalltyFromFirstBranches(Order * -1);


                        }
                }
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("RemovePenalltyFromFirstBranches:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return this;
            }

        }
        //when index is out of boundry return false when is valid return true
        bool BondryObjectNumber(int i, int Kind, int Order)
        {
            bool Is = true;
            if (Order == 1)
            {
                if (Kind == 1)
                {
                    if (i >= SodierMidle)
                        Is = false;
                }
                else
                    if (Kind == 2)
                {
                    if (i >= ElefantMidle)
                        Is = false;
                }
                else
                    if (Kind == 3)
                {
                    if (i >= HourseMidle)
                        Is = false;
                }
                else
                    if (Kind == 4)
                {
                    if (i >= CastleMidle)
                        Is = false;
                }
                else
                    if (Kind == 5)
                {
                    if (i >= MinisterMidle)
                        Is = false;
                }
                else
                    if (Kind == 6)
                {
                    if (i >= KingMidle)
                        Is = false;
                }
            }
            else
            {
                if (Kind == 1)
                {
                    if (i < SodierMidle || i >= SodierHigh)
                        Is = false;
                }
                else
                   if (Kind == 2)
                {
                    if (i < ElefantMidle || i >= ElefantHigh)
                        Is = false;
                }
                else
                   if (Kind == 3)
                {
                    if (i < HourseMidle || i >= HourseHight)
                        Is = false;
                }
                else
                   if (Kind == 4)
                {
                    if (i < CastleMidle || i >= CastleHigh)
                        Is = false;
                }
                else
                   if (Kind == 5)
                {
                    if (i < MinisterMidle || i >= MinisterHigh)
                        Is = false;
                }
                else
                   if (Kind == 6)
                {
                    if (i < KingMidle || i >= KingHigh)
                        Is = false;
                }
            }
            return Is;
        }
        //All valid call of current alldraw deeper of founding get node.
        public AllDraw FoundOfCurrentTableNodeAstardGreedy(int i, int j, int[,] Tab, int Order, ref AllDraw THIS, ref bool Found)
        {
            //soldier
            if (BondryObjectNumber(i, 1, Order) && SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder != null && j < SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null)
            {
                //for (var ii = 0; ii < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; ii++)
                {
                    if (SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count > j && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null)
                        SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].FoundOfCurrentTableNode(Tab, Order * -1, ref THIS, ref Found);
                }
            }
            //elephant
            if (BondryObjectNumber(i, 2, Order) && ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant != null && j < ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null)
            {
                //for (var ii = 0; ii < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; ii++)
                {
                    if (ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count > j && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null)
                        ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].FoundOfCurrentTableNode(Tab, Order * -1, ref THIS, ref Found);
                }
            }
            //hourse
            if (BondryObjectNumber(i, 3, Order) && HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse != null && j < HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null)
            {
                //for (var ii = 0; ii < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; ii++)
                {
                    if (HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count > j && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null)
                        HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].FoundOfCurrentTableNode(Tab, Order * -1, ref THIS, ref Found);
                }
            }
            //Castle
            if (BondryObjectNumber(i, 4, Order) && CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle != null && j < CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy != null)
            {
                //for (var ii = 0; ii < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; ii++)
                {
                    if (CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count > j && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy != null)
                        CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].FoundOfCurrentTableNode(Tab, Order * -1, ref THIS, ref Found);
                }
            }
            //minster
            if (BondryObjectNumber(i, 5, Order) && MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && j < MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null)
            {
                //for (var ii = 0; ii < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; ii++)
                {
                    if (MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count > j && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null)
                        MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].FoundOfCurrentTableNode(Tab, Order * -1, ref THIS, ref Found);
                }
            }
            //king
            if (BondryObjectNumber(i, 6, Order) && KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing != null && j < KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count > j && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null)

                if (KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count > j && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null)
                {

                    //for (var ii = 0; ii < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; ii++)
                    {
                        KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].FoundOfCurrentTableNode(Tab, Order * -1, ref THIS, ref Found);
                    }
                }
            return THIS;
        }

        //when current alldraw is equal of table state return node and set true
        public AllDraw FoundOfCurrentTableNode(int[,] Tab, int Order, ref AllDraw THIS, ref bool Found)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a = new Object();
            lock (a)
            {
                //when current stisgied
                if ((TableList.Count > 0 && ThinkingQuantumChess.TableEqual(TableList[0], Tab)) || FoundOfCurrentTableNodeFirstLevel(Tab, Order, ref THIS, ref Found))
                {
                    if (!Found)
                    {
                        THIS = this;
                        Found = true;
                    }
                    //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundOfCurrentTableNode:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                    return THIS;
                }

                else//else gray
                if (Order == 1)
                {
                    //soldier
                    for (var i = 0; i < SodierMidle; i++)
                    {
                        for (var j = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder != null && j < SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {
                            if (IsSupHuTrue(i, j, 0, 1))
                                continue;

                            if (ThinkingQuantumChess.TableEqual(SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j], Tab))
                            {
                                FoundOfCurrentTableNodeSolderIJ(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }
                            else
                            {
                                for (int k = 0; SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null && k < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; k++)
                                    SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[k].FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;


                            }
                        }
                    }
                    //elephant
                    for (var i = 0; i < ElefantMidle; i++)
                    {
                        for (var j = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant != null && j < ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {

                            if (IsSupHuTrue(i, j, 0, 2))
                                continue;

                            if (ThinkingQuantumChess.TableEqual(ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j], Tab))
                            {
                                FoundOfCurrentTableNodeElephantIJ(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;

                            }
                            else
                            {


                                for (int k = 0; ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null && k < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; k++)
                                    ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[k].FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }
                        }
                    }
                    //hourse
                    for (var i = 0; i < HourseMidle; i++)
                    {
                        for (var j = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse != null && j < HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {

                            if (IsSupHuTrue(i, j, 0, 3))
                                continue;

                            if (ThinkingQuantumChess.TableEqual(HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse[j], Tab))
                            {
                                FoundOfCurrentTableNodeHourseIJ(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;

                            }
                            else
                            {

                                for (int k = 0; HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null && k < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; k++)
                                    HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[k].FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);

                                if (Found)
                                    return THIS;
                            }

                        }
                    }
                    //Castle
                    for (var i = 0; i < CastleMidle; i++)
                    {
                        for (var j = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle != null && j < CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {
                            if (IsSupHuTrue(i, j, 0, 4))
                                continue;


                            if (ThinkingQuantumChess.TableEqual(CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j], Tab))
                            {
                                FoundOfCurrentTableNodeCastleIJ(i, j, Tab, Order, ref THIS, ref Found);

                                if (Found)
                                    return THIS;
                            }
                            else
                            {

                                for (int k = 0; CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy != null && k < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; k++)
                                    CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[k].FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }
                        }
                    }
                    //minster
                    for (var i = 0; i < MinisterMidle; i++)
                    {
                        for (var j = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister != null && j < MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {
                            if (IsSupHuTrue(i, j, 0, 5))
                                continue;
                            if (ThinkingQuantumChess.TableEqual(MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j], Tab))
                            {
                                FoundOfCurrentTableNodeMinisterIJ(i, j, Tab, Order, ref THIS, ref Found);

                                if (Found)
                                    return THIS;
                            }
                            else
                            {

                                for (int k = 0; MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null && k < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; k++)
                                    MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[k].FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }

                        }
                    }
                    //king
                    for (var i = 0; i < KingMidle; i++)
                    {
                        for (var j = 0; KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing != null && j < KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {

                            if (IsSupHuTrue(i, j, 0, 6))
                                continue;

                            if (ThinkingQuantumChess.TableEqual(KingOnTable[i].KingThinkingQuantum[0].TableListKing[j], Tab))
                            {
                                FoundOfCurrentTableNodeKingIJ(i, j, Tab, Order, ref THIS, ref Found);

                                if (Found)
                                    return THIS;
                            }
                            else
                            {

                                for (int k = 0; KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null && k < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; k++)
                                    KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[k].FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }

                        }
                    }
                }//brown
                else
                {
                    //soldier
                    for (var i = SodierMidle; i < SodierHigh; i++)
                    {
                        for (var j = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder != null && j < SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {

                            if (IsSupHuTrue(i, j, 0, 1))
                                continue;

                            if (ThinkingQuantumChess.TableEqual(SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j], Tab))
                            {
                                FoundOfCurrentTableNodeSolderIJ(i, j, Tab, Order, ref THIS, ref Found);

                                if (Found)
                                    return THIS;
                            }
                            else
                            {
                                for (int k = 0; SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null && k < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; k++)
                                    SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[k].FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }
                        }
                    }
                    //elephant
                    for (var i = ElefantMidle; i < ElefantHigh; i++)
                    {
                        for (var j = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant != null && j < ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {
                            if (IsSupHuTrue(i, j, 0, 2))
                                continue;


                            if (ThinkingQuantumChess.TableEqual(ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j], Tab))
                            {
                                FoundOfCurrentTableNodeElephantIJ(i, j, Tab, Order, ref THIS, ref Found);

                                if (Found)
                                    return THIS;
                            }
                            else
                            {
                                for (int k = 0; ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null && k < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; k++)
                                    ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[k].FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }

                        }
                    }
                    //hourse
                    for (var i = HourseMidle; i < HourseHight; i++)
                    {
                        for (var j = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse != null && j < HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {
                            if (IsSupHuTrue(i, j, 0, 3))
                                continue;


                            if (ThinkingQuantumChess.TableEqual(HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse[j], Tab))
                            {
                                FoundOfCurrentTableNodeHourseIJ(i, j, Tab, Order, ref THIS, ref Found);

                                if (Found)
                                    return THIS;
                            }
                            else
                            {
                                for (int k = 0; HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null && k < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; k++)
                                    HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[k].FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }

                        }
                    }
                    //Castle
                    for (var i = CastleMidle; i < CastleHigh; i++)
                    {
                        for (var j = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle != null && j < CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {

                            if (IsSupHuTrue(i, j, 0, 4))
                                continue;

                            if (ThinkingQuantumChess.TableEqual(CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j], Tab))
                            {
                                FoundOfCurrentTableNodeCastleIJ(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;

                            }
                            else
                            {
                                for (int k = 0; CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy != null && k < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; k++)
                                    CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[k].FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }

                        }
                    }
                    //minister 
                    for (var i = MinisterMidle; i < MinisterHigh; i++)
                    {
                        for (var j = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister != null && j < MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {
                            if (IsSupHuTrue(i, j, 0, 5))
                                continue;


                            if (ThinkingQuantumChess.TableEqual(MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j], Tab))
                            {
                                FoundOfCurrentTableNodeMinisterIJ(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;

                            }
                            else
                            {
                                for (int k = 0; MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null && k < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; k++)
                                    MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[k].FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }
                        }
                    }
                    //king
                    for (var i = KingMidle; i < KingHigh; i++)
                    {
                        for (var j = 0; KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing != null && j < KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {
                            if (IsSupHuTrue(i, j, 0, 6))
                                continue;

                            if (ThinkingQuantumChess.TableEqual(KingOnTable[i].KingThinkingQuantum[0].TableListKing[j], Tab))
                            {
                                FoundOfCurrentTableNodeKingIJ(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;

                            }
                            else
                            {
                                for (int k = 0; KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null && k < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; k++)
                                    KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[k].FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }
                        }
                    }
                }
                return THIS;
            }
        }
        public AllDraw FoundOfCurrentTableNodeCreateAStarGreedy(int[,] Tab, int Order, ref AllDraw THIS, ref bool Found)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a = new Object();
            lock (a)
            {


                //else gray
                if (Order == 1)
                {
                    //soldier
                    for (var i = 0; i < SodierMidle; i++)
                    {
                        for (var j = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder != null && j < SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {


                            if (ThinkingQuantumChess.TableEqual(SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j], Tab))
                            {
                                FoundOfCurrentTableNodeSolderIJ(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }
                            else
                            {

                                FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;


                            }
                        }
                    }
                    //elephant
                    for (var i = 0; i < ElefantMidle; i++)
                    {
                        for (var j = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant != null && j < ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {


                            if (ThinkingQuantumChess.TableEqual(ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j], Tab))
                            {
                                FoundOfCurrentTableNodeElephantIJ(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;

                            }
                            else
                            {


                                FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }
                        }
                    }
                    //hourse
                    for (var i = 0; i < HourseMidle; i++)
                    {
                        for (var j = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse != null && j < HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {

                            if (ThinkingQuantumChess.TableEqual(HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse[j], Tab))
                            {
                                FoundOfCurrentTableNodeHourseIJ(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;

                            }
                            else
                            {


                                FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }

                        }
                    }
                    //Castle
                    for (var i = 0; i < CastleMidle; i++)
                    {
                        for (var j = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle != null && j < CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {

                            if (ThinkingQuantumChess.TableEqual(CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j], Tab))
                            {
                                FoundOfCurrentTableNodeCastleIJ(i, j, Tab, Order, ref THIS, ref Found);

                                if (Found)
                                    return THIS;
                            }
                            else
                            {

                                FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }
                        }
                    }
                    //minster
                    for (var i = 0; i < MinisterMidle; i++)
                    {
                        for (var j = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister != null && j < MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {

                            if (ThinkingQuantumChess.TableEqual(MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j], Tab))
                            {
                                FoundOfCurrentTableNodeMinisterIJ(i, j, Tab, Order, ref THIS, ref Found);

                                if (Found)
                                    return THIS;
                            }
                            else
                            {

                                FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }

                        }
                    }
                    //king
                    for (var i = 0; i < KingMidle; i++)
                    {
                        for (var j = 0; KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing != null && j < KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {

                            if (ThinkingQuantumChess.TableEqual(KingOnTable[i].KingThinkingQuantum[0].TableListKing[j], Tab))
                            {
                                FoundOfCurrentTableNodeKingIJ(i, j, Tab, Order, ref THIS, ref Found);

                                if (Found)
                                    return THIS;
                            }
                            else
                            {

                                FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }

                        }
                    }
                }//brown
                else
                {
                    //soldier
                    for (var i = SodierMidle; i < SodierHigh; i++)
                    {
                        for (var j = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder != null && j < SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {


                            if (ThinkingQuantumChess.TableEqual(SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j], Tab))
                            {
                                FoundOfCurrentTableNodeSolderIJ(i, j, Tab, Order, ref THIS, ref Found);

                                if (Found)
                                    return THIS;
                            }
                            else
                            {
                                FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }
                        }
                    }
                    //elephant
                    for (var i = ElefantMidle; i < ElefantHigh; i++)
                    {
                        for (var j = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant != null && j < ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {


                            if (ThinkingQuantumChess.TableEqual(ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j], Tab))
                            {
                                FoundOfCurrentTableNodeElephantIJ(i, j, Tab, Order, ref THIS, ref Found);

                                if (Found)
                                    return THIS;
                            }
                            else
                            {
                                FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }

                        }
                    }
                    //hourse
                    for (var i = HourseMidle; i < HourseHight; i++)
                    {
                        for (var j = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse != null && j < HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {


                            if (ThinkingQuantumChess.TableEqual(HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse[j], Tab))
                            {
                                FoundOfCurrentTableNodeHourseIJ(i, j, Tab, Order, ref THIS, ref Found);

                                if (Found)
                                    return THIS;
                            }
                            else
                            {
                                FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }

                        }
                    }
                    //Castle
                    for (var i = CastleMidle; i < CastleHigh; i++)
                    {
                        for (var j = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle != null && j < CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {


                            if (ThinkingQuantumChess.TableEqual(CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j], Tab))
                            {
                                FoundOfCurrentTableNodeCastleIJ(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;

                            }
                            else
                            {
                                FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }

                        }
                    }
                    //minister 
                    for (var i = MinisterMidle; i < MinisterHigh; i++)
                    {
                        for (var j = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister != null && j < MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {

                            if (ThinkingQuantumChess.TableEqual(MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j], Tab))
                            {
                                FoundOfCurrentTableNodeMinisterIJ(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;

                            }
                            else
                            {
                                FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }
                        }
                    }
                    //king
                    for (var i = KingMidle; i < KingHigh; i++)
                    {
                        for (var j = 0; KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing != null && j < KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {

                            if (ThinkingQuantumChess.TableEqual(KingOnTable[i].KingThinkingQuantum[0].TableListKing[j], Tab))
                            {
                                FoundOfCurrentTableNodeKingIJ(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;

                            }
                            else
                            {
                                FoundOfCurrentTableNodeAstardGreedy(i, j, Tab, Order, ref THIS, ref Found);
                                if (Found)
                                    return THIS;
                            }
                        }
                    }
                }
                return THIS;
            }
        }
        //when current level founf of node
        public bool FoundOfCurrentTableNodeFirstLevel(int[,] Tab, int Order, ref AllDraw THIS, ref bool Found)
        {
            if (!Found)
                FoundOfCurrentTableNodeSoldeir(Tab, Order, ref THIS, ref Found);
            if (!Found)
                FoundOfCurrentTableNodeElephant(Tab, Order, ref THIS, ref Found);
            if (!Found)
                FoundOfCurrentTableNodeHourse(Tab, Order, ref THIS, ref Found);
            if (!Found)
                FoundOfCurrentTableNodeCastle(Tab, Order, ref THIS, ref Found);
            if (!Found)
                FoundOfCurrentTableNodeMinister(Tab, Order, ref THIS, ref Found);
            if (!Found)
                FoundOfCurrentTableNodeKing(Tab, Order, ref THIS, ref Found);

            return Found;
        }
        //when deeper have some calclulated nodes
        bool IsAStargreedyHaveNode(int Kind, int Order)
        {

            bool Is = false;
            if (Order == 1)
            {
                if (Kind == 1)
                {
                    for (int i = 0; SolderesOnTable != null && i < SodierMidle; i++)
                    {
                        if (SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count > 0)
                        {
                            Is = true;
                        }
                    }
                }
                else if (Kind == 2)
                {
                    for (int i = 0; ElephantOnTable != null && i < ElefantMidle; i++)
                    {
                        if (ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count > 0)
                        {
                            Is = true;
                        }
                    }

                }
                else if (Kind == 3)
                {
                    for (int i = 0; HoursesOnTable != null && i < HourseMidle; i++)
                    {
                        if (HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count > 0)
                        {
                            Is = true;
                        }
                    }
                }
                else if (Kind == 4)
                {
                    for (int i = 0; CastlesOnTable != null && i < CastleMidle; i++)
                    {
                        if (CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count > 0)
                        {
                            Is = true;
                        }
                    }
                }
                else if (Kind == 5)
                {
                    for (int i = 0; MinisterOnTable != null && i < MinisterMidle; i++)
                    {
                        if (MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count > 0)
                        {
                            Is = true;
                        }
                    }
                }
                else
                    if (Kind == 6)
                {
                    for (int i = 0; KingOnTable != null && i < KingMidle; i++)
                    {
                        if (KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count > 0)
                        {
                            Is = true;
                        }
                    }
                }

            }
            else
            {
                if (Kind == 1)
                {
                    for (int i = SodierMidle; SolderesOnTable != null && i < SodierHigh; i++)
                    {
                        if (SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count > 0)
                        {
                            Is = true;
                        }
                    }
                }
                else if (Kind == 2)
                {
                    for (int i = ElefantMidle; ElephantOnTable != null && i < ElefantHigh; i++)
                    {
                        if (ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count > 0)
                        {
                            Is = true;
                        }
                    }
                }
                else if (Kind == 3)
                {
                    for (int i = HourseMidle; HoursesOnTable != null && i < HourseHight; i++)
                    {
                        if (HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count > 0)
                        {
                            Is = true;
                        }
                    }
                }
                else
                    if (Kind == 4)
                {
                    for (int i = CastleMidle; CastlesOnTable != null && i < CastleHigh; i++)
                    {
                        if (CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count > 0)
                        {
                            Is = true;
                        }
                    }
                }
                else
                    if (Kind == 5)
                {
                    for (int i = MinisterHigh; MinisterOnTable != null && i < MinisterHigh; i++)
                    {
                        if (MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count > 0)
                        {
                            Is = true;
                        }
                    }
                }
                else if (Kind == 6)
                {
                    for (int i = KingMidle; KingOnTable != null && i < KingHigh; i++)
                    {
                        if (KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count > 0)
                        {
                            Is = true;
                        }
                    }
                }
            }

            return Is;


        }
        public void ClearAllTablesHeuristicsAndMoreGray(int Order)
        {
            Object O = new Object();
            lock (O)
            {      //soldier
                for (int i = 0; SolderesOnTable != null && i < SodierMidle; i++)
                {
                    if (SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count > 0)
                    {
                        for (int j = 0; j < SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {
                            //when is not validity
                            ClearAllTablesHeuristicsAndMoreSoldier(Order, i, j);
                        }
                    }
                }
                //elephant
                for (int i = 0; ElephantOnTable != null && i < ElefantMidle; i++)
                {
                    if (ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count > 0)
                    {
                        for (int j = 0; j < ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {
                            //when is not validity
                            ClearAllTablesHeuristicsAndMoreElephant(Order, i, j);
                        }
                    }
                }
                //hourse
                for (int i = 0; HoursesOnTable != null && i < HourseMidle; i++)
                {
                    if (HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count > 0)
                    {
                        for (int j = 0; j < HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {
                            //when is not validity
                            ClearAllTablesHeuristicsAndMoreHourse(Order, i, j);
                        }
                    }
                }
                //Castle
                for (int i = 0; CastlesOnTable != null && i < CastleMidle; i++)
                {
                    if (CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count > 0)
                    {
                        for (int j = 0; j < CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {
                            //when is not validity
                            ClearAllTablesHeuristicsAndMoreCastle(Order, i, j);
                        }
                    }
                }
                //minster
                for (int i = 0; MinisterOnTable != null && i < MinisterMidle; i++)
                {
                    if (MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count > 0)
                    {
                        for (int j = 0; j < MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {
                            //when is not validity
                            ClearAllTablesHeuristicsAndMoreMinister(Order, i, j);
                        }
                    }
                }
                //king
                for (int i = 0; KingOnTable != null && i < KingMidle; i++)
                {
                    if (KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count > 0)
                    {
                        for (int j = 0; j < KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {
                            //when is not validity
                            ClearAllTablesHeuristicsAndMoreKing(Order, i, j);
                        }
                    }
                }
            }
        }
        public void ClearAllTablesHeuristicsAndMoreBrown(int Order)
        {
            Object O = new Object();
            lock (O)
            {          //soldier
                for (int i = SodierMidle; SolderesOnTable != null && i < SodierHigh; i++)
                {
                    if (SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count > 0)
                    {
                        for (int j = 0; j < SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {
                            //when is not validity
                            ClearAllTablesHeuristicsAndMoreSoldier(Order, i, j);
                        }
                    }
                }
                //elephant
                for (int i = ElefantMidle; ElephantOnTable != null && i < ElefantHigh; i++)
                {
                    if (ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count > 0)
                    {
                        for (int j = 0; j < ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {
                            //when is not validity
                            ClearAllTablesHeuristicsAndMoreElephant(Order, i, j);
                        }
                    }
                }
                //hourse
                for (int i = HourseMidle; HoursesOnTable != null && i < HourseHight; i++)
                {
                    if (HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count > 0)
                    {
                        for (int j = 0; j < HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {
                            //when is not validity
                            ClearAllTablesHeuristicsAndMoreHourse(Order, i, j);
                        }
                    }
                }
                //Castle
                for (int i = CastleMidle; CastlesOnTable != null && i < CastleHigh; i++)
                {
                    if (CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count > 0)
                    {
                        for (int j = 0; j < CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {
                            //when is not validity
                            ClearAllTablesHeuristicsAndMoreCastle(Order, i, j);
                        }
                    }
                }
                //minster
                for (int i = MinisterMidle; MinisterOnTable != null && i < MinisterHigh; i++)
                {
                    if (MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count > 0)
                    {
                        for (int j = 0; j < MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {
                            //when is not validity
                            ClearAllTablesHeuristicsAndMoreMinister(Order, i, j);
                        }
                    }
                }
                //king
                for (int i = KingMidle; KingOnTable != null && i < KingHigh; i++)
                {
                    if (KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count > 0)
                    {
                        for (int j = 0; j < KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {
                            //when is not validity
                            ClearAllTablesHeuristicsAndMoreKing(Order, i, j);
                        }
                    }
                }
            }
        }
        //clear all non nessaraly nodes of current
        public void ClearAllTablesHeuristicsAndMore(int Order)
        {
            Object O = new Object();
            lock (O)
            {
                //gray
                if (Order == 1)
                {
                    ClearAllTablesHeuristicsAndMoreGray(Order);
                }
                else//brown
                {
                    ClearAllTablesHeuristicsAndMoreBrown(Order);


                }
            }
        }
        public void ClearAllTablesHeuristicsAndMoreSoldier(int Order, int i, int j)
        {
            Object O = new Object();
            lock (O)
            {
                if (IsNonValidityAllTablesHeuristicsAndMore(1, Order, i, j))
                {
                    //clear all lists
                    SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Clear();
                    SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder.Clear();
                    SolderesOnTable[i].SoldierThinkingQuantum[0].RowColumnSoldier.Clear();
                    SolderesOnTable[i].SoldierThinkingQuantum[0].PenaltyRegardListSolder.Clear();
                    if (SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count > j)
                        SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j] = new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged);
                    else
                        SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                }
            }
        }
        public void ClearAllTablesHeuristicsAndMoreElephant(int Order, int i, int j)
        {
            Object O = new Object();
            lock (O)
            {
                if (IsNonValidityAllTablesHeuristicsAndMore(2, Order, i, j))
                {
                    //clear all lists
                    ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Clear();
                    ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant.Clear();
                    ElephantOnTable[i].ElefantThinkingQuantum[0].RowColumnElefant.Clear();
                    ElephantOnTable[i].ElefantThinkingQuantum[0].PenaltyRegardListElefant.Clear();
                    if (ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count > j)
                        ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j] = new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged);
                    else
                        ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy = new List<AllDraw>();

                }
            }
        }
        public void ClearAllTablesHeuristicsAndMoreHourse(int Order, int i, int j)
        {
            Object O = new Object();
            lock (O)
            {
                if (IsNonValidityAllTablesHeuristicsAndMore(3, Order, i, j))
                {
                    //clear all lists
                    HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Clear();
                    HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse.Clear();
                    HoursesOnTable[i].HourseThinkingQuantum[0].RowColumnHourse.Clear();
                    HoursesOnTable[i].HourseThinkingQuantum[0].PenaltyRegardListHourse.Clear();
                    if (HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count > j)
                        HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j] = new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged);
                    else
                        HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                }
            }
        }
        public void ClearAllTablesHeuristicsAndMoreCastle(int Order, int i, int j)
        {
            Object O = new Object();
            lock (O)
            {
                if (IsNonValidityAllTablesHeuristicsAndMore(4, Order, i, j))
                {
                    //clear all lists
                    CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Clear();
                    CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle.Clear();
                    CastlesOnTable[i].CastleThinkingQuantum[0].RowColumnCastle.Clear();
                    CastlesOnTable[i].CastleThinkingQuantum[0].PenaltyRegardListCastle.Clear();
                    if (CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy != null && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count > j)
                        CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j] = new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged);
                    else
                        CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                }
            }
        }
        public void ClearAllTablesHeuristicsAndMoreMinister(int Order, int i, int j)
        {
            Object O = new Object();
            lock (O)
            {
                if (IsNonValidityAllTablesHeuristicsAndMore(5, Order, i, j))
                {
                    //clear all lists
                    MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Clear();
                    MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister.Clear();
                    MinisterOnTable[i].MinisterThinkingQuantum[0].RowColumnMinister.Clear();
                    MinisterOnTable[i].MinisterThinkingQuantum[0].PenaltyRegardListMinister.Clear();
                    if (MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count > j)
                        MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j] = new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged);
                    else
                        MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                }
            }
        }
        public void ClearAllTablesHeuristicsAndMoreKing(int Order, int i, int j)
        {
            Object O = new Object();
            lock (O)
            {
                if (IsNonValidityAllTablesHeuristicsAndMore(6, Order, i, j))
                {
                    //clear all lists
                    KingOnTable[i].KingThinkingQuantum[0].TableListKing.Clear();
                    KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing.Clear();
                    KingOnTable[i].KingThinkingQuantum[0].RowColumnKing.Clear();
                    KingOnTable[i].KingThinkingQuantum[0].PenaltyRegardListKing.Clear();
                    if (KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count > j)
                        KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j] = new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged);
                    else
                        KingOnTable[i].KingThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                }
            }
        }
        //when there is a colision in lists of current return true and remove extra lists
        bool A_B_C_D_E_ISNonEqual(int a, int b, int c, int d, int e, int i, int j, int Kind)
        {
            bool Is = false;
            //when deeper is grater and is not empty
            if (e > a && e != -1)
            {
                //soldier
                if (Kind == 1)
                {
                    //remove extra
                    for (int h = a; h < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; h++)
                    {
                        SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.RemoveAt(h);
                    }
                }
                else//elephant
                    if (Kind == 2)
                {
                    //remove extra
                    for (int h = a; h < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; h++)
                    {
                        ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.RemoveAt(h);
                    }
                }
                else//hourse
                    if (Kind == 3)
                {
                    //remove extra
                    for (int h = a; h < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; h++)
                    {
                        HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.RemoveAt(h);
                    }
                }
                else//Castle
                    if (Kind == 4)
                {
                    //remove extra
                    for (int h = a; h < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; h++)
                    {
                        CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.RemoveAt(h);
                    }
                }
                else//minster
                    if (Kind == 5)
                {
                    //remove extra
                    for (int h = a; h < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; h++)
                    {
                        MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.RemoveAt(h);
                    }
                }
                else//king
                    if (Kind == 6)
                {
                    //remove extra
                    for (int h = a; h < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; h++)
                    {
                        KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.RemoveAt(h);
                    }
                }
            }
            //when therse is collision in lists number return true
            if ((!(a == b && b == c && c == d)) || j > e || a == 0 || e == 0 || e == -1)
                Is = true;
            //when there is not
            if (!Is)
            {
                //soldier
                if (Kind == 1)
                {
                    //when current alldraw lists is collision of stored lists tables state return true
                    if (SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].TableList.Count != 0 && (!ThinkingQuantumChess.TableEqual(SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].TableList[0], SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j])))
                        Is = true;
                }
                else//elephant
                                    if (Kind == 2)
                {
                    //when current alldraw lists is collision of stored lists tables state return true
                    if (ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].TableList.Count != 0 && (!ThinkingQuantumChess.TableEqual(ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].TableList[0], ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j])))
                        Is = true;

                }
                else//hourse
                                    if (Kind == 3)
                {
                    //when current alldraw lists is collision of stored lists tables state return true
                    if (HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].TableList.Count != 0 && (!ThinkingQuantumChess.TableEqual(HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].TableList[0], HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse[j])))
                        Is = true;
                }
                else//Castle
                                    if (Kind == 4)
                {
                    //when current alldraw lists is collision of stored lists tables state return true
                    if (CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].TableList.Count != 0 && (!ThinkingQuantumChess.TableEqual(CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].TableList[0], CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j])))
                        Is = true;
                }
                else//minster
                                    if (Kind == 5)
                {
                    //when current alldraw lists is collision of stored lists tables state return true
                    if (MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].TableList.Count != 0 && (!ThinkingQuantumChess.TableEqual(MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].TableList[0], MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j])))
                        Is = true;
                }
                else//king
                                    if (Kind == 6)
                {
                    //when current alldraw lists is collision of stored lists tables state return true
                    if (KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].TableList.Count != 0 && (!ThinkingQuantumChess.TableEqual(KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].TableList[0], KingOnTable[i].KingThinkingQuantum[0].TableListKing[j])))
                        Is = true;
                }
            }
            return Is;
        }
        //calculation of lists count and call collision methods determinstics
        public bool IsNonValidityAllTablesHeuristicsAndMore(int Kind, int Order, int i, int j)
        {
            bool Is = true;
            //soldier
            if (Kind == 1)
            {
                //when there is
                if (SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count > 0)
                {
                    //calculate of lists count and dynamic micprogramming
                    int a = SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count;
                    int b = SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder.Count;
                    int c = SolderesOnTable[i].SoldierThinkingQuantum[0].RowColumnSoldier.Count;
                    int d = SolderesOnTable[i].SoldierThinkingQuantum[0].PenaltyRegardListSolder.Count;
                    int e = 0;
                    if (SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null)
                        e = -1;
                    else
                        e = SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count;


                    Is = A_B_C_D_E_ISNonEqual(a, b, c, d, e, i, j, 1);
                }

            }

            else if (Kind == 2)
            {

                //when there is
                if (ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count > 0)
                {
                    //calculate of lists count and dynamic micprogramming
                    int a = ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count;
                    int b = ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant.Count;
                    int c = ElephantOnTable[i].ElefantThinkingQuantum[0].RowColumnElefant.Count;
                    int d = ElephantOnTable[i].ElefantThinkingQuantum[0].PenaltyRegardListElefant.Count;
                    int e = 0;
                    if (ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null)
                        e = -1;
                    else
                        e = ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count;

                    Is = A_B_C_D_E_ISNonEqual(a, b, c, d, e, i, j, 2);
                }

            }
            else if (Kind == 3)
            {

                //when there is
                if (HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count > 0)
                {
                    //calculate of lists count and dynamic micprogramming
                    int a = HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count;
                    int b = HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse.Count;
                    int c = HoursesOnTable[i].HourseThinkingQuantum[0].RowColumnHourse.Count;
                    int d = HoursesOnTable[i].HourseThinkingQuantum[0].PenaltyRegardListHourse.Count;
                    int e = 0;
                    if (HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null)
                        e = -1;
                    else
                        e = HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count;

                    Is = A_B_C_D_E_ISNonEqual(a, b, c, d, e, i, j, 3);
                }

            }
            else if (Kind == 4)
            {

                //when there is
                if (CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count > 0)
                {
                    //calculate of lists count and dynamic micprogramming
                    int a = CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count;
                    int b = CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle.Count;
                    int c = CastlesOnTable[i].CastleThinkingQuantum[0].RowColumnCastle.Count;
                    int d = CastlesOnTable[i].CastleThinkingQuantum[0].PenaltyRegardListCastle.Count;
                    int e = 0;
                    if (CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy != null)
                        e = -1;
                    else
                        e = CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count;
                    //if (a == b && b == c && d == c && a > 0)
                    Is = A_B_C_D_E_ISNonEqual(a, b, c, d, e, i, j, 4);
                }

            }
            else if (Kind == 5)
            {

                //when there is
                if (MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count > 0)
                {
                    //calculate of lists count and dynamic micprogramming
                    int a = MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count;
                    int b = MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister.Count;
                    int c = MinisterOnTable[i].MinisterThinkingQuantum[0].RowColumnMinister.Count;
                    int d = MinisterOnTable[i].MinisterThinkingQuantum[0].PenaltyRegardListMinister.Count;
                    int e = 0;
                    if (MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null)
                        e = -1;
                    else
                        e = MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count;

                    Is = A_B_C_D_E_ISNonEqual(a, b, c, d, e, i, j, 5);
                }

            }
            else if (Kind == 6)
            {

                //when there is
                if (KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count > 0)
                {
                    //calculate of lists count and dynamic micprogramming
                    int a = KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count;
                    int b = KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing.Count;
                    int c = KingOnTable[i].KingThinkingQuantum[0].RowColumnKing.Count;
                    int d = KingOnTable[i].KingThinkingQuantum[0].PenaltyRegardListKing.Count;
                    int e = 0;
                    if (KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null)
                        e = -1;
                    else
                        e = KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count;

                    Is = A_B_C_D_E_ISNonEqual(a, b, c, d, e, i, j, 6);
                }

            }

            return (Is);

        }
        //Creation Table and deeper when there is not deeper or there is  
        public bool FoundOfCurrentTableNodeSolderIJ(int i, int j, int[,] Tab, int Order, ref AllDraw THIS, ref bool Found)
        {
            //when is null creation enough but empty and create deeper node 
            if (SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy == null)
            {
                for (int h = 0; h <= j; h++)
                    //satisfied of created deeper three
                    BlitzNotValidFullGameThinkingQuantumTreePartThree(i, Order, 1);
                SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].TableList.Add(SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j]);
                SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                THIS = SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j];
                Found = true;
                return true;
            }//when is not deeper null and is less than j index create empty but create deeper node table
            else
                                    if (SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count < j)
            {
                for (int h = SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; h <= j; h++)
                    //satisfied of created deeper three
                    BlitzNotValidFullGameThinkingQuantumTreePartThree(i, Order, 1);
                SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].TableList.Add(SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j]);
                SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                THIS = SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j];
                Found = true;
                return true;
            }//when is enough and determine about creation of empty deeper than deeper or return exist
            else
            {
                if (SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count > j)
                {
                    if (!SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].IsAStargreedyHaveNode(1, Order))
                    {
                        SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                        SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].TableList.Add(SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j]);
                        SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                    }
                    THIS = SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j];
                    Found = true;
                    return true;
                }
            }
            return false;
        }
        //determine about found of equality of lists of current alldraw and call determinition of deeper 
        public bool FoundOfCurrentTableNodeSoldeir(int[,] Tab, int Order, ref AllDraw THIS, ref bool Found)
        {
            if (Order == 1)
            {
                for (int i = 0; SolderesOnTable != null && i < SodierMidle; i++)
                {
                    for (int j = 0; SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count > j; j++)
                    {
                        if (IsSupHuTrue(i, j, 0, 1))
                            continue;
                        if (ThinkingQuantumChess.TableEqual(SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j], Tab))
                        {
                            FoundOfCurrentTableNodeSolderIJ(i, j, Tab, Order, ref THIS, ref Found);
                            if (Found)
                                return Found;
                        }
                    }
                }
            }
            else
            {
                for (int i = SodierMidle; SolderesOnTable != null && i < SodierHigh; i++)
                {
                    for (int j = 0; SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count > j; j++)
                    {
                        if (IsSupHuTrue(i, j, 0, 1))
                            continue;
                        if (ThinkingQuantumChess.TableEqual(SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j], Tab))
                        {
                            FoundOfCurrentTableNodeSolderIJ(i, j, Tab, Order, ref THIS, ref Found);
                            if (Found)
                                return Found;

                        }

                    }
                }

            }
            return Found;
        }
        //Creation Table and deeper when there is not deeper or there is  
        public bool FoundOfCurrentTableNodeElephantIJ(int i, int j, int[,] Tab, int Order, ref AllDraw THIS, ref bool Found)
        {
            //when is null creation enough but empty and create deeper node 
            if (ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy == null)
            {
                for (int h = 0; h <= j; h++)
                    //satisfied of created deeper three
                    BlitzNotValidFullGameThinkingQuantumTreePartThree(i, Order, 2);
                ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].TableList.Add(ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j]);
                ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                THIS = ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j];
                Found = true;
                return true;
            }//when is not deeper null and is less than j index create empty but create deeper node table
            else
                                    if (ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count < j)
            {
                for (int h = ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; h <= j; h++)
                    //satisfied of created deeper three
                    BlitzNotValidFullGameThinkingQuantumTreePartThree(i, Order, 2);
                ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].TableList.Add(ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j]);
                ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                THIS = ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j];
                Found = true;
                return true;
            }//when is enough and determine about creation of empty deeper than deeper or return exist
            else
            {
                if (ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count > j)
                {
                    if (!ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].IsAStargreedyHaveNode(2, Order))
                    {
                        ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                        ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].TableList.Add(ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j]);
                        ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                    }
                    THIS = ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j];
                    Found = true;
                    return true;
                }
            }
            return false;
        }
        //determine about found of equality of lists of current alldraw and call determinition of deeper 
        public bool FoundOfCurrentTableNodeElephant(int[,] Tab, int Order, ref AllDraw THIS, ref bool Found)
        {
            if (Order == 1)
            {
                for (int i = 0; ElephantOnTable != null && i < ElefantMidle; i++)
                {
                    for (int j = 0; ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count > j; j++)
                    {
                        if (IsSupHuTrue(i, j, 0, 2))
                            continue;
                        if (ThinkingQuantumChess.TableEqual(ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j], Tab))
                        {

                            FoundOfCurrentTableNodeElephantIJ(i, j, Tab, Order, ref THIS, ref Found);
                            if (Found)
                                return Found;
                        }

                    }
                }
            }//when is not deeper null and is less than j index create empty but create deeper node table
            else
            {
                for (int i = ElefantMidle; ElephantOnTable != null && i < ElefantHigh; i++)
                {
                    for (int j = 0; ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count > j; j++)
                    {
                        if (IsSupHuTrue(i, j, 0, 2))
                            continue;
                        if (ThinkingQuantumChess.TableEqual(ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j], Tab))
                        {
                            FoundOfCurrentTableNodeElephantIJ(i, j, Tab, Order, ref THIS, ref Found);

                            if (Found)
                                return Found;
                        }

                    }
                }

            }
            return Found;
        }
        //Creation Table and deeper when there is not deeper or there is  
        public bool FoundOfCurrentTableNodeHourseIJ(int i, int j, int[,] Tab, int Order, ref AllDraw THIS, ref bool Found)
        {
            //when is null creation enough but empty and create deeper node 
            if (HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy == null)
            {
                for (int h = 0; h <= j; h++)
                    //satisfied of created deeper three
                    BlitzNotValidFullGameThinkingQuantumTreePartThree(i, Order, 3);
                HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].TableList.Add(HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse[j]);
                HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                THIS = HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j];
                Found = true;
                return true;
            }//when is not deeper null and is less than j index create empty but create deeper node table
            else
                                   if (HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count < j)
            {
                for (int h = HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; h <= j; h++)
                    //satisfied of created deeper three
                    BlitzNotValidFullGameThinkingQuantumTreePartThree(i, Order, 3);
                HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].TableList.Add(HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse[j]);
                HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                THIS = HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j];
                Found = true;
                return true;
            }//when is enough and determine about creation of empty deeper than deeper or return exist
            else
            {
                if (HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count > j)
                {
                    if (!HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].IsAStargreedyHaveNode(3, Order))
                    {
                        HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                        HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].TableList.Add(HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse[j]);
                        HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                    }

                    THIS = HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j];
                    Found = true;
                    return true;
                }
            }
            return false;
        }
        //determine about found of equality of lists of current alldraw and call determinition of deeper 
        public bool FoundOfCurrentTableNodeHourse(int[,] Tab, int Order, ref AllDraw THIS, ref bool Found)
        {
            if (Order == 1)
            {
                for (int i = 0; HoursesOnTable != null && i < ElefantMidle; i++)
                {
                    for (int j = 0; HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count > j; j++)
                    {
                        if (IsSupHuTrue(i, j, 0, 3))
                            continue;
                        if (ThinkingQuantumChess.TableEqual(HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse[j], Tab))
                        {
                            FoundOfCurrentTableNodeHourseIJ(i, j, Tab, Order, ref THIS, ref Found);
                            if (Found)
                                return Found;

                        }

                    }
                }
            }
            else
            {
                for (int i = HourseMidle; HoursesOnTable != null && i < HourseHight; i++)
                {
                    for (int j = 0; HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count > j; j++)
                    {
                        if (IsSupHuTrue(i, j, 0, 3))
                            continue;
                        if (ThinkingQuantumChess.TableEqual(HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse[j], Tab))
                        {
                            FoundOfCurrentTableNodeHourseIJ(i, j, Tab, Order, ref THIS, ref Found);
                            if (Found)
                                return Found;

                        }

                    }
                }

            }
            return Found;
        }
        //Creation Table and deeper when there is not deeper or there is  
        public bool FoundOfCurrentTableNodeCastleIJ(int i, int j, int[,] Tab, int Order, ref AllDraw THIS, ref bool Found)
        {
            //when is null creation enough but empty and create deeper node 
            if (CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy == null)
            {
                for (int h = 0; h <= j; h++)
                    //satisfied of created deeper three
                    BlitzNotValidFullGameThinkingQuantumTreePartThree(i, Order, 4);
                CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].TableList.Add(CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j]);
                CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                THIS = CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j];
                Found = true;
                return true;
            }//when is not deeper null and is less than j index create empty but create deeper node table
            else
                      if (CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy != null && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count < j)
            {
                for (int h = CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; h <= j; h++)
                    //satisfied of created deeper three
                    BlitzNotValidFullGameThinkingQuantumTreePartThree(i, Order, 4);
                CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].TableList.Add(CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j]);
                CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                THIS = CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j];
                Found = true;
                return true;
            }//when is enough and determine about creation of empty deeper than deeper or return exist
            else
            {
                if (CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy != null && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count > j)
                {
                    if (!CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].IsAStargreedyHaveNode(4, Order))
                    {
                        CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                        CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].TableList.Add(CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j]);
                        CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                    }
                    THIS = CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j];

                    Found = true;
                    return true;
                }
            }
            return false;
        }
        //determine about found of equality of lists of current alldraw and call determinition of deeper 
        public bool FoundOfCurrentTableNodeCastle(int[,] Tab, int Order, ref AllDraw THIS, ref bool Found)
        {
            if (Order == 1)
            {
                for (int i = 0; CastlesOnTable != null && i < CastleMidle; i++)
                {
                    for (int j = 0; CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count > j; j++)
                    {
                        if (IsSupHuTrue(i, j, 0, 4))
                            continue;
                        if (ThinkingQuantumChess.TableEqual(CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j], Tab))
                        {

                            FoundOfCurrentTableNodeCastleIJ(i, j, Tab, Order, ref THIS, ref Found);
                            if (Found)
                                return Found;
                        }

                    }
                }
            }
            else
            {
                for (int i = CastleMidle; CastlesOnTable != null && i < CastleHigh; i++)
                {
                    for (int j = 0; CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count > j; j++)
                    {
                        if (IsSupHuTrue(i, j, 0, 4))
                            continue;
                        if (ThinkingQuantumChess.TableEqual(CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j], Tab))
                        {
                            FoundOfCurrentTableNodeCastleIJ(i, j, Tab, Order, ref THIS, ref Found);
                            if (Found)
                                return Found;

                        }

                    }
                }

            }
            return Found;
        }
        //Creation Table and deeper when there is not deeper or there is  
        public bool FoundOfCurrentTableNodeMinisterIJ(int i, int j, int[,] Tab, int Order, ref AllDraw THIS, ref bool Found)
        {
            //when is null creation enough but empty and create deeper node 
            if (MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy == null)
            {
                for (int h = 0; h <= j; h++)
                    //satisfied of created deeper three
                    BlitzNotValidFullGameThinkingQuantumTreePartThree(i, Order, 5);
                MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].TableList.Add(MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j]);
                MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                THIS = MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j];
                Found = true;
                return true;
            }//when is not deeper null and is less than j index create empty but create deeper node table
            else
                                    if (MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count < j)
            {
                for (int h = MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; h <= j; h++)
                    //satisfied of created deeper three
                    BlitzNotValidFullGameThinkingQuantumTreePartThree(i, Order, 5);
                MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].TableList.Add(MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j]);
                MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                THIS = MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j];
                Found = true;
                return true;
            }//when is enough and determine about creation of empty deeper than deeper or return exist
            else
            {
                if (MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count > j)
                {
                    if (!MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].IsAStargreedyHaveNode(5, Order))
                    {
                        MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                        MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].TableList.Add(MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j]);
                        MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                    }
                    THIS = MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j];
                    Found = true;
                    return true;
                }
            }
            return false;
        }
        //determine about found of equality of lists of current alldraw and call determinition of deeper 
        public bool FoundOfCurrentTableNodeMinister(int[,] Tab, int Order, ref AllDraw THIS, ref bool Found)
        {
            if (Order == 1)
            {
                for (int i = 0; MinisterOnTable != null && i < MinisterMidle; i++)
                {
                    for (int j = 0; MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count > j; j++)
                    {
                        if (IsSupHuTrue(i, j, 0, 5))
                            continue;
                        if (ThinkingQuantumChess.TableEqual(MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j], Tab))
                        {
                            FoundOfCurrentTableNodeMinisterIJ(i, j, Tab, Order, ref THIS, ref Found);
                            if (Found)
                                return Found;

                        }

                    }
                }
            }
            else
            {
                for (int i = MinisterMidle; MinisterOnTable != null && i < MinisterHigh; i++)
                {
                    for (int j = 0; MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count > j; j++)
                    {
                        if (IsSupHuTrue(i, j, 0, 5))
                            continue;
                        if (ThinkingQuantumChess.TableEqual(MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j], Tab))
                        {
                            FoundOfCurrentTableNodeMinisterIJ(i, j, Tab, Order, ref THIS, ref Found);
                            if (Found)
                                return Found;

                        }

                    }
                }

            }
            return Found;
        }
        //Creation Table and deeper when there is not deeper or there is  
        public bool FoundOfCurrentTableNodeKingIJ(int i, int j, int[,] Tab, int Order, ref AllDraw THIS, ref bool Found)
        {
            //when is null creation enough but empty and create deeper node 
            if (KingOnTable[i].KingThinkingQuantum[0].AStarGreedy == null)
            {
                for (int h = 0; h <= j; h++)
                    //satisfied of created deeper three
                    BlitzNotValidFullGameThinkingQuantumTreePartThree(i, Order, 6);
                KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].TableList.Add(KingOnTable[i].KingThinkingQuantum[0].TableListKing[j]);
                KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                THIS = KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j];
                Found = true;
                return true;
            }//when is not deeper null and is less than j index create empty but create deeper node table
            else
                                    if (KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count < j)
            {
                for (int h = KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; h <= j; h++)
                    //satisfied of created deeper three
                    BlitzNotValidFullGameThinkingQuantumTreePartThree(i, Order, 6);
                KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].TableList.Add(KingOnTable[i].KingThinkingQuantum[0].TableListKing[j]);
                KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                THIS = KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j];
                Found = true;
                return true;
            }//when is enough and determine about creation of empty deeper than deeper or return exist
            else
            {
                if (KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count > j)
                {
                    if (!KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].IsAStargreedyHaveNode(6, Order))
                    {
                        KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].TableList.Clear();
                        KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].TableList.Add(KingOnTable[i].KingThinkingQuantum[0].TableListKing[j]);
                        KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].SetRowColumn(0);
                    }
                    THIS = KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j];
                    Found = true;
                    return true;
                }
            }
            return false;
        }
        //determine about found of equality of lists of current alldraw and call determinition of deeper 
        public bool FoundOfCurrentTableNodeKing(int[,] Tab, int Order, ref AllDraw THIS, ref bool Found)
        {
            if (Order == 1)
            {
                for (int i = 0; KingOnTable != null && i < KingMidle; i++)
                {
                    for (int j = 0; KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count > j; j++)
                    {
                        if (IsSupHuTrue(i, j, 0, 6))
                            continue;
                        if (ThinkingQuantumChess.TableEqual(KingOnTable[i].KingThinkingQuantum[0].TableListKing[j], Tab))
                        {
                            FoundOfCurrentTableNodeKingIJ(i, j, Tab, Order, ref THIS, ref Found);
                            if (Found)
                                return Found;

                        }

                    }
                }
            }
            else
            {
                for (int i = KingMidle; KingOnTable != null && i < KingHigh; i++)
                {
                    for (int j = 0; KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count > j; j++)
                    {
                        if (IsSupHuTrue(i, j, 0, 6))
                            continue;
                        if (ThinkingQuantumChess.TableEqual(KingOnTable[i].KingThinkingQuantum[0].TableListKing[j], Tab))
                        {
                            FoundOfCurrentTableNodeKingIJ(i, j, Tab, Order, ref THIS, ref Found);
                            if (Found)
                                return Found;

                        }

                    }
                }

            }
            return Found;
        }
        //found of leadfs of created tree depend of orderic 
        public AllDraw FoundOfLeafDepenOfKind(int Kind, ref AllDraw Leaf, ref bool Found, int Order, ref int OrderLeaf)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a = new Object();
            lock (a)
            {
                //when found return recursive
                if (Found)
                    return Leaf;
                //gray
                if (Order == 1)
                {

                    for (var i = 0; i < SodierMidle; i++)
                    {
                        for (var j = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && j < SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {

                            //when leaf found set refer bool and alldraw refer objects
                            if (SolderesOnTable[i].SoldierThinkingQuantum[0].IsThereMateOfEnemy || SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count == 0 && Kind == 1)
                            {
                                Found = true;
                                Leaf = this;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundOfLeafDepenOfKind:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return Leaf;

                            }
                            else//deeper
                                for (var ii = 0; ii < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count - 1; ii++)
                                    SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[ii].FoundOfLeafDepenOfKind(Kind, ref Leaf, ref Found, Order * -1, ref OrderLeaf);


                        }
                    }
                    for (var i = 0; i < ElefantMidle; i++)
                    {
                        for (var j = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && j < ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {

                            //when leaf found set refer bool and alldraw refer objects
                            if (ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count == 0 && Kind == 2)
                            {
                                Found = true;
                                Leaf = this;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundOfLeafDepenOfKind:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return Leaf;
                            }
                            else//deeper
                                for (var ii = 0; ii < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count - 1; ii++)
                                    ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[ii].FoundOfLeafDepenOfKind(Kind, ref Leaf, ref Found, Order * -1, ref OrderLeaf);



                        }
                    }
                    for (var i = 0; i < HourseMidle; i++)
                    {
                        for (var j = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && j < HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {

                            //when leaf found set refer bool and alldraw refer objects
                            if (HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count == 0 && Kind == 3)
                            {
                                Found = true;
                                Leaf = this;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundOfLeafDepenOfKind:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return Leaf;
                            }
                            else//deeper
                                for (var ii = 0; ii < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count - 1; ii++)
                                    HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[ii].FoundOfLeafDepenOfKind(Kind, ref Leaf, ref Found, Order * -1, ref OrderLeaf);


                        }

                    }

                    for (var i = 0; i < CastleMidle; i++)
                    {
                        for (var j = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && j < CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {

                            //when leaf found set refer bool and alldraw refer objects
                            if (CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count == 0 && Kind == 4)
                            {
                                Found = true;
                                Leaf = this;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundOfLeafDepenOfKind:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return Leaf;
                            }
                            else//deeper
                                for (var ii = 0; ii < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count - 1; ii++)
                                    CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[ii].FoundOfLeafDepenOfKind(Kind, ref Leaf, ref Found, Order * -1, ref OrderLeaf);

                        }
                    }
                    for (var i = 0; i < MinisterMidle; i++)
                    {
                        for (var j = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && j < MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {

                            //when leaf found set refer bool and alldraw refer objects
                            if (MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count == 0 && Kind == 5)
                            {
                                Found = true;
                                Leaf = this;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundOfLeafDepenOfKind:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return Leaf;
                            }
                            else//deeper
                                for (var ii = 0; ii < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count - 1; ii++)
                                    MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[ii].FoundOfLeafDepenOfKind(Kind, ref Leaf, ref Found, Order * -1, ref OrderLeaf);



                        }
                    }
                    for (var i = 0; i < KingMidle; i++)
                    {
                        for (var j = 0; KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum[0] != null && j < KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {

                            //when leaf found set refer bool and alldraw refer objects
                            if (KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count == 0 && Kind == 6)
                            {
                                Found = true;
                                Leaf = this;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundOfLeafDepenOfKind:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return Leaf;
                            }
                            else//deeper
                                for (var ii = 0; ii < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count - 1; ii++)
                                    KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[ii].FoundOfLeafDepenOfKind(Kind, ref Leaf, ref Found, Order * -1, ref OrderLeaf);



                        }
                    }
                }
                else
                {
                    for (var i = SodierMidle; i < SodierHigh; i++)
                    {
                        for (var j = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && j < SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {


                            //when leaf found set refer bool and alldraw refer objects
                            if (SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count == 0 && Kind == 1)
                            {
                                Found = true;
                                Leaf = this;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundOfLeafDepenOfKind:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return Leaf;
                            }
                            else//deeper
                                for (var ii = 0; ii < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count - 1; ii++)
                                    SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[ii].FoundOfLeafDepenOfKind(Kind, ref Leaf, ref Found, Order * -1, ref OrderLeaf);

                        }
                    }
                    for (var i = ElefantMidle; i < ElefantHigh; i++)
                    {
                        for (var j = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && j < ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {


                            //when leaf found set refer bool and alldraw refer objects
                            if (ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count == 0 && Kind == 2)
                            {
                                Found = true;
                                Leaf = this;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundOfLeafDepenOfKind:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return Leaf;
                            }
                            else//deeper
                                for (var ii = 0; ii < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count - 1; ii++)
                                    ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[ii].FoundOfLeafDepenOfKind(Kind, ref Leaf, ref Found, Order * -1, ref OrderLeaf);

                        }
                    }
                    for (var i = HourseMidle; i < HourseHight; i++)
                    {
                        for (var j = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && j < HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {


                            //when leaf found set refer bool and alldraw refer objects
                            if (HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count == 0 && Kind == 3)
                            {
                                Found = true;
                                Leaf = this;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundOfLeafDepenOfKind:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return Leaf;
                            }
                            else//deeper
                                for (var ii = 0; ii < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count - 1; ii++)
                                    HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[ii].FoundOfLeafDepenOfKind(Kind, ref Leaf, ref Found, Order * -1, ref OrderLeaf);

                        }
                    }
                    for (var i = CastleMidle; i < CastleHigh; i++)
                    {
                        for (var j = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && j < CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {


                            //when leaf found set refer bool and alldraw refer objects
                            if (CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count == 0 && Kind == 4)
                            {
                                Found = true;
                                Leaf = this;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundOfLeafDepenOfKind:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return Leaf;
                            }
                            else//deeper
                                for (var ii = 0; ii < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count - 1; ii++)
                                    CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[ii].FoundOfLeafDepenOfKind(Kind, ref Leaf, ref Found, Order * -1, ref OrderLeaf);


                        }
                    }
                    for (var i = MinisterMidle; i < MinisterHigh; i++)
                    {
                        for (var j = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && j < MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {

                            //when leaf found set refer bool and alldraw refer objects
                            if (MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count == 0 && Kind == 5)
                            {
                                Found = true;
                                Leaf = this;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundOfLeafDepenOfKind:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return Leaf;
                            }
                            else//deeper
                                for (var ii = 0; ii < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count - 1; ii++)
                                    MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[ii].FoundOfLeafDepenOfKind(Kind, ref Leaf, ref Found, Order * -1, ref OrderLeaf);


                        }
                    }

                    for (var i = KingMidle; i < KingHigh; i++)
                    {
                        for (var j = 0; KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum[0] != null && j < KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {

                            //when leaf found set refer bool and alldraw refer objects
                            if (KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count == 0 && Kind == 6)
                            {
                                Found = true;
                                Leaf = this;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundOfLeafDepenOfKind:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return Leaf;

                            }
                            else//deeper
                                for (var ii = 0; ii < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count - 1; ii++)
                                    KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[ii].FoundOfLeafDepenOfKind(Kind, ref Leaf, ref Found, Order * -1, ref OrderLeaf);



                        }
                    }
                }
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundOfLeafDepenOfKind:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return Leaf;
            }
        }
        //when leafs is vivtory target nodes return true found and set refrence
        public bool IsFoundOfLeafDepenOfKindhaveVictory(int Kind, ref bool Found, int Order)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a = new Object();
            lock (a)
            {

                //when found return recurve
                if (Found)
                    return true;
                //gray
                if (Order == 1)
                {
                    //soldier
                    for (var i = 0; i < SodierMidle; i++)
                        for (var j = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && j < SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {

                            //when is victory
                            if (SolderesOnTable[i].SoldierThinkingQuantum[0].IsThereMateOfEnemy// && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count == 0 
                                && Kind == 1)
                            {
                                Found = true;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("IsFoundOfLeafDepenOfKindhaveVictory:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return true;
                            }
                            else//deeper
                                for (var ii = 0; ii < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[ii].IsFoundOfLeafDepenOfKindhaveVictory(Kind, ref Found, Order * -1);


                        }
                    //elephant
                    for (var i = 0; i < ElefantMidle; i++)
                        for (var j = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && j < ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {
                            //when is victory
                            if (ElephantOnTable[i].ElefantThinkingQuantum[0].IsThereMateOfEnemy //&& ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count == 0 
                        && Kind == 2)
                            {
                                Found = true;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("IsFoundOfLeafDepenOfKindhaveVictory:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return true;
                            }
                            else//deeper
                                for (var ii = 0; ii < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[ii].IsFoundOfLeafDepenOfKindhaveVictory(Kind, ref Found, Order * -1);



                        }
                    //hourse
                    for (var i = 0; i < HourseMidle; i++)
                        for (var j = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && j < HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {
                            //when is victory
                            if (HoursesOnTable[i].HourseThinkingQuantum[0].IsThereMateOfEnemy //&& HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count == 0 
&& Kind == 3)
                            {
                                Found = true;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("IsFoundOfLeafDepenOfKindhaveVictory:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return true;
                            }
                            else//deeper
                                for (var ii = 0; ii < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[ii].IsFoundOfLeafDepenOfKindhaveVictory(Kind, ref Found, Order * -1);




                        }
                    //Castle
                    for (var i = 0; i < CastleMidle; i++)
                        for (var j = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && j < CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {
                            //when is victory
                            if (CastlesOnTable[i].CastleThinkingQuantum[0].IsThereMateOfEnemy //&& CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count == 0 
                                && Kind == 4)
                            {
                                Found = true;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("IsFoundOfLeafDepenOfKindhaveVictory:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return true;
                            }
                            else//deeper
                                for (var ii = 0; ii < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[ii].IsFoundOfLeafDepenOfKindhaveVictory(Kind, ref Found, Order * -1);


                        }
                    //minister
                    for (var i = 0; i < MinisterMidle; i++)
                        for (var j = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && j < MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {
                            //when is victory
                            if (MinisterOnTable[i].MinisterThinkingQuantum[0].IsThereMateOfEnemy //&& MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count == 0 
                                && Kind == 5)
                            {
                                Found = true;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("IsFoundOfLeafDepenOfKindhaveVictory:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return true;
                            }
                            else//deeper
                                for (var ii = 0; ii < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[ii].IsFoundOfLeafDepenOfKindhaveVictory(Kind, ref Found, Order * -1);



                        }
                    //king
                    for (var i = 0; i < KingMidle; i++)
                        for (var j = 0; KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum[0] != null && j < KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {
                            //when is victory
                            if (KingOnTable[i].KingThinkingQuantum[0].IsThereMateOfEnemy //&& KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count == 0 
                                && Kind == 6)
                            {
                                Found = true;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("IsFoundOfLeafDepenOfKindhaveVictory:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return true;
                            }
                            else//deeper
                                for (var ii = 0; ii < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[ii].IsFoundOfLeafDepenOfKindhaveVictory(Kind, ref Found, Order * -1);



                        }
                }
                else//brown
                {
                    //soldier
                    for (var i = SodierMidle; i < SodierHigh; i++)
                        for (var j = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && j < SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {

                            //when is victory
                            if (SolderesOnTable[i].SoldierThinkingQuantum[0].IsThereMateOfEnemy //&& SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count == 0 
                                && Kind == 1)
                            {
                                Found = true;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("IsFoundOfLeafDepenOfKindhaveVictory:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return true;
                            }
                            else//deeper
                                for (var ii = 0; ii < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[ii].IsFoundOfLeafDepenOfKindhaveVictory(Kind, ref Found, Order * -1);

                        }
                    //elephant
                    for (var i = ElefantMidle; i < ElefantHigh; i++)
                        for (var j = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && j < ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {

                            //when is victory
                            if (ElephantOnTable[i].ElefantThinkingQuantum[0].IsThereMateOfEnemy //&& ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count == 0 
                                && Kind == 2)
                            {
                                Found = true;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("IsFoundOfLeafDepenOfKindhaveVictory:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return true;
                            }
                            else//deeper
                                for (var ii = 0; ii < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[ii].IsFoundOfLeafDepenOfKindhaveVictory(Kind, ref Found, Order * -1);

                        }
                    //hourse
                    for (var i = HourseMidle; i < HourseHight; i++)
                        for (var j = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && j < HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {

                            //when is victory
                            if (HoursesOnTable[i].HourseThinkingQuantum[0].IsThereMateOfEnemy //&& HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count == 0 
                                && Kind == 3)
                            {
                                Found = true;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("IsFoundOfLeafDepenOfKindhaveVictory:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return true;
                            }
                            else//deeper
                                for (var ii = 0; ii < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[ii].IsFoundOfLeafDepenOfKindhaveVictory(Kind, ref Found, Order * -1);

                        }
                    //Castle
                    for (var i = CastleMidle; i < CastleHigh; i++)
                        for (var j = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && j < CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {

                            //when is victory
                            if (CastlesOnTable[i].CastleThinkingQuantum[0].IsThereMateOfEnemy //&& CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count == 0 
                                && Kind == 4)
                            {
                                Found = true;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("IsFoundOfLeafDepenOfKindhaveVictory:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return true;
                            }
                            else//deeper
                                for (var ii = 0; ii < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[ii].IsFoundOfLeafDepenOfKindhaveVictory(Kind, ref Found, Order * -1);


                        }
                    //minister
                    for (var i = MinisterMidle; i < MinisterHigh; i++)
                        for (var j = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && j < MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {
                            //when is victory
                            if (MinisterOnTable[i].MinisterThinkingQuantum[0].IsThereMateOfEnemy //&& MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count == 0
                                && Kind == 5)
                            {
                                Found = true;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("IsFoundOfLeafDepenOfKindhaveVictory:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return true;
                            }
                            else//deeper
                                for (var ii = 0; ii < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[ii].IsFoundOfLeafDepenOfKindhaveVictory(Kind, ref Found, Order * -1);


                        }
                    //king
                    for (var i = KingMidle; i < KingHigh; i++)
                        for (var j = 0; KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum[0] != null && j < KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {
                            //when is victory
                            if (KingOnTable[i].KingThinkingQuantum[0].IsThereMateOfEnemy //&& KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count == 0 
                                && Kind == 6)
                            {
                                Found = true;
                                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("IsFoundOfLeafDepenOfKindhaveVictory:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                                return true;

                            }
                            else//deeper
                                for (var ii = 0; ii < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; ii++)
                                    KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[ii].IsFoundOfLeafDepenOfKindhaveVictory(Kind, ref Found, Order * -1);



                        }
                }
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("IsFoundOfLeafDepenOfKindhaveVictory:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return Found;
            }
        }
        //Retrun determined consideration of lists of ThinkingQuantum chess class list collisions.
        //1 for AStar non empty and not contained computation; 2 for AStASrEmpty and not contaied computations;
        //3 for empty and contained compuatations
        //4 a star is not emplty and contaied computation
        int IsSuitableForInitiation(int i, int j, int Kind)
        {
            int Is = -1;
            //determine deeper have right contained
            bool a = IsNotAStarGreedyConanaied(i, j, Kind);
            //determined deeper contained have computatinal list correctly.
            bool b = IsNotComputationsConanaiedAStarGreedy(i, j, Kind);
            //when true
            if (a)
            {
                //when true
                if (b) Is = 2;

                else//when false
                    Is = 3;

            }
            else//when false
            {
                //when true
                if (b)
                    Is = 1;

                else//when false
                    Is = 4;

            }
            //when is 2 consider determinstic results about contanied
            if (Is == 2)
            IsThereCalculatedAStarGreedyNode(i);
            return Is;
        }
        //when current side of alldraw is not contained and semi computated 
        bool IsNotAStarGreedyConanaied(int i, int j, int Kind)
        {
            bool Is = false;
            int e = 0;
            int d = 0;
            //Soldier
            if (Kind == 1)
            {
                //determine nodes is coorectly existence
                if (SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count > 0)
                {
                    //deeper count
                    e = SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count;
                    //when deeper count exist and index is not more than count of deeper
                    if (e > 0 && j < e)
                        //alldraw table list count
                        d = SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].TableList.Count;
                    //alldraw tabale list and deeper count not staisfy validity or when there is not equallity retunr true
                    if (d > 0 & e > j && (!ThinkingQuantumChess.TableEqual(SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].TableList[0], SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j])))
                        Is = true;

                }
            }
            else if (Kind == 2)
            {

                //determine nodes is coorectly existence
                if (ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count > 0)
                {
                    //deeper count
                    e = ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count;
                    //when deeper count exist and index is not more than count of deeper
                    if (e > 0 && j < e)
                        //alldraw table list count
                        d = ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].TableList.Count;
                    //alldraw tabale list and deeper count not staisfy validity or when there is not equallity retunr true
                    if (d > 0 & e > j && (!ThinkingQuantumChess.TableEqual(ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].TableList[0], ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j])))
                        Is = true;
                }
            }
            else if (Kind == 3)
            {

                //determine nodes is coorectly existence
                if (HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count > 0)
                {
                    //deeper count
                    e = HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count;
                    //when deeper count exist and index is not more than count of deeper
                    if (e > 0 && j < e)
                        //alldraw table list count
                        d = HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].TableList.Count;
                    //alldraw tabale list and deeper count not staisfy validity or when there is not equallity retunr true
                    if (d > 0 & e > j && (!ThinkingQuantumChess.TableEqual(HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].TableList[0], HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse[j])))
                        Is = true;
                }
            }
            else if (Kind == 4)
            {

                //determine nodes is coorectly existence
                if (CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count > 0)
                {
                    //deeper count
                    e = CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count;
                    //when deeper count exist and index is not more than count of deeper
                    if (e > 0 && j < e)
                        //alldraw table list count
                        d = CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].TableList.Count;
                    //alldraw tabale list and deeper count not staisfy validity or when there is not equallity retunr true
                    if (d > 0 & e > j && (!ThinkingQuantumChess.TableEqual(CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].TableList[0], CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j])))
                        Is = true;
                }
            }
            else if (Kind == 5)
            {
                //determine nodes is coorectly existence
                if (MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count > 0)
                {
                    //deeper count
                    e = MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count;
                    //when deeper count exist and index is not more than count of deeper
                    if (e > 0 && j < e)
                        //alldraw table list count
                        d = MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].TableList.Count;
                    //alldraw tabale list and deeper count not staisfy validity or when there is not equallity retunr true
                    if (d > 0 & e > j && (!ThinkingQuantumChess.TableEqual(MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].TableList[0], MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j])))
                        Is = true;
                }
            }
            else if (Kind == 6)
            {
                //determine nodes is coorectly existence
                if (KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count > 0)
                {
                    //deeper count
                    e = KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count;
                    //when deeper count exist and index is not more than count of deeper
                    if (e > 0 && j < e)
                        //alldraw table list count
                        d = KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].TableList.Count;
                    //alldraw tabale list and deeper count not staisfy validity or when there is not equallity retunr true
                    if (d > 0 & e > j && (!ThinkingQuantumChess.TableEqual(KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].TableList[0], KingOnTable[i].KingThinkingQuantum[0].TableListKing[j])))
                        Is = true;
                }
            }
            //when deeper not exist return true
            if (e == 0)
                Is = true;
            //when current alldraw tablelist not exist return true
            if (d == 0)
                Is = true;
            return Is;


        }
        //When there is computatinoal deeper and there is colosion in lists return true otherwise return false
        bool IsNotComputationsConanaiedAStarGreedy(int i, int j, int Kind)
        {
            bool Is = false;
            int e = 0;
            //soldier
            if (Kind == 1)
            {
                if (SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count > 0)
                {
                    //lists count
                    int a = SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count;
                    e = SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count;
                    //when table state exist and there is equliity between lists and deeper count
                    if (a == e && e > j && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].TableList != null && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].TableList.Count > 0)
                    {
                        //when tow lists tables not is equal return true
                        if (!ThinkingQuantumChess.TableEqual(SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].TableList[0], SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder[j]))
                            Is = true;
                    }
                    else
                    {
                        //when deeper count is larger than lists count
                        if (e > a)
                        {
                            //remove extra
                            for (int h = a; h < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; h++)
                            {
                                SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.RemoveAt(h);
                                //e--;
                            }
                        }
                        //when deeper dose not exist return true
                        if (a == 0)
                            Is = true;
                    }
                }
            }
            else if (Kind == 2)//elephant
            {
                if (ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count > 0)
                {
                    //lists count
                    int a = ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count;
                    e = ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count;
                    //when table state exist and there is equliity between lists and deeper count
                    if (a == e && e > j && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].TableList != null && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].TableList.Count > 0)
                    {
                        //when tow lists tables not is equal return true
                        if (!ThinkingQuantumChess.TableEqual(ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].TableList[0], ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant[j]))
                            Is = true;
                    }
                    else
                    {
                        //when deeper count is larger than lists count
                        if (e > a)
                        {
                            //remove extra
                            for (int h = a; h < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; h++)
                            {
                                ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.RemoveAt(h);

                            }
                        }
                        //when deeper dose not exist return true
                        if (a == 0)
                            Is = true;
                    }
                }
            }
            else if (Kind == 3)//hourse
            {
                if (HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count > 0)
                {
                    //lists count
                    int a = HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count;
                    e = HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count;
                    //when table state exist and there is equliity between lists and deeper count
                    if (a == e && e > j && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].TableList != null && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].TableList.Count > 0)
                    {
                        //when tow lists tables not is equal return true
                        if (!ThinkingQuantumChess.TableEqual(HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].TableList[0], HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse[j]))
                            Is = true;
                    }
                    else
                    {
                        //when deeper count is larger than lists count
                        if (e > a)
                        {
                            //remove extra
                            for (int h = a; h < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; h++)
                            {
                                HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.RemoveAt(h);
                            }

                        }
                        //when deeper dose not exist return true
                        if (a == 0)
                            Is = true;
                    }
                }
            }
            else if (Kind == 4)//Castle
            {

                if (CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count > 0)
                {
                    //lists count
                    int a = CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count;
                    e = CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count;
                    //when table state exist and there is equliity between lists and deeper count
                    if (a == e && e > j && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].TableList != null && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].TableList.Count > 0)
                    {
                        //when tow lists tables not is equal return true
                        if (!ThinkingQuantumChess.TableEqual(CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].TableList[0], CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle[j]))
                            Is = true;
                    }
                    else
                    {
                        //when deeper count is larger than lists count
                        if (e > a)
                        {
                            //remove extra
                            for (int h = a; h < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; h++)
                            {
                                CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.RemoveAt(h);

                            }
                        }
                        //when deeper dose not exist return true
                        if (a == 0)
                            Is = true;
                    }
                }
            }
            else if (Kind == 5)//minister
            {

                if (MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count > 0)
                {
                    //lists count
                    int a = MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count;
                    e = MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count;
                    //when table state exist and there is equliity between lists and deeper count
                    if (a == e && e > j && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].TableList != null && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].TableList.Count > 0)
                    {
                        //when tow lists tables not is equal return true
                        if (!ThinkingQuantumChess.TableEqual(MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].TableList[0], MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister[j]))
                            Is = true;
                    }
                    else
                    {
                        //when deeper count is larger than lists count
                        if (e > a)
                        {
                            //remove extra
                            for (int h = a; h < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; h++)
                            {
                                MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.RemoveAt(h);

                            }
                        }
                        //when deeper dose not exist return true
                        if (a == 0)
                            Is = true;
                    }
                }
            }
            else if (Kind == 6)//king
            {
                if (KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count > 0)
                {
                    //lists count
                    int a = KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count;
                    e = KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count;
                    //when table state exist and there is equliity between lists and deeper count
                    if (a == e && e > j && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].TableList != null && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].TableList.Count > 0)
                    {
                        //when tow lists tables not is equal return true
                        if (!ThinkingQuantumChess.TableEqual(KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].TableList[0], KingOnTable[i].KingThinkingQuantum[0].TableListKing[j]))
                            Is = true;
                    }
                    else
                    {
                        //when deeper count is larger than lists count
                        if (e > a)
                        {
                            //remove extra
                            for (int h = a; h < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; h++)
                            {
                                KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.RemoveAt(h);
                            }
                        }
                        //when deeper dose not exist return true
                        if (a == 0)
                            Is = true;
                    }
                }
            }
            //when deeper count is less than index deeper return true
            if (e < j)
                Is = true;

            return Is;


        }
        //deeper leaf found 
        public void FoundOfLeafDepenOfKindFullGameSoldeir(Color a, ref bool FullGameFound, int[,] Table, int Order, int iAStarGreedy, int ii, int jj, int i, int jjj, bool FOUND, int LeafAStarGreedy)
        {
            Object P = new Object();
            lock (P)
            {
                for (var j = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && j < SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder != null //&& SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null
                         ; j++)
                {
                    Object OOOOO = new Object();
                    lock (OOOOO)
                    {
                        if (IsSupHuTrue(i, j, 0, 1))
                            continue;
                        //when search finished stop and return
                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                            return;

                    }
                    //determine about validity of list on current and deeper return true when successfull
                    bool IA = IsNonValidityAllTablesHeuristicsAndMore(1, Order, i, j);

                    //determine about situation of deeper against other lists computation in 4 state
                    int Is = IsSuitableForInitiation(i, j, 1);

                    if (!IA)
                        Is = 4;
                    //when is suitable for computational operation on lists
                    if (Is == 4)
                    {
                        Object OOOO = new Object();
                        lock (OOOO)
                        {
                            //when search finished stop and return
                            if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                return;

                        }
                        FullGameFound = true;
                        //OutPut.Append("\r\nLeaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());
                        ClearAllTablesHeuristicsAndMore(Order);

                        InitiateAStarGreedyt(0, ii, jj, a, CloneATable(Table), Order, false, false, LeafAStarGreedy);//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref double LessLess
                        for (int h = 0; h < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null; h++)
                        {
                            SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[h].AStarGreedyString = this;
                            SolderesOnTable[i].WinOcuuredatChiled += SumOfObjects(SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[h], Order);
                        }

                        for (int h = 0; h < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null; h++)
                            SolderesOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[h], Order);

                    }
                    else
                    {
                        //when is suitable for leafer 
                        if (Is == 2)
                        {
                            for (var iii = 0; iii < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[iii].TableList != null && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[iii].TableList.Count > 0; iii++)
                            {
                                Object OOOO = new Object();
                                lock (OOOO)
                                {
                                    FirstTraversalTree = false;


                                    //when search finished stop and return
                                    if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                        return;

                                }
                                //OutPut.Append("\r\nAStarGreedy traversal to Leaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());

                                //ThinkingQuantumChess.NumbersOfAllNode++;
                                SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[iii].FoundOfLeafDepenOfKindFullGame(SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[iii].TableList[0], Order * -1, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy++);
                                SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[iii].AStarGreedyString = this;
                            }
                            for (int h = 0; h < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null; h++)
                                SolderesOnTable[i].WinOcuuredatChiled += SumOfObjects(SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[h], Order);
                            for (int h = 0; h < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null; h++)
                                SolderesOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[h], Order);

                        }
                        else if (Is == 3)//when deeper is suitable and  computational not
                        {
                            Object OOOO = new Object();
                            lock (OOOO)
                            {

                                //when search finished stop and return
                                if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                    return;

                            }
                            //OutPut.Append("\r\nFull Game traversal to Leaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());

                            Object O1 = new Object();
                            lock (O1)
                            {
                                int Ord = Order, ii1 = ii, jj1 = jj, i1 = i, j1 = j;

                                ClearAllTablesHeuristicsAndMore(Order);

                                InitiateAStarGreedyt(0, ii, jj, a, CloneATable(Table), Order, false, false, LeafAStarGreedy);//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref double LessLess

                                for (int h = 0; h < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null; h++)
                                {
                                    SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[h].AStarGreedyString = this;
                                    SolderesOnTable[i].WinOcuuredatChiled += SumOfObjects(SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[h], Order);
                                }
                                for (int h = 0; h < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null; h++)
                                    SolderesOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[h], Order);
                            }

                        }
                        else//otherwise
                        {
                            Object OOOO = new Object();
                            lock (OOOO)
                            {

                                //when search finished stop and return
                                if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                    return;

                            }
                            Object OO1 = new Object();
                            lock (OO1)
                            {
                                FullGameFound = true;

                                iAStarGreedy++;
                                a = Color.Gray;
                                if (Order == -1)
                                    a = Color.Brown;


                                Object OOO = new Object();
                                lock (OOO)
                                {
                                    FirstTraversalTree = false;

                                    SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Clear();
                                    //when search finished stop and return
                                    if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                        return;

                                }
                                //OutPut.Append("\r\nAStarGreedy traversal to Leaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());

                                //ThinkingQuantumChess.NumbersOfAllNode++;
                                this.FullGameThinkingQuantumTree(Order, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy);

                                //Initiate(ii, jj, a, CloneATable(Table), Order, false, false,LeafAStarGreedy);
                            }

                        }
                    }
                }
            }
        }
        //deeper leaf found 
        public void FoundOfLeafDepenOfKindFullGameElepahnt(Color a, ref bool FullGameFound, int[,] Table, int Order, int iAStarGreedy, int ii, int jj, int i, int jjj, bool FOUND, int LeafAStarGreedy)
        {
            Object P = new Object();
            lock (P)
            {
                for (var j = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && j < ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant != null //&& ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null
            ; j++)
                {
                    Object OOOOO = new Object();
                    lock (OOOOO)
                    {

                        if (IsSupHuTrue(i, j, 0, 2))
                            continue;
                        //when search finished stop and return
                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                            return;


                    }
                    //determine about validity of list on current and deeper return true when successfull
                    bool IA = IsNonValidityAllTablesHeuristicsAndMore(2, Order, i, j);

                    //determine about situation of deeper against other lists computation in 4 state
                    int Is = IsSuitableForInitiation(i, j, 2);

                    if (!IA)
                        Is = 4;


                    //when is suitable for computational operation on lists
                    if (Is == 4)
                    {
                        Object OOOO = new Object();
                        lock (OOOO)
                        {

                            //when search finished stop and return
                            if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                return;

                        }
                        FullGameFound = true;
                        //OutPut.Append("\r\nLeaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());
                        ClearAllTablesHeuristicsAndMore(Order);

                        InitiateAStarGreedyt(0, ii, jj, a, CloneATable(Table), Order, false, false, LeafAStarGreedy);//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref double LessLess
                        for (int h = 0; h < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null; h++)
                        {
                            ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[h].AStarGreedyString = this;
                            ElephantOnTable[i].WinOcuuredatChiled += SumOfObjects(ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[h], Order);
                        }
                        for (int h = 0; h < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null; h++)
                            ElephantOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[h], Order);
                    }
                    else
                    {
                        //when is suitable for leafer 
                        if (Is == 2)
                        {
                            for (var iii = 0; iii < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[iii].TableList != null && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[iii].TableList.Count > 0; iii++)
                            {
                                Object OOOO = new Object();
                                lock (OOOO)
                                {
                                    FirstTraversalTree = false;

                                    //when search finished stop and return
                                    if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                        return;

                                }
                                //OutPut.Append("\r\nAStarGreedy traversal to Leaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());

                                //ThinkingQuantumChess.NumbersOfAllNode++;
                                ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[iii].FoundOfLeafDepenOfKindFullGame(ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[iii].TableList[0], Order * -1, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy++);
                                ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[iii].AStarGreedyString = this;
                            }

                            for (int h = 0; h < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null; h++)
                                ElephantOnTable[i].WinOcuuredatChiled += SumOfObjects(ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[h], Order);
                            for (int h = 0; h < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null; h++)
                                ElephantOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[h], Order);

                        }
                        else if (Is == 3)//when is suitable for deeper
                        {
                            Object OOOO = new Object();
                            lock (OOOO)
                            {

                                //when search finished stop and return
                                if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                    return;

                            }
                            //OutPut.Append("\r\nFull Game traversal to Leaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());

                            Object O1 = new Object();
                            lock (O1)
                            {
                                int Ord = Order, ii1 = ii, jj1 = jj, i1 = i, j1 = j;
                                ClearAllTablesHeuristicsAndMore(Order);

                                InitiateAStarGreedyt(0, ii, jj, a, CloneATable(Table), Order, false, false, LeafAStarGreedy);//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref double LessLess

                                for (int h = 0; h < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null; h++)
                                {
                                    ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[h].AStarGreedyString = this;
                                    ElephantOnTable[i].WinOcuuredatChiled += SumOfObjects(ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[h], Order);
                                }

                                for (int h = 0; h < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null; h++)
                                    ElephantOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[h], Order);
                            }

                        }
                        else//otherwise
                        {
                            Object OOOO = new Object();
                            lock (OOOO)
                            {

                                //when search finished stop and return
                                if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                    return;

                            }
                            Object OO1 = new Object();
                            lock (OO1)
                            {
                                iAStarGreedy++;
                                a = Color.Gray;
                                if (Order == -1)
                                    a = Color.Brown;
                                ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Clear();
                                this.FullGameThinkingQuantumTree(Order, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy);
                                //Initiate(ii, jj, a, CloneATable(Table), Order, false, false,LeafAStarGreedy);
                            }

                        }
                    }

                }
            }
        }
        //deeper leaf found 
        public void FoundOfLeafDepenOfKindFullGameHourse(Color a, ref bool FullGameFound, int[,] Table, int Order, int iAStarGreedy, int ii, int jj, int i, int jjj, bool FOUND, int LeafAStarGreedy)
        {
            Object P = new Object();
            lock (P)
            {
                for (var j = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && j < HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse != null //&& HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null
           ; j++)
                {
                    Object OOOOO = new Object();
                    lock (OOOOO)
                    {

                        if (IsSupHuTrue(i, j, 0, 3))
                            continue;
                        //when search finished stop and return
                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                            return;

                    }
                    //determine about validity of list on current and deeper return true when successfull
                    bool IA = IsNonValidityAllTablesHeuristicsAndMore(3, Order, i, j);

                    //determine about situation of deeper against other lists computation in 4 state
                    int Is = IsSuitableForInitiation(i, j, 3);

                    if (!IA)
                        Is = 4;


                    //when is suitable for computational operation on lists
                    if (Is == 4)
                    {
                        Object OOOO = new Object();
                        lock (OOOO)
                        {

                            //when search finished stop and return
                            if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                return;

                        }
                        FullGameFound = true;
                        //OutPut.Append("\r\nLeaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());
                        ClearAllTablesHeuristicsAndMore(Order);

                        InitiateAStarGreedyt(0, ii, jj, a, CloneATable(Table), Order, false, false, LeafAStarGreedy);//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref double LessLess
                        for (int h = 0; h < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null; h++)
                        {
                            HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[h].AStarGreedyString = this;
                            HoursesOnTable[i].WinOcuuredatChiled += SumOfObjects(HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[h], Order);
                        }

                        for (int h = 0; h < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null; h++)
                            HoursesOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[h], Order);
                    }
                    else
                    {
                        //when is suitable for leafer 
                        if (Is == 2)
                        {
                            for (var iii = 0; iii < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[iii].TableList != null && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[iii].TableList.Count > 0; iii++)
                            {
                                Object OOOO = new Object();
                                lock (OOOO)
                                {
                                    FirstTraversalTree = false;

                                    //when search finished stop and return
                                    if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                        return;

                                }
                                //OutPut.Append("\r\nAStarGreedy traversal to Leaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());

                                //ThinkingQuantumChess.NumbersOfAllNode++;
                                HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[iii].FoundOfLeafDepenOfKindFullGame(HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[iii].TableList[0], Order * -1, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy++);
                                HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[iii].AStarGreedyString = this;
                            }

                            for (int h = 0; h < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null; h++)
                                HoursesOnTable[i].WinOcuuredatChiled += SumOfObjects(HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[h], Order);
                            for (int h = 0; h < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null; h++)
                                HoursesOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[h], Order);

                        }
                        else if (Is == 3)//when is suitable for deeper
                        {
                            Object OOOO = new Object();
                            lock (OOOO)
                            {

                                //when search finished stop and return
                                if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                    return;

                            }
                            //OutPut.Append("\r\nFull Game traversal to Leaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());

                            Object O1 = new Object();
                            lock (O1)
                            {

                                ClearAllTablesHeuristicsAndMore(Order);

                                InitiateAStarGreedyt(0, ii, jj, a, CloneATable(Table), Order, false, false, LeafAStarGreedy);//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref double LessLess

                                for (int h = 0; h < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null; h++)
                                {
                                    HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[h].AStarGreedyString = this;
                                    HoursesOnTable[i].WinOcuuredatChiled += SumOfObjects(HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[h], Order);
                                }
                                for (int h = 0; h < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null; h++)
                                    HoursesOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[h], Order);
                            }

                        }
                        else//otherwise
                        {
                            Object OOOO = new Object();
                            lock (OOOO)
                            {

                                //when search finished stop and return
                                if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                    return;

                            }

                            Object OO1 = new Object();
                            lock (OO1)
                            {
                                int Ord = Order, iAStarGreedy1 = 0, ii1 = ii, jj1 = jj, i1 = i, j1 = j;
                                a = Color.Gray;
                                if (Order == -1)
                                    a = Color.Brown;
                                HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Clear();
                                this.FullGameThinkingQuantumTree(Ord, iAStarGreedy1, ii1, jj1, i1, j1, false, LeafAStarGreedy);
                                //Initiate(ii, jj, a, CloneATable(Table), Order, false, false,LeafAStarGreedy);
                            }

                        }
                    }




                }
            }
        }
        //deeper leaf found 
        public void FoundOfLeafDepenOfKindFullGameCastle(Color a, ref bool FullGameFound, int[,] Table, int Order, int iAStarGreedy, int ii, int jj, int i, int jjj, bool FOUND, int LeafAStarGreedy)
        {
            Object P = new Object();
            lock (P)
            {
                for (var j = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && j < CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count //&& CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle != null
                                  ; j++)
                {
                    Object OOOOO = new Object();
                    lock (OOOOO)
                    {

                        if (IsSupHuTrue(i, j, 0, 4))
                            continue;
                        //when search finished stop and return
                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                            return;

                    }
                    //determine about validity of list on current and deeper return true when successfull
                    bool IA = IsNonValidityAllTablesHeuristicsAndMore(4, Order, i, j);


                    //determine about situation of deeper against other lists computation in 4 state
                    int Is = IsSuitableForInitiation(i, j, 4);

                    if (!IA)
                        Is = 4;

                    //when is suitable for computational operation on lists
                    if (Is == 4)
                    {
                        Object OOOO = new Object();
                        lock (OOOO)
                        {

                            //when search finished stop and return
                            if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                return;

                        }
                        FullGameFound = true;
                        //OutPut.Append("\r\nLeaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());
                        ClearAllTablesHeuristicsAndMore(Order);

                        InitiateAStarGreedyt(0, ii, jj, a, CloneATable(Table), Order, false, false, LeafAStarGreedy);//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref double LessLess
                        for (int h = 0; h < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy != null; h++)
                        {
                            CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[h].AStarGreedyString = this;
                            CastlesOnTable[i].WinOcuuredatChiled += SumOfObjects(CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[h], Order);
                        }

                        for (int h = 0; h < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy != null; h++)
                            CastlesOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[h], Order);
                    }
                    else
                    {
                        //when is suitable for deeper

                        if (Is == 2)
                        {
                            for (var iii = 0; iii < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[iii].TableList != null && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[iii].TableList.Count > 0; iii++)
                            {
                                Object OOOO = new Object();
                                lock (OOOO)
                                {
                                    FirstTraversalTree = false;

                                    //when search finished stop and return
                                    if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                        return;

                                }
                                //OutPut.Append("\r\nAStarGreedy traversal to Leaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());

                                //ThinkingQuantumChess.NumbersOfAllNode++;
                                CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[iii].FoundOfLeafDepenOfKindFullGame(CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[iii].TableList[0], Order * -1, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy++);
                                CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[iii].AStarGreedyString = this;

                            }

                            for (int h = 0; h < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy != null; h++)
                                CastlesOnTable[i].WinOcuuredatChiled += SumOfObjects(CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[h], Order);
                            for (int h = 0; h < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy != null; h++)
                                CastlesOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[h], Order);

                        }
                        else if (Is == 3)  //when is suitable for leafer 
                        {
                            Object OOOO = new Object();
                            lock (OOOO)
                            {

                                //when search finished stop and return
                                if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                    return;

                            }
                            //OutPut.Append("\r\nFull Game traversal to Leaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());

                            Object O1 = new Object();
                            lock (O1)
                            {
                                ClearAllTablesHeuristicsAndMore(Order);

                                InitiateAStarGreedyt(0, ii, jj, a, CloneATable(Table), Order, false, false, LeafAStarGreedy);//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref double LessLess

                                for (int h = 0; h < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy != null; h++)
                                {
                                    CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[h].AStarGreedyString = this;
                                    CastlesOnTable[i].WinOcuuredatChiled += SumOfObjects(CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[h], Order);
                                }
                                for (int h = 0; h < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy != null; h++)
                                    CastlesOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[h], Order);
                            }

                        }
                        else//otherwise
                        {
                            Object OOOO = new Object();
                            lock (OOOO)
                            {

                                //when search finished stop and return
                                if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                    return;

                            }
                            Object OO1 = new Object();
                            lock (OO1)
                            {
                                FullGameFound = true;

                                iAStarGreedy++;
                                a = Color.Gray;
                                if (Order == -1)
                                    a = Color.Brown;
                                int Ord = Order, iAStarGreedy1 = 0, ii1 = ii, jj1 = jj, i1 = i, j1 = j;
                                CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Clear();

                                this.FullGameThinkingQuantumTree(Ord, iAStarGreedy1, ii1, jj1, i1, j1, false, LeafAStarGreedy);
                                //Initiate(ii, jj, a, CloneATable(Table), Order, false, false,LeafAStarGreedy);
                            }

                        }
                    }


                }
            }
        }
        //deeper leaf found 
        public void FoundOfLeafDepenOfKindFullGameMinister(Color a, ref bool FullGameFound, int[,] Table, int Order, int iAStarGreedy, int ii, int jj, int i, int jjj, bool FOUND, int LeafAStarGreedy)
        {
            Object P = new Object();
            lock (P)
            {
                for (var j = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && j < MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister != null //&& MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null
                  ; j++)
                {
                    Object OOOOO = new Object();
                    lock (OOOOO)
                    {

                        if (IsSupHuTrue(i, j, 0, 5))
                            continue;
                        //when search finished stop and return
                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                            return;

                    }
                    //determine about validity of list on current and deeper return true when successfull
                    bool IA = IsNonValidityAllTablesHeuristicsAndMore(5, Order, i, j);


                    //determine about situation of deeper against other lists computation in 4 state
                    int Is = IsSuitableForInitiation(i, j, 5);

                    if (!IA)
                        Is = 4;

                    //when is suitable for computational operation on lists
                    if (Is == 4)
                    {
                        Object OOOO = new Object();
                        lock (OOOO)
                        {

                            //when search finished stop and return
                            if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                return;

                        }
                        FullGameFound = true;
                        //OutPut.Append("\r\nLeaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());
                        ClearAllTablesHeuristicsAndMore(Order);

                        InitiateAStarGreedyt(0, ii, jj, a, CloneATable(Table), Order, false, false, LeafAStarGreedy);//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref double LessLess
                        for (int h = 0; h < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null; h++)
                        {
                            MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[h].AStarGreedyString = this;
                            MinisterOnTable[i].WinOcuuredatChiled += SumOfObjects(MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[h], Order);
                        }
                        for (int h = 0; h < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null; h++)
                            MinisterOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[h], Order);
                    }
                    else
                    {
                        //when is suitable for leafer 
                        if (Is == 2)
                        {
                            for (var iii = 0; iii < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[iii].TableList != null && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[iii].TableList.Count > 0; iii++)
                            {
                                Object OOOO = new Object();
                                lock (OOOO)
                                {
                                    FirstTraversalTree = false;

                                    //when search finished stop and return
                                    if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                        return;

                                }
                                //OutPut.Append("\r\nAStarGreedy traversal to Leaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());

                                //ThinkingQuantumChess.NumbersOfAllNode++;
                                MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[iii].FoundOfLeafDepenOfKindFullGame(MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[iii].TableList[0], Order * -1, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy++);
                                MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[iii].AStarGreedyString = this;

                            }

                            for (int h = 0; h < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null; h++)
                                MinisterOnTable[i].WinOcuuredatChiled += SumOfObjects(MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[h], Order);
                            for (int h = 0; h < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null; h++)
                                MinisterOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[h], Order);

                        }
                        else if (Is == 3)//when is suitable for deeper
                        {
                            Object OOOO = new Object();
                            lock (OOOO)
                            {

                                //when search finished stop and return
                                if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                    return;

                            }
                            //OutPut.Append("\r\nFull Game traversal to Leaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());

                            ClearAllTablesHeuristicsAndMore(Order);

                            InitiateAStarGreedyt(0, ii, jj, a, CloneATable(Table), Order, false, false, LeafAStarGreedy);//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref double LessLess

                            for (int h = 0; h < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null; h++)
                            {
                                MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[h].AStarGreedyString = this;
                                MinisterOnTable[i].WinOcuuredatChiled += SumOfObjects(MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[h], Order);
                            }

                            for (int h = 0; h < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null; h++)
                                MinisterOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[h], Order);


                        }
                        else//otherwise
                        {
                            Object OOOO = new Object();
                            lock (OOOO)
                            {

                                //when search finished stop and return
                                if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                    return;

                            }
                            Object OO1 = new Object();
                            lock (OO1)
                            {
                                FullGameFound = true;

                                iAStarGreedy++;
                                a = Color.Gray;
                                if (Order == -1)
                                    a = Color.Brown;
                                MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Clear();
                                this.FullGameThinkingQuantumTree(Order, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy);
                                //Initiate(ii, jj, a, CloneATable(Table), Order, false, false,LeafAStarGreedy);
                            }

                        }
                    }
                }
            }
        }
        //deeper leaf found 
        public void FoundOfLeafDepenOfKindFullGameKing(Color a, ref bool FullGameFound, int[,] Table, int Order, int iAStarGreedy, int ii, int jj, int i, int jjj, bool FOUND, int LeafAStarGreedy)
        {
            Object P = new Object();
            lock (P)
            {
                for (var j = 0; KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum != null && KingOnTable[i].KingThinkingQuantum[0] != null && j < KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count && KingOnTable[i].KingThinkingQuantum[0].TableListKing != null //&& KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null
           ; j++)
                {
                    Object OOOOO = new Object();
                    lock (OOOOO)
                    {

                        if (IsSupHuTrue(i, j, 0, 6))
                            continue;
                        //when search finished stop and return
                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                            return;

                    }

                    //determine about validity of list on current and deeper return true when successfull
                    bool IA = IsNonValidityAllTablesHeuristicsAndMore(6, Order, i, j);


                    //determine about situation of deeper against other lists computation in 4 state
                    int Is = IsSuitableForInitiation(i, j, 6);


                    if (!IA)
                        Is = 4;

                    //when is suitable for computational operation on lists
                    if (Is == 4)
                    {
                        Object OOOO = new Object();
                        lock (OOOO)
                        {

                            //when search finished stop and return
                            if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                return;

                        }
                        FullGameFound = true;
                        //OutPut.Append("\r\nLeaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());
                        ClearAllTablesHeuristicsAndMore(Order);

                        InitiateAStarGreedyt(0, ii, jj, a, CloneATable(Table), Order, false, false, LeafAStarGreedy);//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref double LessLess
                        for (int h = 0; h < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null; h++)
                        {
                            KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[h].AStarGreedyString = this;
                            KingOnTable[i].WinOcuuredatChiled += SumOfObjects(KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[h], Order);
                        }
                        for (int h = 0; h < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null; h++)
                            KingOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[h], Order);
                    }
                    else
                    {
                        //when is suitable for leafer 
                        if (Is == 2)
                        {
                            for (var iii = 0; iii < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[iii].TableList != null && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[iii].TableList.Count > 0; iii++)
                            {
                                Object OOOO = new Object();
                                lock (OOOO)
                                {
                                    FirstTraversalTree = false;


                                    //when search finished stop and return
                                    if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                        return;

                                }
                                //OutPut.Append("\r\nAStarGreedy traversal to Leaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());

                                //ThinkingQuantumChess.NumbersOfAllNode++;
                                KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[iii].FoundOfLeafDepenOfKindFullGame(KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[iii].TableList[0], Order * -1, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy++);
                                KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[iii].AStarGreedyString = this;
                            }

                            for (int h = 0; h < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null; h++)
                                KingOnTable[i].WinOcuuredatChiled += SumOfObjects(KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[h], Order);
                            for (int h = 0; h < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null; h++)
                                KingOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[h], Order);


                        }
                        else if (Is == 3)//when is suitable for deeper
                        {
                            Object OOOO = new Object();
                            lock (OOOO)
                            {

                                //when search finished stop and return
                                if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                    return;

                            }
                            //OutPut.Append("\r\nFull Game traversal to Leaf Tree Creation is " + LeafAStarGreedy.ToString() + "at AStarGreedy " + iAStarGreedy.ToString());

                            Object O1 = new Object();
                            lock (O1)
                            {
                                int Ord = Order, ii1 = ii, jj1 = jj, i1 = i, j1 = j;

                                ClearAllTablesHeuristicsAndMore(Order);

                                InitiateAStarGreedyt(0, ii, jj, a, CloneATable(Table), Order, false, false, LeafAStarGreedy);//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref double LessLess

                                for (int h = 0; h < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null; h++)
                                {
                                    KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[h].AStarGreedyString = this;
                                    KingOnTable[i].WinOcuuredatChiled += SumOfObjects(KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[h], Order);
                                }
                                for (int h = 0; h < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null; h++)
                                    KingOnTable[i].LoseOcuuredatChiled += SumMinusOfObjects(KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[h], Order);
                            }

                        }
                        else//otherwise
                        {
                            Object OOOO = new Object();
                            lock (OOOO)
                            {

                                //when search finished stop and return
                                if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                    return;

                            }

                            Object OO1 = new Object();
                            lock (OO1)
                            {
                                iAStarGreedy++;
                                a = Color.Gray;
                                if (Order == -1)
                                    a = Color.Brown;
                                KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Clear();
                                this.FullGameThinkingQuantumTree(Order, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy);
                                //Initiate(ii, jj, a, CloneATable(Table), Order, false, false,LeafAStarGreedy);
                            }

                        }
                    }

                }
            }
        }
        public void FoundOfLeafDepenOfKindFullGame(int[,] Table, int Order, int iAStarGreedy, int ii, int jj, int ik, int jjj, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a1 = new Object();
            lock (a1)
            {
                Object Omm = new Object();
                lock (Omm)
                {
                    Object OOOO = new Object();
                    lock (OOOO)
                    {

                        //when search finished stop and return
                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                            return;

                    }
                }
                bool FullGameFound = false;
                Object O = new Object();
                lock (O)
                {
                    //gray
                    if (Order == 1)
                    {
                        //parallel full game all deeper foundation
                        Color a = Color.Gray;
                        var output = Task.Factory.StartNew(() =>
                        {
                            Parallel.Invoke(() =>
                            {
                                //soldier
                                for (var i = 0; i < SodierMidle; i++)
                                {
                                    Object OOOO = new Object();
                                    lock (OOOO)
                                    {
                                        //when search finished stop and return
                                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                            return;

                                    }
                                    Object P = new Object();
                                    lock (P)
                                    {
                                        FoundOfLeafDepenOfKindFullGameSoldeir(a, ref FullGameFound, Table, Order, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy);
                                    }
                                }
                            }, () =>
                            {
                                //elephant
                                for (var i = 0; i < ElefantMidle; i++)
                                {
                                    Object OOOO = new Object();
                                    lock (OOOO)
                                    {

                                        //when search finished stop and return
                                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                            return;

                                    }
                                    Object P = new Object();
                                    lock (P)
                                    {
                                        FoundOfLeafDepenOfKindFullGameElepahnt(a, ref FullGameFound, Table, Order, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy);
                                    }
                                }
                            }, () =>
                            {
                                //hourse
                                for (var i = 0; i < HourseMidle; i++)
                                {
                                    Object OOOO = new Object();
                                    lock (OOOO)
                                    {

                                        //when search finished stop and return
                                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                            return;

                                    }
                                    Object P = new Object();
                                    lock (P)
                                    {
                                        FoundOfLeafDepenOfKindFullGameHourse(a, ref FullGameFound, Table, Order, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy);
                                    }
                                }
                            }, () =>
                            {
                                //Castle
                                for (var i = 0; i < CastleMidle; i++)
                                {
                                    Object OOOO = new Object();
                                    lock (OOOO)
                                    {

                                        //when search finished stop and return
                                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                            return;

                                    }
                                    Object P = new Object();
                                    lock (P)
                                    {
                                        FoundOfLeafDepenOfKindFullGameCastle(a, ref FullGameFound, Table, Order, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy);
                                    }
                                }
                            }, () =>
                            {
                                //minister
                                for (var i = 0; i < MinisterMidle; i++)
                                {
                                    Object OOOO = new Object();
                                    lock (OOOO)
                                    {

                                        //when search finished stop and return
                                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                            return;

                                    }
                                    Object P = new Object();
                                    lock (P)
                                    {
                                        FoundOfLeafDepenOfKindFullGameMinister(a, ref FullGameFound, Table, Order, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy);
                                    }
                                }
                            }, () =>
                            {
                                //king
                                for (var i = 0; i < KingMidle; i++)
                                {
                                    Object OOOO = new Object();
                                    lock (OOOO)
                                    {

                                        //when search finished stop and return
                                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                            return;

                                    }
                                    Object P = new Object();
                                    lock (P)
                                    {
                                        FoundOfLeafDepenOfKindFullGameKing(a, ref FullGameFound, Table, Order, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy);
                                    }
                                }
                            });
                        });
                        output.Wait();


                    }
                    else//brown
                    {
                        Color a = Color.Brown;
                        var output = Task.Factory.StartNew(() =>
                        {
                            Parallel.Invoke(() =>
                            {
                                //soldier
                                for (var i = SodierMidle; i < SodierHigh; i++)
                                {
                                    Object OOOO = new Object();
                                    lock (OOOO)
                                    {

                                        //when search finished stop and return
                                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                            return;

                                    }
                                    Object P = new Object();
                                    lock (P)
                                    {
                                        FoundOfLeafDepenOfKindFullGameSoldeir(a, ref FullGameFound, Table, Order, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy);
                                    }
                                }
                            }, () =>
                            {
                                //elephant
                                for (var i = ElefantMidle; i < ElefantHigh; i++)
                                {
                                    Object OOOO = new Object();
                                    lock (OOOO)
                                    {

                                        //when search finished stop and return
                                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                            return;

                                    }
                                    Object P = new Object();
                                    lock (P)
                                    {
                                        FoundOfLeafDepenOfKindFullGameElepahnt(a, ref FullGameFound, Table, Order, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy);
                                    }
                                }
                            }, () =>
                            {
                                //hourse
                                for (var i = HourseMidle; i < HourseHight; i++)
                                {
                                    Object OOOO = new Object();
                                    lock (OOOO)
                                    {

                                        //when search finished stop and return
                                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                            return;

                                    }
                                    Object P = new Object();
                                    lock (P)
                                    {
                                        FoundOfLeafDepenOfKindFullGameHourse(a, ref FullGameFound, Table, Order, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy);
                                    }
                                }
                            }, () =>
                            {
                                //Castle
                                for (var i = CastleMidle; i < CastleHigh; i++)
                                {
                                    Object OOOO = new Object();
                                    lock (OOOO)
                                    {

                                        //when search finished stop and return
                                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                            return;

                                    }
                                    Object P = new Object();
                                    lock (P)
                                    {
                                        FoundOfLeafDepenOfKindFullGameCastle(a, ref FullGameFound, Table, Order, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy);
                                    }
                                }
                            }, () =>
                            {
                                //minister
                                for (var i = MinisterMidle; i < MinisterHigh; i++)
                                {
                                    Object OOOO = new Object();
                                    lock (OOOO)
                                    {

                                        //when search finished stop and return
                                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                            return;

                                    }
                                    Object P = new Object();
                                    lock (P)
                                    {
                                        FoundOfLeafDepenOfKindFullGameMinister(a, ref FullGameFound, Table, Order, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy);
                                    }
                                }
                            }, () =>
                            {
                                //king
                                for (var i = KingMidle; i < KingHigh; i++)
                                {
                                    Object OOOO = new Object();
                                    lock (OOOO)
                                    {

                                        //when search finished stop and return
                                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                                            return;

                                    }
                                    Object P = new Object();
                                    lock (P)
                                    {
                                        FoundOfLeafDepenOfKindFullGameKing(a, ref FullGameFound, Table, Order, iAStarGreedy, ii, jj, i, jjj, FOUND, LeafAStarGreedy);
                                    }
                                }
                            });
                        });
                        output.Wait();
                    }
                }
                //when not occured untile now computational op
                if (!FullGameFound)
                {
                    Object O1 = new Object();
                    lock (O1)
                    {
                        //when search finished stop and return
                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                            return;

                        iAStarGreedy++;
                        Color a = Color.Gray;
                        if (Order == -1)
                            a = Color.Brown;
                        InitiateAStarGreedyt(0, ii, jj, a, CloneATable(Table), Order, false, false, LeafAStarGreedy);//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref double LessLess
                                                                                                                     //Initiate(ii, jj, a, CloneATable(Table), Order, false, false,LeafAStarGreedy);
                    }
                }
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundOfLeafDepenOfKindFullGame:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return;
            }
        }
        //for regard all branches of leaf victory node
        public void MakeRegardAllCheckMateBranches(AllDraw A, int Order)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a = new Object();
            lock (a)
            {

                int COrder = Order;
                int CDummy = ChessRules.CurrentOrder;

                //gray
                if (Order == 1)
                {
                    //soldier
                    for (var i = 0; i < SodierMidle; i++)
                        for (var j = 0; A.SolderesOnTable != null && SolderesOnTable[i] != null && A.SolderesOnTable[i].SoldierThinkingQuantum[0] != null && j < A.SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {

                            //make regard
                            A.SolderesOnTable[i].SoldierThinkingQuantum[0].PenaltyRegardListSolder[i].LearningAlgorithmRegard();

                            Order *= -1; ChessRules.CurrentOrder *= -1;
                            //deeper call
                            for (var ii = 0; A.SolderesOnTable != null && SolderesOnTable[i] != null && A.SolderesOnTable[i].SoldierThinkingQuantum[0] != null && ii < A.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakeRegardAllCheckMateBranches(A.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[ii], Order);


                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //elephant
                    for (var i = 0; i < ElefantMidle; i++)
                        for (var j = 0; A.ElephantOnTable != null && ElephantOnTable[i] != null && A.ElephantOnTable[i].ElefantThinkingQuantum[0] != null && j < A.ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {


                            //make regard
                            A.ElephantOnTable[i].ElefantThinkingQuantum[0].PenaltyRegardListElefant[j].LearningAlgorithmRegard();


                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            //deeper call
                            for (var ii = 0; A.ElephantOnTable != null && ElephantOnTable[i] != null && A.ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ii < A.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakeRegardAllCheckMateBranches(A.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //hourse
                    for (var i = 0; i < HourseMidle; i++)
                        for (var j = 0; A.HoursesOnTable != null && HoursesOnTable[i] != null && A.HoursesOnTable[i].HourseThinkingQuantum[0] != null && j < A.HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {

                            //make regard
                            A.HoursesOnTable[i].HourseThinkingQuantum[0].PenaltyRegardListHourse[j].LearningAlgorithmRegard();


                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            //deeper call
                            for (var ii = 0; A.HoursesOnTable != null && HoursesOnTable[i] != null && A.HoursesOnTable[i].HourseThinkingQuantum[0] != null && ii < A.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakeRegardAllCheckMateBranches(A.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //Castle
                    for (var i = 0; i < CastleMidle; i++)
                        for (var j = 0; A.CastlesOnTable != null && CastlesOnTable[i] != null && A.CastlesOnTable[i].CastleThinkingQuantum[0] != null && j < A.CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {

                            //make regard
                            A.CastlesOnTable[i].CastleThinkingQuantum[0].PenaltyRegardListCastle[j].LearningAlgorithmRegard();

                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            //deeper call
                            for (var ii = 0; A.CastlesOnTable != null && CastlesOnTable[i] != null && A.CastlesOnTable[i].CastleThinkingQuantum[0] != null && ii < A.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakeRegardAllCheckMateBranches(A.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //minister
                    for (var i = 0; i < MinisterMidle; i++)
                        for (var j = 0; A.MinisterOnTable != null && MinisterOnTable[i] != null && A.MinisterOnTable[i].MinisterThinkingQuantum[0] != null && j < A.MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {

                            //make regard
                            A.MinisterOnTable[i].MinisterThinkingQuantum[0].PenaltyRegardListMinister[j].LearningAlgorithmRegard();


                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            //deeper call
                            for (var ii = 0; A.MinisterOnTable != null && MinisterOnTable[i] != null && A.MinisterOnTable[i].MinisterThinkingQuantum[0] != null && ii < A.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakeRegardAllCheckMateBranches(A.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //king
                    for (var i = 0; i < KingMidle; i++)
                        for (var j = 0; A.KingOnTable != null && KingOnTable[i] != null && A.KingOnTable[i].KingThinkingQuantum[0] != null && j < A.KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {

                            //make regard
                            A.KingOnTable[i].KingThinkingQuantum[0].PenaltyRegardListKing[j].LearningAlgorithmRegard();

                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            //deeper call
                            for (var ii = 0; A.KingOnTable != null && KingOnTable[i] != null && A.KingOnTable[i].KingThinkingQuantum[0] != null && ii < A.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakeRegardAllCheckMateBranches(A.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                }
                else//brown
                {
                    //soldier
                    for (var i = SodierMidle; i < SodierHigh; i++)
                        for (var j = 0; A.SolderesOnTable != null && SolderesOnTable[i] != null && A.SolderesOnTable[i].SoldierThinkingQuantum[0] != null && j < A.SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                        {

                            //make regard
                            A.SolderesOnTable[i].SoldierThinkingQuantum[0].PenaltyRegardListSolder[i].LearningAlgorithmRegard();

                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            //deeper call
                            for (var ii = 0; A.SolderesOnTable != null && SolderesOnTable[i] != null && A.SolderesOnTable[i].SoldierThinkingQuantum[0] != null && ii < A.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakeRegardAllCheckMateBranches(A.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //elephant
                    for (var i = ElefantMidle; i < ElefantHigh; i++)
                        for (var j = 0; A.ElephantOnTable != null && ElephantOnTable[i] != null && A.ElephantOnTable[i].ElefantThinkingQuantum[0] != null && j < A.ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                        {

                            //make regard
                            A.ElephantOnTable[i].ElefantThinkingQuantum[0].PenaltyRegardListElefant[j].LearningAlgorithmRegard();


                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            //deeper call
                            for (var ii = 0; A.ElephantOnTable != null && ElephantOnTable[i] != null && A.ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ii < A.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakeRegardAllCheckMateBranches(A.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //hourse
                    for (var i = HourseMidle; i < HourseHight; i++)
                        for (var j = 0; A.HoursesOnTable != null && HoursesOnTable[i] != null && A.HoursesOnTable[i].HourseThinkingQuantum[0] != null && j < A.HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                        {

                            //make regard
                            A.HoursesOnTable[i].HourseThinkingQuantum[0].PenaltyRegardListHourse[j].LearningAlgorithmRegard();


                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            //deeper call
                            for (var ii = 0; A.HoursesOnTable != null && HoursesOnTable[i] != null && A.HoursesOnTable[i].HourseThinkingQuantum[0] != null && ii < A.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakeRegardAllCheckMateBranches(A.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //Castle
                    for (var i = CastleMidle; i < CastleHigh; i++)
                        for (var j = 0; A.CastlesOnTable != null && CastlesOnTable[i] != null && A.CastlesOnTable[i].CastleThinkingQuantum[0] != null && j < A.CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                        {

                            //make regard
                            A.CastlesOnTable[i].CastleThinkingQuantum[0].PenaltyRegardListCastle[j].LearningAlgorithmRegard();

                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            //deeper call
                            for (var ii = 0; A.CastlesOnTable != null && CastlesOnTable[i] != null && A.CastlesOnTable[i].CastleThinkingQuantum[0] != null && ii < A.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakeRegardAllCheckMateBranches(A.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //minister
                    for (var i = MinisterMidle; i < MinisterHigh; i++)
                        for (var j = 0; A.MinisterOnTable != null && MinisterOnTable[i] != null && A.MinisterOnTable[i].MinisterThinkingQuantum[0] != null && j < A.MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                        {

                            //make regard
                            A.MinisterOnTable[i].MinisterThinkingQuantum[0].PenaltyRegardListMinister[j].LearningAlgorithmRegard();

                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            //deeper call
                            for (var ii = 0; A.MinisterOnTable != null && MinisterOnTable[i] != null && A.MinisterOnTable[i].MinisterThinkingQuantum[0] != null && ii < A.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakeRegardAllCheckMateBranches(A.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                    //king
                    for (var i = KingMidle; i < MinisterHigh; i++)
                        for (var j = 0; A.KingOnTable != null && KingOnTable[i] != null && A.KingOnTable[i].KingThinkingQuantum[0] != null && j < A.KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count; j++)
                        {

                            //make regard
                            A.KingOnTable[i].KingThinkingQuantum[0].PenaltyRegardListKing[j].LearningAlgorithmRegard();

                            Order *= -1; ChessRules.CurrentOrder *= -1;

                            //deeper call
                            for (var ii = 0; A.KingOnTable != null && KingOnTable[i] != null && A.KingOnTable[i].KingThinkingQuantum[0] != null && ii < A.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; ii++)
                                MakeRegardAllCheckMateBranches(A.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[ii], Order);

                            Order = COrder; ChessRules.CurrentOrder = CDummy;
                        }
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("MakeRegardAllCheckMateBranches:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //when all branches of root is lose and close ignore of learning autamata option  
        int[,] HeuristicAStarGreadySearchPenalties(int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a1 = new Object();
            lock (a1)
            {

                ChessRules AB = null;

                int ToCheckMate = -1, ForCheckMate = -1, j, i;
                List<int> Founded = new List<int>();
                int DummyOrder = Order;
                int DummyCurrentOrder = ChessRules.CurrentOrder;
                bool AA = false;
                int Do = 0;
                int[,] TableHeuristic = new int[8, 8];
                //For Every Soldeir
                for (i = 0; i < SodierMidle; i++)
                {


                    //For Every Soldier Movments AStarGreedy.
                    for (int k = 0; k < AllDraw.SodierMovments; k++)
                        //When There is an Movment in such situation.

                        for (j = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum[k] != null && SolderesOnTable[i].SoldierThinkingQuantum[k] != null && j < SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder.Count; j++)
                        {
                            {

                                //For Penalty Reagrad Mechanisam of Current Check CheckMate Current Movments.
                                int CDummy = ChessRules.CurrentOrder;
                                int COrder = Order;

                                ChessRules.CurrentOrder *= -1;
                                Order *= -1;
                                Do = 0;
                                if (UsePenaltyRegardMechnisamT)
                                {
                                    for (int ij = 0; ij < SolderesOnTable[i].SoldierThinkingQuantum[k].AStarGreedy.Count - 1; ij++)
                                        SolderesOnTable[i].SoldierThinkingQuantum[k].AStarGreedy[ij].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, SolderesOnTable[i].SoldierThinkingQuantum[k].AStarGreedy[ij]);
                                    Order = COrder;
                                    ChessRules.CurrentOrder = CDummy;

                                    ToCheckMate = -1; ForCheckMate = -1; AA = IsToCheckMateHASLessDeeperThanForCheckMate(this, Order, ref ToCheckMate, ref ForCheckMate, 0); if (Do == -1)
                                        continue;
                                }

                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;

                                if ((SolderesOnTable[i].SoldierThinkingQuantum[k].PenaltyRegardListSolder[j].IsPenaltyAction() != 0 && SolderesOnTable[i].SoldierThinkingQuantum[k].PenaltyRegardListSolder[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((Do == 1 || AA) && UsePenaltyRegardMechnisamT) || SolderesOnTable[i].WinOcuuredatChiled >= 1 || SolderesOnTable[i].WinOcuuredatChiled >= 2 || SolderesOnTable[i].WinOcuuredatChiled >= 3)
                                {
                                    //Set Table and Heuristic Value and Syntax.
                                    Act = true;
                                    Object On = new Object();
                                    lock (On)
                                    {

                                        AllDraw.LastRowQ = SolderesOnTable[i].SoldierThinkingQuantum[k].Row;
                                        AllDraw.LastColumnQ = SolderesOnTable[i].SoldierThinkingQuantum[k].Column;
                                        AllDraw.NextRowQ = SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0];
                                        AllDraw.NextColumnQ = SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1];


                                        Less = SolderesOnTable[i].SoldierThinkingQuantum[k].NumberOfPenalties;
                                    }


                                    TableHeuristic = SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder[j];


                                    Object O = new Object();
                                    lock (O)
                                    {
                                        ThingsConverter.ActOfClickEqualTow = true;
                                    }
                                    SolderesOnTable[i].ConvertOperation(SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1], a, SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder[j], Order, false, i);
                                    int Sign = 1;
                                    if (a == Color.Brown)
                                        Sign = -1;


                                    //If there is Soldier Convert.
                                    if (SolderesOnTable[i].Convert)
                                    {

                                        if (SolderesOnTable[i].ConvertedToMinister)
                                            TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 5 * Sign;
                                        else if (SolderesOnTable[i].ConvertedToCastle)
                                            TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 4 * Sign;
                                        else if (SolderesOnTable[i].ConvertedToHourse)
                                            TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 3 * Sign;
                                        else if (SolderesOnTable[i].ConvertedToElefant)
                                            TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 2 * Sign;




                                    }
                                    RegardOccurred = true;
                                    continue;
                                }

                                //When There is No Movments in Such Order Enemy continue.
                                Object ol = new Object();
                                lock (ol)
                                {
                                    if (Order != AllDraw.OrderPlate)
                                        if (SolderesOnTable[i].SoldierThinkingQuantum[0].NumberOfPenalties < Less)
                                            continue;

                                    //When There is greater Heuristic Movments.
                                    if (SolderesOnTable[i].SoldierThinkingQuantum[0].NumberOfPenalties < Less)
                                    {


                                        //retrive table of current Heuristic.
                                        int[,] TableS = SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder[j];
                                        int[,] TableSS = SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder[j];

                                        //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                                        if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                                        {

                                            if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                                                continue;


                                        }
                                        //When there is not Penalty regard mechanism.

                                        AB = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, 1, CloneATable(TableS), Order, SolderesOnTable[i].SoldierThinkingQuantum[k].Row, SolderesOnTable[i].SoldierThinkingQuantum[k].Column);
                                        //If there is kish or kshachamaz Order.
                                        if (AB.Check(TableS, Order))
                                        {
                                            //When Order is Gray.
                                            if (Order == 1)
                                            {
                                                //Continue When is kish CheckObjectDangour and AStarGreadyFirstSearch .
                                                if (AB.CheckGray)
                                                    continue;
                                            }
                                            else
                                            {
                                                //Continue when CheckBrown and AStarGreadyFirstSearch. 
                                                if (AB.CheckBrown)
                                                    continue;
                                            }
                                        }
                                        //Sodleirs Initiate.
                                        RW1 = i;
                                        CL1 = k;
                                        Ki1 = j;
                                        RW2 = -1;
                                        CL2 = -1;
                                        Ki2 = -1;
                                        RW3 = -1;
                                        CL3 = -1;
                                        Ki3 = -1;
                                        RW4 = -1;
                                        CL4 = -1;
                                        Ki4 = -1;
                                        RW5 = -1;
                                        CL5 = -1;
                                        Ki5 = -1;
                                        RW6 = -1;
                                        CL6 = -1;
                                        Ki6 = -1;
                                        //Set Max of Soldier.
                                        MaxLess1 = (SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].NumberOfPenalties
                                            );
                                        //When Soldeirs is Greater than Others these Set Max.
                                        if (MaxLess1 > MaxLess2)
                                            MaxLess2 = -1;
                                        if (MaxLess1 > MaxLess3)
                                            MaxLess3 = -1;
                                        if (MaxLess1 > MaxLess4)
                                            MaxLess4 = -1;
                                        if (MaxLess1 > MaxLess5)
                                            MaxLess5 = -1;
                                        if (MaxLess1 > MaxLess6)
                                            MaxLess6 = -1;

                                        if (AStarGreedyi == 1)
                                        {
                                            Object O = new Object();
                                            lock (O)
                                            {
                                                if (Order == 1)
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Sodier By Bob!");

                                                }
                                                else//If Order is Brown.
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Sodier By Alice!");

                                                }
                                            }
                                            //Set Table and Heuristic Value and Syntax.
                                            Act = true;
                                            Object On = new Object();
                                            lock (On)
                                            {
                                                AllDraw.LastRowQ = SolderesOnTable[i].SoldierThinkingQuantum[k].Row;
                                                AllDraw.LastColumnQ = SolderesOnTable[i].SoldierThinkingQuantum[k].Column;
                                                AllDraw.NextRowQ = SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0];
                                                AllDraw.NextColumnQ = SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1];
                                            }

                                            Less = SolderesOnTable[i].SoldierThinkingQuantum[k].NumberOfPenalties;


                                            TableHeuristic = SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder[j];


                                            Object O1 = new Object();
                                            lock (O1)
                                            {
                                                ThingsConverter.ActOfClickEqualTow = true;
                                            }
                                            SolderesOnTable[i].ConvertOperation(SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1], a, SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder[j], Order, false, i);
                                            int Sign = 1;
                                            if (a == Color.Brown)
                                                Sign = -1;
                                            //If there is Soldier Convert.
                                            if (SolderesOnTable[i].Convert)
                                            {

                                                if (SolderesOnTable[i].ConvertedToMinister)
                                                    TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 5 * Sign;
                                                else if (SolderesOnTable[i].ConvertedToCastle)
                                                    TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 4 * Sign;
                                                else if (SolderesOnTable[i].ConvertedToHourse)
                                                    TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 3 * Sign;
                                                else if (SolderesOnTable[i].ConvertedToElefant)
                                                    TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 2 * Sign;





                                            }
                                        }


                                    }
                                    else
                                    {
                                        //Set Table and Heuristic Value and Syntax.

                                        if (AStarGreedyi == 1)
                                        {

                                            //Found of Max Non Probable Movments.
                                            Founded.Clear();
                                            int LessB = Int32.MinValue;
                                            BeginIndexFoundingMaxLessofMaxList(0, Founded, ref LessB);
                                            RW1 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0]];
                                            CL1 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 1];
                                            Ki1 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 2];
                                            if (Founded[0] != MaxSoldeirFounded)
                                                continue;
                                            Act = true;
                                            Object On = new Object();
                                            lock (On)
                                            {
                                                AllDraw.LastRowQ = SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].Row;
                                                AllDraw.LastColumnQ = SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].Column;
                                                AllDraw.NextRowQ = SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0];
                                                AllDraw.NextColumnQ = SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1];
                                            }
                                            Less = SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].ReturnHeuristic(RW1, Ki1, Order, false, ref HaveKilled);


                                            TableHeuristic = SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].TableListSolder[Ki1];


                                            Object O1 = new Object();
                                            lock (O1)
                                            {
                                                ThingsConverter.ActOfClickEqualTow = true;
                                            }
                                            SolderesOnTable[RW1].ConvertOperation(SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][0], SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][1], a, SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].TableListSolder[Ki1], Order, false, i);
                                            int Sign = 1;
                                            if (a == Color.Brown)
                                                Sign = -1;
                                            //If there is Soldier Convert.
                                            if (SolderesOnTable[RW1].Convert)
                                            {

                                                if (SolderesOnTable[RW1].ConvertedToMinister)
                                                    TableHeuristic[SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][0], SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][1]] = 5 * Sign;
                                                else if (SolderesOnTable[RW1].ConvertedToCastle)
                                                    TableHeuristic[SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][0], SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][1]] = 4 * Sign;
                                                else if (SolderesOnTable[RW1].ConvertedToHourse)
                                                    TableHeuristic[SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][0], SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][1]] = 3 * Sign;
                                                else if (SolderesOnTable[RW1].ConvertedToElefant)
                                                    TableHeuristic[SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][0], SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][1]] = 2 * Sign;





                                            }
                                            Object O = new Object();
                                            lock (O)
                                            {
                                                if (Order == 1)
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Sodier By Bob!");

                                                }
                                                else//If Order is Brown.
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Sodier By Alice!");

                                                }
                                            }
                                        }

                                    }
                                }


                            }
                        }



                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;

                }
                //Do For Remaining Objects same AS Soldeir Documentation.
                for (i = 0; i < ElefantMidle; i++)
                {
                    for (int k = 0; k < AllDraw.ElefantMovments; k++)

                        for (j = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum[k] != null && ElephantOnTable[i].ElefantThinkingQuantum[k] != null && j < ElephantOnTable[i].ElefantThinkingQuantum[k].TableListElefant.Count; j++)
                        {
                            {

                                //For Penalty Reagrad Mechanisam of Current Check CheckMate Current Movments.
                                int CDummy = ChessRules.CurrentOrder;
                                int COrder = Order;

                                ChessRules.CurrentOrder *= -1;
                                Order *= -1;
                                Do = 0;
                                if (UsePenaltyRegardMechnisamT)
                                {
                                    for (int ij = 0; ij < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count - 1; ij++)
                                        ElephantOnTable[i].ElefantThinkingQuantum[k].AStarGreedy[ij].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, ElephantOnTable[i].ElefantThinkingQuantum[k].AStarGreedy[ij]);
                                    Order = COrder;
                                    ChessRules.CurrentOrder = CDummy;
                                    ToCheckMate = -1; ForCheckMate = -1; AA = IsToCheckMateHASLessDeeperThanForCheckMate(this, Order, ref ToCheckMate, ref ForCheckMate, 0); if (Do == -1)
                                        continue;
                                }

                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                                if ((ElephantOnTable[i].ElefantThinkingQuantum[k].PenaltyRegardListElefant[j].IsPenaltyAction() != 0 && ElephantOnTable[i].ElefantThinkingQuantum[k].PenaltyRegardListElefant[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((Do == 1 || AA) && UsePenaltyRegardMechnisamT) || ElephantOnTable[i].WinOcuuredatChiled >= 1 || ElephantOnTable[i].WinOcuuredatChiled >= 2 || ElephantOnTable[i].WinOcuuredatChiled >= 3)
                                {

                                    Object On = new Object();
                                    lock (On)
                                    {
                                        AllDraw.LastRowQ = ElephantOnTable[i].ElefantThinkingQuantum[k].Row;
                                        AllDraw.LastColumnQ = ElephantOnTable[i].ElefantThinkingQuantum[k].Column;
                                        AllDraw.NextRowQ = ElephantOnTable[i].ElefantThinkingQuantum[k].RowColumnElefant[j][0];
                                        AllDraw.NextColumnQ = ElephantOnTable[i].ElefantThinkingQuantum[k].RowColumnElefant[j][1];


                                        Act = true;
                                        Less = ElephantOnTable[i].ElefantThinkingQuantum[k].NumberOfPenalties;
                                    }
                                    TableHeuristic = ElephantOnTable[i].ElefantThinkingQuantum[k].TableListElefant[j];
                                    RegardOccurred = true;
                                    continue;

                                }

                                Object ol = new Object();
                                lock (ol)
                                {
                                    //When There is No Movments in Such Order Enemy continue.
                                    if (Order != AllDraw.OrderPlate)
                                        if (ElephantOnTable[i].ElefantThinkingQuantum[0].NumberOfPenalties < Less)
                                            continue;
                                    //When There is greater Heuristic Movments.

                                    if (ElephantOnTable[i].ElefantThinkingQuantum[0].NumberOfPenalties < Less)
                                    {


                                        //retrive table of current Heuristic.
                                        int[,] TableS = ElephantOnTable[i].ElefantThinkingQuantum[k].TableListElefant[j];
                                        int[,] TableSS = ElephantOnTable[i].ElefantThinkingQuantum[k].TableListElefant[j];
                                        //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                                        if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                                        {

                                            if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                                                continue;



                                        }
                                        //When there is not Penalty regard mechanism.

                                        AB = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, 2, CloneATable(TableS), Order, -1, -1);
                                        //If there is kish or kshachamaz Order.
                                        if (AB.Check(TableS, Order))
                                        {
                                            //When Order is Gray.
                                            if (Order == 1)
                                            {
                                                //Continue When is kish CheckObjectDangour and AStarGreadyFirstSearch .
                                                if (AB.CheckGray)
                                                    continue;
                                            }
                                            else
                                            {
                                                //Continue when CheckBrown and AStarGreadyFirstSearch. 
                                                if (AB.CheckBrown)
                                                    continue;
                                            }
                                        }
                                        RW2 = i;
                                        CL2 = k;
                                        Ki2 = j;
                                        RW1 = -1;
                                        CL1 = -1;
                                        Ki1 = -1;
                                        RW3 = -1;
                                        CL3 = -1;
                                        Ki3 = -1;
                                        RW4 = -1;
                                        CL4 = -1;
                                        Ki4 = -1;
                                        RW5 = -1;
                                        CL5 = -1;
                                        Ki5 = -1;
                                        RW6 = -1;
                                        CL6 = -1;
                                        Ki6 = -1;
                                        MaxLess2 = (ElephantOnTable[RW2].ElefantThinkingQuantum[CL2].NumberOfPenalties);
                                        if (MaxLess2 > MaxLess1)
                                            MaxLess1 = -1;
                                        if (MaxLess2 > MaxLess3)
                                            MaxLess3 = -1;
                                        if (MaxLess2 > MaxLess4)
                                            MaxLess4 = -1;
                                        if (MaxLess2 > MaxLess5)
                                            MaxLess5 = -1;
                                        if (MaxLess2 > MaxLess6)
                                            MaxLess6 = -1;

                                        if (AStarGreedyi == 1)
                                        {
                                            Object O = new Object();
                                            lock (O)
                                            {
                                                if (Order == 1)
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Elephant By Bob!");

                                                }
                                                else//If Order is Brown.
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Elephant By Alice!");

                                                }
                                            }

                                            Object On = new Object();
                                            lock (On)
                                            {
                                                AllDraw.LastRowQ = ElephantOnTable[i].ElefantThinkingQuantum[k].Row;
                                                AllDraw.LastColumnQ = ElephantOnTable[i].ElefantThinkingQuantum[k].Column;
                                                AllDraw.NextRowQ = ElephantOnTable[i].ElefantThinkingQuantum[k].RowColumnElefant[j][0];
                                                AllDraw.NextColumnQ = ElephantOnTable[i].ElefantThinkingQuantum[k].RowColumnElefant[j][1];
                                            }
                                            Act = true;
                                            Less = ElephantOnTable[i].ElefantThinkingQuantum[k].NumberOfPenalties;
                                            TableHeuristic = ElephantOnTable[i].ElefantThinkingQuantum[k].TableListElefant[j];
                                        }
                                    }
                                    else
                                    {


                                        if (AStarGreedyi == 1)
                                        {
                                            //Found of Max Non Probable Movments.
                                            Founded.Clear();
                                            int LessB = Int32.MinValue;
                                            BeginIndexFoundingMaxLessofMaxList(0, Founded, ref LessB);
                                            RW2 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0]];
                                            CL2 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 1];
                                            Ki2 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 2];
                                            if (Founded[0] != MaxElephntFounded)
                                                continue;

                                            Object On = new Object();
                                            lock (On)
                                            {
                                                AllDraw.LastRowQ = ElephantOnTable[RW2].ElefantThinkingQuantum[CL2].Row;
                                                AllDraw.LastColumnQ = ElephantOnTable[RW2].ElefantThinkingQuantum[CL2].Column;
                                                AllDraw.NextRowQ = ElephantOnTable[i].ElefantThinkingQuantum[k].RowColumnElefant[j][0];
                                                AllDraw.NextColumnQ = ElephantOnTable[i].ElefantThinkingQuantum[k].RowColumnElefant[j][1];
                                            }
                                            Act = true;
                                            Less = ElephantOnTable[RW2].ElefantThinkingQuantum[CL2].ReturnHeuristic(RW2, Ki2, Order, false, ref HaveKilled);
                                            TableHeuristic = ElephantOnTable[RW2].ElefantThinkingQuantum[CL2].TableListElefant[Ki2];
                                            Object O = new Object();
                                            lock (O)
                                            {
                                                if (Order == 1)
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Sodier By Bob!");

                                                }
                                                else//If Order is Brown.
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Sodier By Alice!");

                                                }
                                            }
                                        }

                                    }
                                }

                            }

                        }


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;
                }
                //hourse
                for (i = 0; i < HourseMidle; i++)
                {
                    for (int k = 0; k < AllDraw.HourseMovments; k++)

                        for (j = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum[k] != null && HoursesOnTable[i].HourseThinkingQuantum[k] != null && j < HoursesOnTable[i].HourseThinkingQuantum[k].TableListHourse.Count; j++)
                        {
                            {

                                //For Penalty Reagrad Mechanisam of Current Check CheckMate Current Movments.
                                int CDummy = ChessRules.CurrentOrder;
                                int COrder = Order;

                                ChessRules.CurrentOrder *= -1;
                                Order *= -1;
                                Do = 0;
                                if (UsePenaltyRegardMechnisamT)
                                {
                                    for (int ij = 0; ij < HoursesOnTable[i].HourseThinkingQuantum[k].AStarGreedy.Count - 1; ij++)
                                        HoursesOnTable[i].HourseThinkingQuantum[k].AStarGreedy[ij].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, HoursesOnTable[i].HourseThinkingQuantum[k].AStarGreedy[ij]);
                                    Order = COrder;
                                    ChessRules.CurrentOrder = CDummy;
                                    ToCheckMate = -1; ForCheckMate = -1; AA = IsToCheckMateHASLessDeeperThanForCheckMate(this, Order, ref ToCheckMate, ref ForCheckMate, 0); if (Do == -1)
                                        continue;
                                }


                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                                if ((HoursesOnTable[i].HourseThinkingQuantum[k].PenaltyRegardListHourse[j].IsPenaltyAction() != 0 && HoursesOnTable[i].HourseThinkingQuantum[k].PenaltyRegardListHourse[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((Do == 1 || AA) && UsePenaltyRegardMechnisamT) || HoursesOnTable[i].WinOcuuredatChiled >= 1 || HoursesOnTable[i].WinOcuuredatChiled >= 2 || HoursesOnTable[i].WinOcuuredatChiled >= 3)
                                {
                                    Object On = new Object();
                                    lock (On)
                                    {
                                        AllDraw.LastRowQ = HoursesOnTable[i].HourseThinkingQuantum[k].Row;
                                        AllDraw.LastColumnQ = HoursesOnTable[i].HourseThinkingQuantum[k].Column;
                                        AllDraw.NextRowQ = HoursesOnTable[i].HourseThinkingQuantum[k].RowColumnHourse[j][0];
                                        AllDraw.NextColumnQ = HoursesOnTable[i].HourseThinkingQuantum[k].RowColumnHourse[j][1];

                                        Act = true;
                                        Less = HoursesOnTable[i].HourseThinkingQuantum[k].NumberOfPenalties;
                                    }
                                    TableHeuristic = HoursesOnTable[i].HourseThinkingQuantum[k].TableListHourse[j];
                                    RegardOccurred = true;
                                    continue;

                                }
                                Object ol = new Object();
                                lock (ol)
                                {
                                    //When There is No Movments in Such Order Enemy continue.
                                    if (Order != AllDraw.OrderPlate)
                                        if (HoursesOnTable[i].HourseThinkingQuantum[0].NumberOfPenalties < Less)
                                            continue;
                                    //When There is greater Heuristic Movments.
                                    if (HoursesOnTable[i].HourseThinkingQuantum[0].NumberOfPenalties < Less)
                                    {

                                        //retrive table of current Heuristic.
                                        int[,] TableS = HoursesOnTable[i].HourseThinkingQuantum[k].TableListHourse[j];
                                        int[,] TableSS = HoursesOnTable[i].HourseThinkingQuantum[k].TableListHourse[j];
                                        {
                                            //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                                            if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                                            {

                                                if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                                                    continue;


                                            }
                                            //When there is not Penalty regard mechanism.

                                            AB = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, 3, CloneATable(TableS), Order, HoursesOnTable[i].HourseThinkingQuantum[k].Row, HoursesOnTable[i].HourseThinkingQuantum[k].Column);
                                            //If there is kish or kshachamaz Order.
                                            if (AB.Check(TableS, Order))
                                            {
                                                //When Order is Gray.
                                                if (Order == 1)
                                                {
                                                    //Continue When is kish CheckObjectDangour and AStarGreadyFirstSearch .
                                                    if (AB.CheckGray)
                                                        continue;
                                                }
                                                else
                                                {
                                                    //Continue when CheckBrown and AStarGreadyFirstSearch. 
                                                    if (AB.CheckBrown)
                                                        continue;
                                                }

                                            }
                                        }
                                        RW3 = i;
                                        CL3 = k;
                                        Ki3 = j;
                                        RW1 = -1;
                                        CL1 = -1;
                                        Ki1 = -1;
                                        RW2 = -1;
                                        CL2 = -1;
                                        Ki2 = -1;
                                        RW4 = -1;
                                        CL4 = -1;
                                        Ki4 = -1;
                                        RW5 = -1;
                                        CL5 = -1;
                                        Ki5 = -1;
                                        RW6 = -1;
                                        CL6 = -1;
                                        Ki6 = -1;
                                        MaxLess3 = (HoursesOnTable[RW3].HourseThinkingQuantum[CL3].NumberOfPenalties);
                                        if (MaxLess3 > MaxLess1)
                                            MaxLess1 = -1;
                                        if (MaxLess3 > MaxLess2)
                                            MaxLess2 = -1;
                                        if (MaxLess3 > MaxLess4)
                                            MaxLess4 = -1;
                                        if (MaxLess3 > MaxLess5)
                                            MaxLess5 = -1;
                                        if (MaxLess3 > MaxLess6)
                                            MaxLess6 = -1;

                                        if (AStarGreedyi == 1)
                                        {
                                            Object O = new Object();
                                            lock (O)
                                            {
                                                if (Order == 1)
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Hourse By Bob!");

                                                }
                                                else//If Order is Brown.
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Hourse By Alice!");

                                                }
                                            }
                                            //Set Table and Heuristic Value and Syntax.

                                            Object On = new Object();
                                            lock (On)
                                            {
                                                AllDraw.LastRowQ = HoursesOnTable[i].HourseThinkingQuantum[k].Row;
                                                AllDraw.LastColumnQ = HoursesOnTable[i].HourseThinkingQuantum[k].Column;
                                                AllDraw.NextRowQ = HoursesOnTable[i].HourseThinkingQuantum[k].RowColumnHourse[j][0];
                                                AllDraw.NextColumnQ = HoursesOnTable[i].HourseThinkingQuantum[k].RowColumnHourse[j][1];
                                            }
                                            Act = true;
                                            Less = HoursesOnTable[i].HourseThinkingQuantum[k].NumberOfPenalties;
                                            TableHeuristic = HoursesOnTable[i].HourseThinkingQuantum[k].TableListHourse[j];

                                        }

                                    }
                                    else
                                    //Set Table and Heuristic Value and Syntax.
                                    if (AStarGreedyi == 1)
                                    {
                                        //TakeRoot.Pointer = this;
                                        //Found of Max Non Probable Movments.
                                        Founded.Clear();
                                        int LessB = Int32.MinValue;
                                        BeginIndexFoundingMaxLessofMaxList(0, Founded, ref LessB);
                                        RW3 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0]];
                                        CL3 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 1];
                                        Ki3 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 2];
                                        if (Founded[0] != MaxHourseFounded)
                                            continue;

                                        Object On = new Object();
                                        lock (On)
                                        {
                                            AllDraw.LastRowQ = HoursesOnTable[RW3].HourseThinkingQuantum[CL3].Row;
                                            AllDraw.LastColumnQ = HoursesOnTable[RW3].HourseThinkingQuantum[CL3].Column;
                                            AllDraw.NextRowQ = HoursesOnTable[i].HourseThinkingQuantum[k].RowColumnHourse[j][0];
                                            AllDraw.NextColumnQ = HoursesOnTable[i].HourseThinkingQuantum[k].RowColumnHourse[j][1];
                                        }
                                        Act = true;
                                        Less = HoursesOnTable[RW3].HourseThinkingQuantum[CL3].ReturnHeuristic(RW3, Ki3, Order, false, ref HaveKilled);
                                        TableHeuristic = HoursesOnTable[RW3].HourseThinkingQuantum[CL3].TableListHourse[Ki3];
                                        Object O = new Object();
                                        lock (O)
                                        {
                                            if (Order == 1)
                                            {
                                                OutPut.Append("\r\nChess Heuristic Sodier By Bob!");

                                            }
                                            else//If Order is Brown.
                                            {
                                                OutPut.Append("\r\nChess Heuristic Sodier By Alice!");

                                            }
                                        }
                                    }
                                }
                            }
                        }




                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                }
                //Castle
                for (i = 0; i < CastleMidle; i++)
                {
                    for (int k = 0; k < AllDraw.CastleMovments; k++)

                        for (j = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum[k] != null && CastlesOnTable[i].CastleThinkingQuantum[k] != null && j < CastlesOnTable[i].CastleThinkingQuantum[k].TableListCastle.Count; j++)
                        {
                            {

                                //For Penalty Reagrad Mechanisam of Current Check CheckMate Current Movments.
                                int CDummy = ChessRules.CurrentOrder;
                                int COrder = Order;

                                ChessRules.CurrentOrder *= -1;
                                Order *= -1;
                                Do = 0;
                                if (UsePenaltyRegardMechnisamT)
                                {
                                    for (int ij = 0; ij < CastlesOnTable[i].CastleThinkingQuantum[k].AStarGreedy.Count - 1; ij++)
                                        CastlesOnTable[i].CastleThinkingQuantum[k].AStarGreedy[ij].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, CastlesOnTable[i].CastleThinkingQuantum[k].AStarGreedy[ij]);
                                    Order = COrder;
                                    ChessRules.CurrentOrder = CDummy;
                                    ToCheckMate = -1; ForCheckMate = -1; AA = IsToCheckMateHASLessDeeperThanForCheckMate(this, Order, ref ToCheckMate, ref ForCheckMate, 0); if (Do == -1)
                                        continue;
                                }


                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;

                                if ((CastlesOnTable[i].CastleThinkingQuantum[k].PenaltyRegardListCastle[j].IsPenaltyAction() != 0 && CastlesOnTable[i].CastleThinkingQuantum[k].PenaltyRegardListCastle[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((Do == 1 || AA) && UsePenaltyRegardMechnisamT) || CastlesOnTable[i].WinOcuuredatChiled >= 1 || CastlesOnTable[i].WinOcuuredatChiled >= 2 || CastlesOnTable[i].WinOcuuredatChiled >= 3)
                                {

                                    Object On = new Object();
                                    lock (On)
                                    {
                                        AllDraw.LastRowQ = CastlesOnTable[i].CastleThinkingQuantum[k].Row;
                                        AllDraw.LastColumnQ = CastlesOnTable[i].CastleThinkingQuantum[k].Column;
                                        AllDraw.NextRowQ = CastlesOnTable[i].CastleThinkingQuantum[k].RowColumnCastle[j][0];
                                        AllDraw.NextColumnQ = CastlesOnTable[i].CastleThinkingQuantum[k].RowColumnCastle[j][1];

                                        Act = true;
                                        Less = CastlesOnTable[i].CastleThinkingQuantum[k].NumberOfPenalties;
                                    }
                                    TableHeuristic = CastlesOnTable[i].CastleThinkingQuantum[k].TableListCastle[j];
                                    RegardOccurred = true;

                                    continue;
                                }
                                Object ol = new Object();
                                lock (ol)
                                {
                                    //When There is No Movments in Such Order Enemy continue.
                                    if (Order != AllDraw.OrderPlate)
                                        if (CastlesOnTable[i].CastleThinkingQuantum[0].NumberOfPenalties < Less) continue;
                                    //When There is greater Heuristic Movments.
                                    if (CastlesOnTable[i].CastleThinkingQuantum[0].NumberOfPenalties < Less)
                                    {

                                        //retrive table of current Heuristic.
                                        int[,] TableS = CastlesOnTable[i].CastleThinkingQuantum[k].TableListCastle[j];
                                        int[,] TableSS = CastlesOnTable[i].CastleThinkingQuantum[k].TableListCastle[j];
                                        //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                                        if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                                        {

                                            if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                                                continue;



                                        }
                                        //When there is not Penalty regard mechanism.

                                        AB = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, 4, CloneATable(TableS), Order, CastlesOnTable[i].CastleThinkingQuantum[k].Row, CastlesOnTable[i].CastleThinkingQuantum[k].Column);
                                        //If there is kish or kshachamaz Order.
                                        if (AB.Check(TableS, Order))
                                        {
                                            //When Order is Gray.
                                            if (Order == 1)
                                            {
                                                //Continue When is kish CheckObjectDangour and AStarGreadyFirstSearch .
                                                if (AB.CheckGray)
                                                    continue;
                                            }
                                            else
                                            {
                                                //Continue when CheckBrown and AStarGreadyFirstSearch. 
                                                if (AB.CheckBrown)
                                                    continue;
                                            }
                                        }
                                        RW4 = i;
                                        CL4 = k;
                                        Ki4 = j;
                                        RW1 = -1;
                                        CL1 = -1;
                                        Ki1 = -1;
                                        RW2 = -1;
                                        CL2 = -1;
                                        Ki2 = -1;
                                        RW3 = -1;
                                        CL3 = -1;
                                        Ki3 = -1;
                                        RW5 = -1;
                                        CL5 = -1;
                                        Ki5 = -1;
                                        RW6 = -1;
                                        CL6 = -1;
                                        Ki6 = -1;
                                        MaxLess4 = (CastlesOnTable[RW4].CastleThinkingQuantum[CL4].NumberOfPenalties);
                                        if (MaxLess4 > MaxLess1)
                                            MaxLess1 = -1;
                                        if (MaxLess4 > MaxLess2)
                                            MaxLess2 = -1;
                                        if (MaxLess4 > MaxLess3)
                                            MaxLess3 = -1;
                                        if (MaxLess4 > MaxLess5)
                                            MaxLess5 = -1;
                                        if (MaxLess4 > MaxLess6)
                                            MaxLess6 = -1;


                                        if (AStarGreedyi == 1)
                                        {
                                            Object O = new Object();
                                            lock (O)
                                            {
                                                if (Order == 1)
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Castles By Bob!");

                                                }
                                                else//If Order is Brown.
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Castles By Alice!");

                                                }
                                            }
                                            Object On = new Object();
                                            lock (On)
                                            {
                                                AllDraw.LastRowQ = CastlesOnTable[i].CastleThinkingQuantum[k].Row;
                                                AllDraw.LastColumnQ = CastlesOnTable[i].CastleThinkingQuantum[k].Column;
                                                AllDraw.NextRowQ = CastlesOnTable[i].CastleThinkingQuantum[k].RowColumnCastle[j][0];
                                                AllDraw.NextColumnQ = CastlesOnTable[i].CastleThinkingQuantum[k].RowColumnCastle[j][1];
                                            }
                                            Act = true;
                                            Less = CastlesOnTable[i].CastleThinkingQuantum[k].NumberOfPenalties;
                                            TableHeuristic = CastlesOnTable[i].CastleThinkingQuantum[k].TableListCastle[j];

                                        }
                                    }
                                    else//Set Table and Heuristic Value and Syntax.
                                    {

                                        if (AStarGreedyi == 1)
                                        {
                                            //Found of Max Non Probable Movments.
                                            Founded.Clear();
                                            int LessB = Int32.MinValue;
                                            BeginIndexFoundingMaxLessofMaxList(0, Founded, ref LessB);
                                            RW4 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0]];
                                            CL4 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 1];
                                            Ki4 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 2];
                                            if (Founded[0] != MaxCastlesFounded)
                                                continue;

                                            Object On = new Object();
                                            lock (On)
                                            {
                                                AllDraw.LastRowQ = CastlesOnTable[RW4].CastleThinkingQuantum[CL4].Row;
                                                AllDraw.LastColumnQ = CastlesOnTable[RW4].CastleThinkingQuantum[CL4].Column;
                                                AllDraw.NextRowQ = CastlesOnTable[i].CastleThinkingQuantum[k].RowColumnCastle[j][0];
                                                AllDraw.NextColumnQ = CastlesOnTable[i].CastleThinkingQuantum[k].RowColumnCastle[j][1];
                                            }
                                            Act = true;
                                            Less = CastlesOnTable[RW4].CastleThinkingQuantum[CL4].ReturnHeuristic(RW4, Ki4, Order, false, ref HaveKilled);
                                            TableHeuristic = CastlesOnTable[RW4].CastleThinkingQuantum[CL4].TableListCastle[Ki4];
                                            Object O = new Object();
                                            lock (O)
                                            {
                                                if (Order == 1)
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Sodier By Bob!");

                                                }
                                                else//If Order is Brown.
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Sodier By Alice!");

                                                }
                                            }
                                        }

                                    }
                                }

                            }
                        }


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;
                }

                //minister
                for (i = 0; i < MinisterMidle; i++)
                {
                    for (int k = 0; k < AllDraw.MinisterMovments; k++)

                        for (j = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum[k] != null && MinisterOnTable[i].MinisterThinkingQuantum[k] != null && j < MinisterOnTable[i].MinisterThinkingQuantum[k].TableListMinister.Count; j++)
                        {
                            {
                                //For Penalty Reagrad Mechanisam of Current Check CheckMate Current Movments.

                                int CDummy = ChessRules.CurrentOrder;
                                int COrder = Order;

                                ChessRules.CurrentOrder *= -1;
                                Order *= -1;
                                Do = 0;
                                if (UsePenaltyRegardMechnisamT)
                                {
                                    for (int ij = 0; ij < MinisterOnTable[i].MinisterThinkingQuantum[k].AStarGreedy.Count - 1; ij++)
                                        MinisterOnTable[i].MinisterThinkingQuantum[k].AStarGreedy[ij].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, MinisterOnTable[i].MinisterThinkingQuantum[k].AStarGreedy[ij]);
                                    Order = COrder;
                                    ChessRules.CurrentOrder = CDummy;
                                    ToCheckMate = -1; ForCheckMate = -1; AA = IsToCheckMateHASLessDeeperThanForCheckMate(this, Order, ref ToCheckMate, ref ForCheckMate, 0); if (Do == -1)
                                        continue;
                                }


                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;

                                if ((MinisterOnTable[i].MinisterThinkingQuantum[k].PenaltyRegardListMinister[j].IsPenaltyAction() != 0 && MinisterOnTable[i].MinisterThinkingQuantum[k].PenaltyRegardListMinister[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((Do == 1 || AA) && UsePenaltyRegardMechnisamT) || MinisterOnTable[i].WinOcuuredatChiled >= 1 || MinisterOnTable[i].WinOcuuredatChiled >= 2 || MinisterOnTable[i].WinOcuuredatChiled >= 3)
                                {

                                    Object On = new Object();
                                    lock (On)
                                    {
                                        AllDraw.LastRowQ = MinisterOnTable[i].MinisterThinkingQuantum[k].Row;
                                        AllDraw.LastColumnQ = MinisterOnTable[i].MinisterThinkingQuantum[k].Column;
                                        AllDraw.NextRowQ = MinisterOnTable[i].MinisterThinkingQuantum[k].RowColumnMinister[j][0];
                                        AllDraw.NextColumnQ = MinisterOnTable[i].MinisterThinkingQuantum[k].RowColumnMinister[j][1];

                                        Act = true;
                                        Less = MinisterOnTable[i].MinisterThinkingQuantum[k].NumberOfPenalties;
                                    }
                                    TableHeuristic = MinisterOnTable[i].MinisterThinkingQuantum[k].TableListMinister[j];
                                    RegardOccurred = true;

                                    continue;
                                }
                                Object ol = new Object();
                                lock (ol)
                                {
                                    if (Order != AllDraw.OrderPlate)
                                        if (MinisterOnTable[i].MinisterThinkingQuantum[0].NumberOfPenalties < Less)
                                            continue;
                                    if (MinisterOnTable[i].MinisterThinkingQuantum[0].NumberOfPenalties < Less)
                                    {

                                        //retrive table of current Heuristic.

                                        //retrive table of current Heuristic.
                                        int[,] TableS = MinisterOnTable[i].MinisterThinkingQuantum[k].TableListMinister[j];
                                        int[,] TableSS = MinisterOnTable[i].MinisterThinkingQuantum[k].TableListMinister[j];
                                        //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                                        if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                                        {

                                            if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                                                continue;


                                        }

                                        //When there is not Penalty regard mechanism.

                                        AB = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, 5, CloneATable(TableS), Order, MinisterOnTable[i].MinisterThinkingQuantum[k].Row, MinisterOnTable[i].MinisterThinkingQuantum[k].Column);
                                        //If there is kish or kshachamaz Order.
                                        if (AB.Check(TableS, Order))
                                        {
                                            //When Order is Gray.
                                            if (Order == 1)
                                            {
                                                //Continue When is kish CheckObjectDangour and AStarGreadyFirstSearch .
                                                if (AB.CheckGray)
                                                    continue;
                                            }
                                            else
                                            {
                                                //Continue when CheckBrown and AStarGreadyFirstSearch. 
                                                if (AB.CheckBrown)
                                                    continue;
                                            }
                                        }


                                        RW5 = i;
                                        CL5 = k;
                                        Ki5 = j;
                                        RW1 = -1;
                                        CL1 = -1;
                                        Ki1 = -1;
                                        RW2 = -1;
                                        CL2 = -1;
                                        Ki2 = -1;
                                        RW3 = -1;
                                        CL3 = -1;
                                        Ki3 = -1;
                                        RW4 = -1;
                                        CL4 = -1;
                                        Ki4 = -1;
                                        RW6 = -1;
                                        CL6 = -1;
                                        Ki6 = -1;
                                        MaxLess5 = (MinisterOnTable[RW5].MinisterThinkingQuantum[CL5].NumberOfPenalties);
                                        if (MaxLess5 > MaxLess1)
                                            MaxLess1 = -1;
                                        if (MaxLess5 > MaxLess2)
                                            MaxLess2 = -1;
                                        if (MaxLess5 > MaxLess3)
                                            MaxLess3 = -1;
                                        if (MaxLess5 > MaxLess4)
                                            MaxLess4 = -1;
                                        if (MaxLess5 > MaxLess6)
                                            MaxLess6 = -1;


                                        if (AStarGreedyi == 1)
                                        {
                                            Object O = new Object();
                                            lock (O)
                                            {
                                                if (Order == 1)
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Minister By Bob!");

                                                }
                                                else//If Order is Brown.
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Minister By Alice!");

                                                }   //Set Table and Heuristic Value and Syntax.
                                            }
                                            Object On = new Object();
                                            lock (On)
                                            {
                                                AllDraw.LastRowQ = MinisterOnTable[i].MinisterThinkingQuantum[k].Row;
                                                AllDraw.LastColumnQ = MinisterOnTable[i].MinisterThinkingQuantum[k].Column;
                                                AllDraw.NextRowQ = MinisterOnTable[i].MinisterThinkingQuantum[k].RowColumnMinister[j][0];
                                                AllDraw.NextColumnQ = MinisterOnTable[i].MinisterThinkingQuantum[k].RowColumnMinister[j][1];
                                            }
                                            Act = true;
                                            Less = MinisterOnTable[i].MinisterThinkingQuantum[k].NumberOfPenalties;
                                            TableHeuristic = MinisterOnTable[i].MinisterThinkingQuantum[k].TableListMinister[j];

                                        }
                                    }
                                    else//Set Table and Heuristic Value and Syntax.
                                    {

                                        if (AStarGreedyi == 1)
                                        {
                                            //Found of Max Non Probable Movments.
                                            Founded.Clear();
                                            int LessB = Int32.MinValue;
                                            BeginIndexFoundingMaxLessofMaxList(0, Founded, ref LessB);
                                            RW5 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0]];
                                            CL5 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 1];
                                            Ki5 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 2];
                                            if (Founded[0] != MaxMinisterFounded)
                                                continue;

                                            Object On = new Object();
                                            lock (On)
                                            {
                                                AllDraw.LastRowQ = MinisterOnTable[RW5].MinisterThinkingQuantum[CL5].Row;
                                                AllDraw.LastColumnQ = MinisterOnTable[RW5].MinisterThinkingQuantum[CL5].Column;
                                                AllDraw.NextRowQ = MinisterOnTable[i].MinisterThinkingQuantum[k].RowColumnMinister[j][0];
                                                AllDraw.NextColumnQ = MinisterOnTable[i].MinisterThinkingQuantum[k].RowColumnMinister[j][1];
                                            }
                                            Act = true;
                                            Less = MinisterOnTable[RW5].MinisterThinkingQuantum[CL5].ReturnHeuristic(RW5, Ki5, Order, false, ref HaveKilled);
                                            TableHeuristic = MinisterOnTable[RW5].MinisterThinkingQuantum[CL5].TableListMinister[Ki5];
                                            Object O = new Object();
                                            lock (O)
                                            {
                                                if (Order == 1)
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Sodier By Bob!");

                                                }
                                                else//If Order is Brown.
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Sodier By Alice!");

                                                }
                                            }
                                        }

                                    }
                                }
                            }
                        }


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;
                }
                //king
                for (i = 0; i < KingMidle; i++)
                {
                    for (int k = 0; k < AllDraw.KingMovments; k++)

                        for (j = 0; KingOnTable != null && KingOnTable[i] != null && KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum[k] != null && KingOnTable[i].KingThinkingQuantum[k] != null && j < KingOnTable[i].KingThinkingQuantum[k].TableListKing.Count; j++)
                        {
                            {

                                //For Penalty Reagrad Mechanisam of Current Check CheckMate Current Movments.

                                int CDummy = ChessRules.CurrentOrder;
                                int COrder = Order;

                                ChessRules.CurrentOrder *= -1;
                                Order *= -1;
                                Do = 0;
                                if (UsePenaltyRegardMechnisamT)
                                {
                                    for (int ij = 0; ij < KingOnTable[i].KingThinkingQuantum[k].AStarGreedy.Count - 1; ij++)
                                        KingOnTable[i].KingThinkingQuantum[k].AStarGreedy[ij].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, KingOnTable[i].KingThinkingQuantum[k].AStarGreedy[ij]);
                                    Order = COrder;
                                    ChessRules.CurrentOrder = CDummy;
                                    ToCheckMate = -1; ForCheckMate = -1; AA = IsToCheckMateHASLessDeeperThanForCheckMate(this, Order, ref ToCheckMate, ref ForCheckMate, 0); if (Do == -1)
                                        continue;
                                }


                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                                //if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT
                                //)

                                if ((KingOnTable[i].KingThinkingQuantum[k].PenaltyRegardListKing[j].IsPenaltyAction() != 0 && KingOnTable[i].KingThinkingQuantum[k].PenaltyRegardListKing[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((Do == 1 || AA) && UsePenaltyRegardMechnisamT) || KingOnTable[i].WinOcuuredatChiled >= 1 || KingOnTable[i].WinOcuuredatChiled >= 2 || KingOnTable[i].WinOcuuredatChiled >= 3)
                                {
                                    Object On = new Object();
                                    lock (On)
                                    {
                                        AllDraw.LastRowQ = KingOnTable[i].KingThinkingQuantum[k].Row;
                                        AllDraw.LastColumnQ = KingOnTable[i].KingThinkingQuantum[k].Column;
                                        AllDraw.NextRowQ = KingOnTable[i].KingThinkingQuantum[k].RowColumnKing[j][0];
                                        AllDraw.NextColumnQ = KingOnTable[i].KingThinkingQuantum[k].RowColumnKing[j][1];

                                        Act = true;
                                        Less = KingOnTable[i].KingThinkingQuantum[k].NumberOfPenalties;
                                    }
                                    TableHeuristic = KingOnTable[i].KingThinkingQuantum[k].TableListKing[j];
                                    RegardOccurred = true;
                                    continue;
                                }
                                Object ol = new Object();
                                lock (ol)
                                {

                                    //When There is No Movments in Such Order Enemy continue.
                                    if (Order != AllDraw.OrderPlate)
                                        if (KingOnTable[i].KingThinkingQuantum[0].NumberOfPenalties < Less)
                                            continue;
                                    //When There is greater Heuristic Movments.
                                    if (KingOnTable[i].KingThinkingQuantum[0].NumberOfPenalties < Less)
                                    {

                                        //retrive table of current Heuristic.
                                        int[,] TableS = KingOnTable[i].KingThinkingQuantum[k].TableListKing[j];
                                        int[,] TableSS = KingOnTable[i].KingThinkingQuantum[k].TableListKing[j];
                                        //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                                        if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                                        {

                                            if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                                                continue;

                                        }
                                        //When there is not Penalty regard mechanism.

                                        AB = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, 6, CloneATable(TableS), Order, KingOnTable[i].KingThinkingQuantum[k].Row, KingOnTable[i].KingThinkingQuantum[k].Column);
                                        //If there is kish or kshachamaz Order.
                                        if (AB.Check(TableS, Order))
                                        {
                                            //When Order is Gray.
                                            if (Order == 1)
                                            {
                                                //Continue When is kish CheckObjectDangour and AStarGreadyFirstSearch .
                                                if (AB.CheckGray)
                                                    continue;
                                            }
                                            else
                                            {
                                                //Continue when CheckBrown and AStarGreadyFirstSearch. 
                                                if (AB.CheckBrown)
                                                    continue;
                                            }
                                        }


                                        RW6 = i;
                                        CL6 = k;
                                        Ki6 = j;
                                        RW1 = -1;
                                        CL1 = -1;
                                        Ki1 = -1;
                                        RW2 = -1;
                                        CL2 = -1;
                                        Ki2 = -1;
                                        RW3 = -1;
                                        CL3 = -1;
                                        Ki3 = -1;
                                        RW4 = -1;
                                        CL4 = -1;
                                        Ki4 = -1;
                                        RW5 = -1;
                                        CL5 = -1;
                                        Ki5 = -1;
                                        MaxLess6 = (KingOnTable[RW6].KingThinkingQuantum[CL6].NumberOfPenalties);
                                        if (MaxLess6 > MaxLess1)
                                            MaxLess1 = -1;
                                        if (MaxLess6 > MaxLess2)
                                            MaxLess2 = -1;
                                        if (MaxLess6 > MaxLess3)
                                            MaxLess3 = -1;
                                        if (MaxLess6 > MaxLess4)
                                            MaxLess4 = -1;
                                        if (MaxLess6 > MaxLess5)
                                            MaxLess5 = -1;


                                        if (AStarGreedyi == 1)
                                        {
                                            Object O = new Object();
                                            lock (O)
                                            {
                                                if (Order == 1)
                                                {
                                                    OutPut.Append("\r\nChess Heuristic King By Bob!");

                                                }
                                                else//If Order is Brown.
                                                {
                                                    OutPut.Append("\r\nChess Heuristic King By Alice!");

                                                }
                                            }
                                            Object On = new Object();
                                            lock (On)
                                            {
                                                AllDraw.LastRowQ = KingOnTable[i].KingThinkingQuantum[k].Row;
                                                AllDraw.LastColumnQ = KingOnTable[i].KingThinkingQuantum[k].Column;
                                                AllDraw.NextRowQ = KingOnTable[i].KingThinkingQuantum[k].RowColumnKing[j][0];
                                                AllDraw.NextColumnQ = KingOnTable[i].KingThinkingQuantum[k].RowColumnKing[j][1];
                                            }
                                            Act = true;
                                            Less = KingOnTable[i].KingThinkingQuantum[k].NumberOfPenalties;
                                            TableHeuristic = KingOnTable[i].KingThinkingQuantum[k].TableListKing[j];
                                        }


                                    }
                                    else//Set Table and Heuristic Value and Syntax.
                                    {

                                        if (AStarGreedyi == 1)
                                        {
                                            //Found of Max Non Probable Movments.
                                            Founded.Clear();
                                            int LessB = Int32.MinValue;
                                            BeginIndexFoundingMaxLessofMaxList(0, Founded, ref LessB);
                                            RW6 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0]];
                                            CL6 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 1];
                                            Ki6 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 2];
                                            if (Founded[0] != MaxKingFounded)
                                                continue;

                                            Object On = new Object();
                                            lock (On)
                                            {
                                                AllDraw.LastRowQ = KingOnTable[RW6].KingThinkingQuantum[CL6].Row;
                                                AllDraw.LastColumnQ = KingOnTable[RW6].KingThinkingQuantum[CL6].Column;
                                                AllDraw.NextRowQ = KingOnTable[i].KingThinkingQuantum[k].RowColumnKing[j][0];
                                                AllDraw.NextColumnQ = KingOnTable[i].KingThinkingQuantum[k].RowColumnKing[j][1];
                                            }

                                            Act = true;
                                            Less = KingOnTable[RW6].KingThinkingQuantum[CL6].ReturnHeuristic(RW6, Ki6, Order, false, ref HaveKilled);
                                            TableHeuristic = KingOnTable[RW6].KingThinkingQuantum[CL6].TableListKing[Ki6];
                                            Object O = new Object();
                                            lock (O)
                                            {
                                                if (Order == 1)
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Sodier By Bob!");

                                                }
                                                else//If Order is Brown.
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Sodier By Alice!");

                                                }
                                            }
                                        }

                                    }
                                }

                            }

                        }


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;
                }
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchPenalties:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //method for monitor of main Heuristic found best movment (action string)
        void StringHeuristics(int Obj, int Sec, bool AA, int Do, int WinOcuuredatChiled, int LoseOcuuredatChiled)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            String SOut = "";
            if (Obj == 1)
            {
                SOut = "Soldier ";
            }
            else
                if (Obj == 2)
            {
                SOut = "Elephant ";
            }
            else
                if (Obj == 3)
            {
                SOut = "Hourse ";
            }
            else
                if (Obj == 4)
            {
                SOut = "Castle ";
            }
            else
                if (Obj == 5)
            {
                SOut = "Minister ";
            }
            else
                    if (Obj == 6)
            {
                SOut = "King ";
            }
            SOut += "AStar Heuristics ";
            if (Sec == 1)
                SOut += " -Initiatetion- ";
            if (Sec == 2)
                SOut += " -Regard- ";
            if (Sec == 3)
                SOut += " -Foundation Greatest- ";
            if (WinOcuuredatChiled >= 1)
                SOut += " At -WinKing Checked Mate- is active For Eneter Regard- ";
            if (LoseOcuuredatChiled <= -1)
                SOut += " At -LoseKing Checked Mate- is active For Eneter Penelty- ";
            if (AA)
                SOut += " '-AA-' is Active due to Regard Enter- ";
            if (Do == 1)
                SOut += " '-Do-' is Active due to Regard Enter- ";
            SOut += " With Heuristic Count " + AllDraw.Less;
            Object O = new Object();
            lock (O)
            {
                OutPut.Append("\r\n" + SOut);
            }
            
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("StringHeuristics:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        bool IsSupHuTrue(int i, int j, int k, int Kind)
        {
            bool Is = false;
            if (Kind == 1)
                Is = SolderesOnTable[i].SoldierThinkingQuantum[0].IsSupHu[j];
            else
   if (Kind == 2)
                Is = ElephantOnTable[i].ElefantThinkingQuantum[0].IsSupHu[j];
            else
   if (Kind == 3)
                Is = HoursesOnTable[i].HourseThinkingQuantum[0].IsSupHu[j];
            else
   if (Kind == 4)
                Is = CastlesOnTable[i].CastleThinkingQuantum[0].IsSupHu[j];
            else
   if (Kind == 5)
                Is = MinisterOnTable[i].MinisterThinkingQuantum[0].IsSupHu[j];
            else
   if (Kind == 6)
                Is = KingOnTable[i].KingThinkingQuantum[0].IsSupHu[j];
            return Is;
        }

        //method for return index base calculated Heuristic specified and clear
        void SaveLess(int i, int j, int k, int Kind, ref int Less, bool AA, int Order)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //soldier
            if (Kind == 1)
            {
                Less = SolderesOnTable[i].SoldierThinkingQuantum[k].ReturnHeuristic(i, j, Order, AA, ref HaveKilled);
            }
            else//elephant
        if (Kind == 2)
            {
                Less = ElephantOnTable[i].ElefantThinkingQuantum[k].ReturnHeuristic(i, j, Order, AA, ref HaveKilled);
            }
            else//hourse
        if (Kind == 3)
            {
                Less = HoursesOnTable[i].HourseThinkingQuantum[k].ReturnHeuristic(i, j, Order, AA, ref HaveKilled);
            }
            else//Castle
        if (Kind == 4)
            {
                Less = CastlesOnTable[i].CastleThinkingQuantum[k].ReturnHeuristic(i, j, Order, AA, ref HaveKilled);
            }
            else//minister
        if (Kind == 5)
            {
                Less = MinisterOnTable[i].MinisterThinkingQuantum[k].ReturnHeuristic(i, j, Order, AA, ref HaveKilled);
            }
            else//king
        if (Kind == 6)
            {
                Less = KingOnTable[i].KingThinkingQuantum[k].ReturnHeuristic(i, j, Order, AA, ref HaveKilled);
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("SaveLess:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //index of tables that verified existence havbeen saved into refer var
        void SaveTableHeuristic(int i, int j, int k, int Kind, ref int[,] TableHeuristic)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //soldier
            if (Kind == 1)
            {
                TableHeuristic = SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder[j];
            }
            else//elephant
                if (Kind == 2)
            {
                TableHeuristic = ElephantOnTable[i].ElefantThinkingQuantum[k].TableListElefant[j];
            }
            else//hourse
                if (Kind == 3)
            {
                TableHeuristic = HoursesOnTable[i].HourseThinkingQuantum[k].TableListHourse[j];
            }
            else//Castle
                if (Kind == 4)
            {
                TableHeuristic = CastlesOnTable[i].CastleThinkingQuantum[k].TableListCastle[j];
            }
            else//minister
                if (Kind == 5)
            {
                TableHeuristic = MinisterOnTable[i].MinisterThinkingQuantum[k].TableListMinister[j];
            }
            else//king
                if (Kind == 6)
            {
                TableHeuristic = KingOnTable[i].KingThinkingQuantum[k].TableListKing[j];
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("SaveTableHeuristic:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //same of befor verified existence of begin move and end move location saved in unique results of Last best movments
        void SaveBeginEndLocation(int i, int j, int k, int Kind)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //soldier
            if (Kind == 1)
            {
                AllDraw.LastRowQ = SolderesOnTable[i].SoldierThinkingQuantum[k].Row;
                AllDraw.LastColumnQ = SolderesOnTable[i].SoldierThinkingQuantum[k].Column;
                AllDraw.NextRowQ = SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0];
                AllDraw.NextColumnQ = SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1];
            }
            else//elephant
                 if (Kind == 2)
            {
                AllDraw.LastRowQ = ElephantOnTable[i].ElefantThinkingQuantum[k].Row;
                AllDraw.LastColumnQ = ElephantOnTable[i].ElefantThinkingQuantum[k].Column;
                AllDraw.NextRowQ = ElephantOnTable[i].ElefantThinkingQuantum[k].RowColumnElefant[j][0];
                AllDraw.NextColumnQ = ElephantOnTable[i].ElefantThinkingQuantum[k].RowColumnElefant[j][1];
            }
            else//hourse
                 if (Kind == 3)
            {
                AllDraw.LastRowQ = HoursesOnTable[i].HourseThinkingQuantum[k].Row;
                AllDraw.LastColumnQ = HoursesOnTable[i].HourseThinkingQuantum[k].Column;
                AllDraw.NextRowQ = HoursesOnTable[i].HourseThinkingQuantum[k].RowColumnHourse[j][0];
                AllDraw.NextColumnQ = HoursesOnTable[i].HourseThinkingQuantum[k].RowColumnHourse[j][1];
            }
            else//Castle
                 if (Kind == 4)
            {
                AllDraw.LastRowQ = CastlesOnTable[i].CastleThinkingQuantum[k].Row;
                AllDraw.LastColumnQ = CastlesOnTable[i].CastleThinkingQuantum[k].Column;
                AllDraw.NextRowQ = CastlesOnTable[i].CastleThinkingQuantum[k].RowColumnCastle[j][0];
                AllDraw.NextColumnQ = CastlesOnTable[i].CastleThinkingQuantum[k].RowColumnCastle[j][1];
            }
            else//minister
                 if (Kind == 5)
            {
                AllDraw.LastRowQ = MinisterOnTable[i].MinisterThinkingQuantum[k].Row;
                AllDraw.LastColumnQ = MinisterOnTable[i].MinisterThinkingQuantum[k].Column;
                AllDraw.NextRowQ = MinisterOnTable[i].MinisterThinkingQuantum[k].RowColumnMinister[j][0];
                AllDraw.NextColumnQ = MinisterOnTable[i].MinisterThinkingQuantum[k].RowColumnMinister[j][1];
            }
            else//king
                 if (Kind == 6)
            {
                AllDraw.LastRowQ = KingOnTable[i].KingThinkingQuantum[k].Row;
                AllDraw.LastColumnQ = KingOnTable[i].KingThinkingQuantum[k].Column;
                AllDraw.NextRowQ = KingOnTable[i].KingThinkingQuantum[k].RowColumnKing[j][0];
                AllDraw.NextColumnQ = KingOnTable[i].KingThinkingQuantum[k].RowColumnKing[j][1];
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("SaveBeginEndLocation:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //regard section of main Heuristic in learning autamata section
        bool HeuristicRegardSection(int i, int j, int k, ref bool Act, ref int[,] TableHeuristic, ref bool AA, Color a, int Kind, ref int Do, int AStarGreedyi, int Order)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool continued = false;
            if (IsSupHuTrue(i, j, k, Kind))
                return true;

            //soldier
            if (Kind == 1)
            {
                if ((SolderesOnTable[i].SoldierThinkingQuantum[k].PenaltyRegardListSolder[j].IsPenaltyAction() != 0 && SolderesOnTable[i].SoldierThinkingQuantum[k].PenaltyRegardListSolder[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((((Do == 1 || AA) && UsePenaltyRegardMechnisamT)) && UsePenaltyRegardMechnisamT) || SolderesOnTable[i].WinOcuuredatChiled >= 1 || SolderesOnTable[i].WinOcuuredatChiled >= 2 || SolderesOnTable[i].WinOcuuredatChiled >= 3)
                {
                    //Set Table and Heuristic Value and Syntax.
                    Act = true;
                    Object On = new Object();
                    lock (On)
                    {
                        SaveBeginEndLocation(i, j, k, 1);

                        SaveTableHeuristic(i, j, k, 1, ref TableHeuristic);

                        SaveLess(i, j, k, 1, ref Less, AA, Order);
                    }

                    Object O = new Object();
                    lock (O)
                    {
                        ThingsConverter.ActOfClickEqualTow = true;
                    }

                    SolderesOnTable[i].ConvertOperation(SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1], a, SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder[j], Order, false, i);

                    int Sign = 1;
                    if (a == Color.Brown)
                        Sign = -1;


                    //If there is Soldier Convert.
                    if (SolderesOnTable[i].Convert)
                    {

                        if (SolderesOnTable[i].ConvertedToMinister)
                            TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 5 * Sign;
                        else if (SolderesOnTable[i].ConvertedToCastle)
                            TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 4 * Sign;
                        else if (SolderesOnTable[i].ConvertedToHourse)
                            TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 3 * Sign;
                        else if (SolderesOnTable[i].ConvertedToElefant)
                            TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 2 * Sign;

                    }

                    RegardOccurred = true;

                    StringHeuristics(1, 2, AA, Do, SolderesOnTable[i].WinOcuuredatChiled, SolderesOnTable[i].LoseOcuuredatChiled);

                    continued = true;
                }

            }
            else//elephant
            if (Kind == 2)
            {
                if ((ElephantOnTable[i].ElefantThinkingQuantum[k].PenaltyRegardListElefant[j].IsPenaltyAction() != 0 && ElephantOnTable[i].ElefantThinkingQuantum[k].PenaltyRegardListElefant[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((Do == 1 || AA) && UsePenaltyRegardMechnisamT) || ElephantOnTable[i].WinOcuuredatChiled >= 1 || ElephantOnTable[i].WinOcuuredatChiled >= 2 || ElephantOnTable[i].WinOcuuredatChiled >= 3)
                {

                    Object On = new Object();
                    lock (On)
                    {
                        SaveBeginEndLocation(i, j, k, 2);

                        SaveTableHeuristic(i, j, k, 2, ref TableHeuristic);

                        SaveLess(i, j, k, 2, ref Less, AA, Order);
                    }

                    StringHeuristics(2, 2, AA, Do, ElephantOnTable[i].WinOcuuredatChiled, ElephantOnTable[i].LoseOcuuredatChiled);

                    RegardOccurred = true;

                    continued = true;

                }
            }
            else//hourse
            if (Kind == 3)
            {
                if ((HoursesOnTable[i].HourseThinkingQuantum[k].PenaltyRegardListHourse[j].IsPenaltyAction() != 0 && HoursesOnTable[i].HourseThinkingQuantum[k].PenaltyRegardListHourse[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((Do == 1 || AA) && UsePenaltyRegardMechnisamT) || HoursesOnTable[i].WinOcuuredatChiled >= 1 || HoursesOnTable[i].WinOcuuredatChiled >= 2 || HoursesOnTable[i].WinOcuuredatChiled >= 3)
                {
                    Object On = new Object();
                    lock (On)
                    {
                        SaveBeginEndLocation(i, j, k, 3);

                        SaveTableHeuristic(i, j, k, 3, ref TableHeuristic);

                        SaveLess(i, j, k, 3, ref Less, AA, Order);
                    }

                    RegardOccurred = true;

                    StringHeuristics(3, 2, AA, Do, HoursesOnTable[i].WinOcuuredatChiled, HoursesOnTable[i].LoseOcuuredatChiled);

                    continued = true;

                }

            }
            else//Castle
            if (Kind == 4)
            {
                if ((CastlesOnTable[i].CastleThinkingQuantum[k].PenaltyRegardListCastle[j].IsPenaltyAction() != 0 && CastlesOnTable[i].CastleThinkingQuantum[k].PenaltyRegardListCastle[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((Do == 1 || AA) && UsePenaltyRegardMechnisamT) || CastlesOnTable[i].WinOcuuredatChiled >= 1 || CastlesOnTable[i].WinOcuuredatChiled >= 2 || CastlesOnTable[i].WinOcuuredatChiled >= 3)
                {

                    Object On = new Object();
                    lock (On)
                    {
                        SaveBeginEndLocation(i, j, k, 4);

                        SaveTableHeuristic(i, j, k, 4, ref TableHeuristic);

                        SaveLess(i, j, k, 4, ref Less, AA, Order);
                    }

                    RegardOccurred = true;
                    StringHeuristics(4, 2, AA, Do, CastlesOnTable[i].WinOcuuredatChiled, CastlesOnTable[i].LoseOcuuredatChiled);

                    continued = true;
                }
            }
            else//minister
                if (Kind == 5)
            {
                if ((MinisterOnTable[i].MinisterThinkingQuantum[k].PenaltyRegardListMinister[j].IsPenaltyAction() != 0 && MinisterOnTable[i].MinisterThinkingQuantum[k].PenaltyRegardListMinister[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((Do == 1 || AA) && UsePenaltyRegardMechnisamT) || MinisterOnTable[i].WinOcuuredatChiled >= 1 || MinisterOnTable[i].WinOcuuredatChiled >= 2 || MinisterOnTable[i].WinOcuuredatChiled >= 3)
                {

                    Object On = new Object();
                    lock (On)
                    {
                        SaveBeginEndLocation(i, j, k, 5);

                        SaveTableHeuristic(i, j, k, 5, ref TableHeuristic);

                        SaveLess(i, j, k, 5, ref Less, AA, Order);
                    }

                    TableHeuristic = MinisterOnTable[i].MinisterThinkingQuantum[k].TableListMinister[j];
                    RegardOccurred = true;
                    StringHeuristics(5, 2, AA, Do, MinisterOnTable[i].WinOcuuredatChiled, MinisterOnTable[i].LoseOcuuredatChiled);

                    continued = true;
                }
            }
            else//king
            if (Kind == 6)
            {
                if ((KingOnTable[i].KingThinkingQuantum[k].PenaltyRegardListKing[j].IsPenaltyAction() != 0 && KingOnTable[i].KingThinkingQuantum[k].PenaltyRegardListKing[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((Do == 1 || AA) && UsePenaltyRegardMechnisamT) || KingOnTable[i].WinOcuuredatChiled >= 1 || KingOnTable[i].WinOcuuredatChiled >= 2 || KingOnTable[i].WinOcuuredatChiled >= 3)
                {
                    Object On = new Object();
                    lock (On)
                    {
                        SaveBeginEndLocation(i, j, k, 6);

                        SaveTableHeuristic(i, j, k, 6, ref TableHeuristic);

                        SaveLess(i, j, k, 6, ref Less, AA, Order);
                    }

                    RegardOccurred = true;
                    StringHeuristics(6, 2, AA, Do, KingOnTable[i].WinOcuuredatChiled, KingOnTable[i].LoseOcuuredatChiled);

                    //if (KingOnTable[i].WinOcuuredatChiled >= 1 || KingOnTable[i].WinOcuuredatChiled >= 2 || KingOnTable[i].WinOcuuredatChiled >= 3)
                    // Less = Int32.MaxValue;



                    //if (((Do == 1 || AA)&&UsePenaltyRegardMechnisamT))
                    //return TableHeuristic;
                    continued = true;
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicRegardSection:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return continued;
        }
        //initiate deterministic vars of orderic Heuristic value
        void InitiateVars(int i, int j, int k, int Kind)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            RW1 = -1;
            CL1 = -1;
            Ki1 = -1;
            RW2 = -1;
            CL2 = -1;
            Ki2 = -1;
            RW3 = -1;
            CL3 = -1;
            Ki3 = -1;
            RW4 = -1;
            CL4 = -1;
            Ki4 = -1;
            RW5 = -1;
            CL5 = -1;
            Ki5 = -1;
            RW6 = -1;
            CL6 = -1;
            Ki6 = -1;
            //Sodleirs 
            if (Kind == 1)
            {
                RW1 = i;
                CL1 = k;
                Ki1 = j;
            }
            else//elephant
                if (Kind == 2)
            {
                RW2 = i;
                CL2 = k;
                Ki2 = j;
            }
            else//hourse
                if (Kind == 3)
            {
                RW3 = i;
                CL3 = k;
                Ki3 = j;
            }
            else//Castle
                if (Kind == 4)
            {
                RW4 = i;
                CL4 = k;
                Ki4 = j;
            }
            else//minister
                if (Kind == 5)
            {
                RW5 = i;
                CL5 = k;
                Ki5 = j;
            }
            else//king
                if (Kind == 6)
            {
                RW6 = i;
                CL6 = k;
                Ki6 = j;
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateVars:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //deterministic of checke of movments occured for ignore
        bool CheckeHuristci(int[,] TableS, int Order, int i, int j, int k)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool continued = false;
            ChessRules AB = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, 1, CloneATable(TableS), Order, SolderesOnTable[i].SoldierThinkingQuantum[k].Row, SolderesOnTable[i].SoldierThinkingQuantum[k].Column);
            //If there is kish or kshachamaz Order.
            if (AB.Check(TableS, Order))
            {
                //When Order is Gray.
                if (Order == 1)
                {
                    //Continue When is kish CheckObjectDangour and AStarGreadyFirstSearch .
                    if (AB.CheckGray)
                        continued = true;
                }
                else
                {
                    //Continue when CheckBrown and AStarGreadyFirstSearch. 
                    if (AB.CheckBrown)
                        continued = true;
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("CheckeHuristci:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return continued;
        }
        //minitoring of Heuristic output
        void OutputHeuristic(int Order)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O1 = new Object();
            lock (O1)
            {
                if (Order == 1)
                {
                    OutPut.Append("\r\nChess Heuristic Elephant By Bob!");

                }
                else//If Order is Brown.
                {
                    OutPut.Append("\r\nChess Heuristic Elephant By Alice!");

                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("OutputHeuristic:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //main method of Heuristic
        bool HeuristicMainBody(int i, int j, int k, ref bool Act, ref int[,] TableHeuristic, ref bool CurrentTableHeuristic, ref bool AA, Color a, int Kind, ref int Do, int AStarGreedyi, int Order)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool continued = false;

            if (IsSupHuTrue(i, j, k, Kind))
                return true;

            if (Kind == 1)
            {
                if (SolderesOnTable[i].SoldierThinkingQuantum[0].ReturnHeuristic(i, j, Order, AA, ref HaveKilled) > Less)
                {
                    Object O11 = new Object();
                    lock (O11)
                    {
                        int[,] TableS = SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder[j];

                        //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                        if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                        {

                            if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                            {
                                if (Order == 1)
                                    AllDraw.OutPut.Append("\r\nHeuristic Soldier By Bob wAS not Valid Movment!");
                                else
                                    AllDraw.OutPut.Append("\r\nHeuristic Soldier By Alice wAS not Valid Movment!");

                                return true;
                            }


                        }
                        //When there is not Penalty regard mechanism.
                        if (CheckeHuristci(TableS, Order, i, j, k))
                            return true;


                        InitiateVars(i, j, k, 1);

                        //Set Max of Soldier.
                        MaxLess1 = SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].ReturnHeuristic(i, j, Order, AA, ref HaveKilled);
                        if (ThinkingQuantumChess.IsAtLeAStOneKillerAtDraw)
                        {
                            if ((!KiilledForce(HaveKilled)) && (HaveKilled < 0))
                                return true;
                        }
                        if (!KillerForce(HaveKilled))
                            return true;

                        //When Soldeirs is Greater than Others these Set Max.
                        if (MaxLess1 > MaxLess2)
                            MaxLess2 = -1;
                        if (MaxLess1 > MaxLess3)
                            MaxLess3 = -1;
                        if (MaxLess1 > MaxLess4)
                            MaxLess4 = -1;
                        if (MaxLess1 > MaxLess5)
                            MaxLess5 = -1;
                        if (MaxLess1 > MaxLess6)
                            MaxLess6 = -1;

                        if (AStarGreedyi == 1)
                        {
                            OutputHeuristic(Order);

                            //Set Table and Heuristic Value and Syntax.
                            Act = true;
                            Object On = new Object();
                            lock (On)
                            {
                                SaveBeginEndLocation(i, j, k, 1);

                                SaveTableHeuristic(i, j, k, 1, ref TableHeuristic);

                                SaveLess(i, j, k, 1, ref Less, AA, Order);
                            }

                            StringHeuristics(1, 3, AA, Do, SolderesOnTable[i].WinOcuuredatChiled, SolderesOnTable[i].LoseOcuuredatChiled);



                            Object O1 = new Object();
                            lock (O1)
                            {
                                ThingsConverter.ActOfClickEqualTow = true;
                            }
                            SolderesOnTable[i].ConvertOperation(SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1], a, SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder[j], Order, false, i);
                            int Sign = 1;
                            if (a == Color.Brown)
                                Sign = -1;
                            //If there is Soldier Convert.
                            if (SolderesOnTable[i].Convert)
                            {

                                if (SolderesOnTable[i].ConvertedToMinister)
                                    TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 5 * Sign;
                                else if (SolderesOnTable[i].ConvertedToCastle)
                                    TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 4 * Sign;
                                else if (SolderesOnTable[i].ConvertedToHourse)
                                    TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 3 * Sign;
                                else if (SolderesOnTable[i].ConvertedToElefant)
                                    TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 2 * Sign;

                            }
                        }
                    }
                }
            }
            else if (Kind == 2)
            {
                if (ElephantOnTable[i].ElefantThinkingQuantum[0].ReturnHeuristic(i, j, Order, AA, ref HaveKilled) > Less)
                {

                    Object O = new Object();
                    lock (O)
                    {
                        //ActionString = ThinkingQuantumChess.ActionsString; AllDraw.ActionStringReady = true;
                    }
                    //retrive table of current Heuristic.
                    int[,] TableS = ElephantOnTable[i].ElefantThinkingQuantum[k].TableListElefant[j];
                    //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                    if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                    {

                        if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                        {
                            if (Order == 1)
                                AllDraw.OutPut.Append("\r\nHeuristic Elephant By Bob wAS not Valid Movment!");
                            else
                                AllDraw.OutPut.Append("\r\nHeuristic Elephant By Alice wAS not Valid Movment!");

                            return true;
                        }



                    }
                    //When there is not Penalty regard mechanism.
                    if (CheckeHuristci(TableS, Order, i, j, k))
                        return true;


                    InitiateVars(i, j, k, 2);

                    MaxLess2 = (ElephantOnTable[RW2].ElefantThinkingQuantum[CL2].ReturnHeuristic(RW2, Ki2, Order, false, ref HaveKilled));

                    if (ThinkingQuantumChess.IsAtLeAStOneKillerAtDraw)
                    {
                        if ((!KiilledForce(HaveKilled)) && (HaveKilled < 0))
                            return true;
                    }
                    if (!KillerForce(HaveKilled))
                        return true;

                    if (MaxLess2 > MaxLess1)
                        MaxLess1 = -1;
                    if (MaxLess2 > MaxLess3)
                        MaxLess3 = -1;
                    if (MaxLess2 > MaxLess4)
                        MaxLess4 = -1;
                    if (MaxLess2 > MaxLess5)
                        MaxLess5 = -1;
                    if (MaxLess2 > MaxLess6)
                        MaxLess6 = -1;

                    if (AStarGreedyi == 1)
                    {
                        OutputHeuristic(Order);

                        //Set Table and Heuristic Value and Syntax.

                        Object On = new Object();
                        lock (On)
                        {
                            SaveBeginEndLocation(i, j, k, 2);

                            SaveTableHeuristic(i, j, k, 2, ref TableHeuristic);

                            SaveLess(i, j, k, 2, ref Less, AA, Order);
                        }
                        Act = true;

                        StringHeuristics(2, 3, AA, Do, ElephantOnTable[i].WinOcuuredatChiled, ElephantOnTable[i].LoseOcuuredatChiled);


                    }
                }
            }
            else if (Kind == 3)
            {
                if (HoursesOnTable[i].HourseThinkingQuantum[0].ReturnHeuristic(i, j, Order, AA, ref HaveKilled) > Less)
                {
                    Object O = new Object();
                    lock (O)
                    {
                        //ActionString = ThinkingQuantumChess.ActionsString; AllDraw.ActionStringReady = true;
                    }
                    //retrive table of current Heuristic.
                    int[,] TableS = HoursesOnTable[i].HourseThinkingQuantum[k].TableListHourse[j];

                    //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                    if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                    {

                        if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                        {
                            if (Order == 1)
                            {
                                AllDraw.OutPut.Append("\r\nHeuristic Hourse By Bob wAS not Valid Movment!");
                            }
                            else
                            {
                                AllDraw.OutPut.Append("\r\nHeuristic Hourse By Alice wAS not Valid Movment!");

                                return true;
                            }
                        }

                    }
                    //When there is not Penalty regard mechanism.
                    if (CheckeHuristci(TableS, Order, i, j, k))
                        return true;

                    InitiateVars(i, j, k, 3);


                    MaxLess3 = (HoursesOnTable[RW3].HourseThinkingQuantum[CL3].ReturnHeuristic(RW3, Ki3, Order, false, ref HaveKilled));

                    if (ThinkingQuantumChess.IsAtLeAStOneKillerAtDraw)
                    {
                        if ((!KiilledForce(HaveKilled)) && (HaveKilled < 0))
                            return true;
                    }
                    if (!KillerForce(HaveKilled))
                        return true;

                    if (MaxLess3 > MaxLess1)
                        MaxLess1 = -1;
                    if (MaxLess3 > MaxLess2)
                        MaxLess2 = -1;
                    if (MaxLess3 > MaxLess4)
                        MaxLess4 = -1;
                    if (MaxLess3 > MaxLess5)
                        MaxLess5 = -1;
                    if (MaxLess3 > MaxLess6)
                        MaxLess6 = -1;

                    if (AStarGreedyi == 1)
                    {
                        OutputHeuristic(Order);

                        //Set Table and Heuristic Value and Syntax.
                        Object On = new Object();
                        lock (On)
                        {
                            SaveBeginEndLocation(i, j, k, 3);

                            SaveTableHeuristic(i, j, k, 3, ref TableHeuristic);

                            SaveLess(i, j, k, 3, ref Less, AA, Order);
                        }

                        Act = true;

                        StringHeuristics(3, 3, AA, Do, HoursesOnTable[i].WinOcuuredatChiled, HoursesOnTable[i].LoseOcuuredatChiled);
                    }

                }

            }
            else if (Kind == 4)
            {
                if (CastlesOnTable[i].CastleThinkingQuantum[0].ReturnHeuristic(i, j, Order, AA, ref HaveKilled) > Less)
                {
                    Object O = new Object();
                    lock (O)
                    {
                        //ActionString = ThinkingQuantumChess.ActionsString; AllDraw.ActionStringReady = true;
                    }
                    //retrive table of current Heuristic.

                    //retrive table of current Heuristic.
                    int[,] TableS = CastlesOnTable[i].CastleThinkingQuantum[k].TableListCastle[j];
                    //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                    if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                    {

                        if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                        {
                            if (Order == 1)
                                AllDraw.OutPut.Append("\r\nHeuristic Castle By Bob wAS not Valid Movment!");
                            else
                                AllDraw.OutPut.Append("\r\nHeuristic Castle By Alice wAS not Valid Movment!");

                            return true;
                        }



                    }
                    //When there is not Penalty regard mechanism.
                    if (CheckeHuristci(TableS, Order, i, j, k))
                        return true;


                    InitiateVars(i, j, k, 4);

                    MaxLess4 = (CastlesOnTable[RW4].CastleThinkingQuantum[CL4].ReturnHeuristic(RW4, Ki4, Order, false, ref HaveKilled));

                    if (ThinkingQuantumChess.IsAtLeAStOneKillerAtDraw)
                    {
                        if ((!KiilledForce(HaveKilled)) && (HaveKilled < 0))
                            return true;
                    }
                    if (!KillerForce(HaveKilled))
                        return true;

                    if (MaxLess4 > MaxLess1)
                        MaxLess1 = -1;
                    if (MaxLess4 > MaxLess2)
                        MaxLess2 = -1;
                    if (MaxLess4 > MaxLess3)
                        MaxLess3 = -1;
                    if (MaxLess4 > MaxLess5)
                        MaxLess5 = -1;
                    if (MaxLess4 > MaxLess6)
                        MaxLess6 = -1;


                    if (AStarGreedyi == 1)
                    {
                        OutputHeuristic(Order);

                        //Set Table and Heuristic Value and Syntax.

                        Object On = new Object();
                        lock (On)
                        {
                            SaveBeginEndLocation(i, j, k, 4);

                            SaveTableHeuristic(i, j, k, 4, ref TableHeuristic);

                            SaveLess(i, j, k, 4, ref Less, AA, Order);
                        }

                        Act = true;
                        StringHeuristics(4, 3, AA, Do, CastlesOnTable[i].WinOcuuredatChiled, CastlesOnTable[i].LoseOcuuredatChiled);
                    }
                }
                else//Set Table and Heuristic Value and Syntax.
                {
                }
            }
            else if (Kind == 5)
            {
                if (MinisterOnTable[i].MinisterThinkingQuantum[0].ReturnHeuristic(i, j, Order, AA, ref HaveKilled) > Less)
                {
                    Object O = new Object();
                    lock (O)
                    {
                        //ActionString = ThinkingQuantumChess.ActionsString; AllDraw.ActionStringReady = true;
                    }
                    //retrive table of current Heuristic.

                    //retrive table of current Heuristic.
                    int[,] TableS = MinisterOnTable[i].MinisterThinkingQuantum[k].TableListMinister[j];
                    //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                    if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                    {

                        if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                        {
                            if (Order == 1)
                                AllDraw.OutPut.Append("\r\nHeuristic Minister By Bob wAS not Valid Movment!");
                            else { }
                            AllDraw.OutPut.Append("\r\nHeuristic Minister By Alice wAS not Valid Movment!");

                            return true;
                        }

                    }

                    //When there is not Penalty regard mechanism.
                    if (CheckeHuristci(TableS, Order, i, j, k))
                        return true;



                    InitiateVars(i, j, k, 5);


                    MaxLess5 = (MinisterOnTable[RW5].MinisterThinkingQuantum[CL5].ReturnHeuristic(RW5, Ki5, Order, false, ref HaveKilled));

                    if (ThinkingQuantumChess.IsAtLeAStOneKillerAtDraw)
                    {
                        if ((!KiilledForce(HaveKilled)) && (HaveKilled < 0))
                            return true;
                    }
                    if (!KillerForce(HaveKilled))
                        return true;


                    if (MaxLess5 > MaxLess1)
                        MaxLess1 = -1;
                    if (MaxLess5 > MaxLess2)
                        MaxLess2 = -1;
                    if (MaxLess5 > MaxLess3)
                        MaxLess3 = -1;
                    if (MaxLess5 > MaxLess4)
                        MaxLess4 = -1;
                    if (MaxLess5 > MaxLess6)
                        MaxLess6 = -1;


                    if (AStarGreedyi == 1)
                    {
                        OutputHeuristic(Order);

                        //Set Table and Heuristic Value and Syntax.

                        Object On = new Object();
                        lock (On)
                        {
                            SaveBeginEndLocation(i, j, k, 5);

                            SaveTableHeuristic(i, j, k, 5, ref TableHeuristic);

                            SaveLess(i, j, k, 5, ref Less, AA, Order);
                        }

                        Act = true;

                        StringHeuristics(5, 3, AA, Do, MinisterOnTable[i].WinOcuuredatChiled, MinisterOnTable[i].LoseOcuuredatChiled);
                    }
                }

            }
            else if (Kind == 6)
            {
                if (KingOnTable[i].KingThinkingQuantum[0].ReturnHeuristic(i, j, Order, AA, ref HaveKilled) > Less)
                {
                    Object OO = new Object();
                    lock (OO)
                    {
                        //ActionString = ThinkingQuantumChess.ActionsString; AllDraw.ActionStringReady = true;
                    }
                    //retrive table of current Heuristic.

                    //retrive table of current Heuristic.
                    int[,] TableS = KingOnTable[i].KingThinkingQuantum[k].TableListKing[j];

                    //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                    if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                    {

                        if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                        {
                            if (Order == 1)
                                AllDraw.OutPut.Append("\r\nHeuristic King By Bob wAS not Valid Movment!");
                            else
                                AllDraw.OutPut.Append("\r\nHeuristic King By Alice wAS not Valid Movment!");

                            return true;
                        }

                    }
                    //When there is not Penalty regard mechanism.

                    if (CheckeHuristci(TableS, Order, i, j, k))
                        return true;

                    InitiateVars(i, j, k, 6);


                    MaxLess6 = (KingOnTable[RW6].KingThinkingQuantum[CL6].ReturnHeuristic(RW6, Ki6, Order, false, ref HaveKilled));

                    if (ThinkingQuantumChess.IsAtLeAStOneKillerAtDraw)
                    {
                        if ((!KiilledForce(HaveKilled)) && (HaveKilled < 0))
                            return true;
                    }
                    if (!KillerForce(HaveKilled))
                        return true;

                    if (MaxLess6 > MaxLess1)
                        MaxLess1 = -1;
                    if (MaxLess6 > MaxLess2)
                        MaxLess2 = -1;
                    if (MaxLess6 > MaxLess3)
                        MaxLess3 = -1;
                    if (MaxLess6 > MaxLess4)
                        MaxLess4 = -1;
                    if (MaxLess6 > MaxLess5)
                        MaxLess5 = -1;


                    if (AStarGreedyi == 1)
                    {
                        OutputHeuristic(Order);

                        //Set Table and Heuristic Value and Syntax.

                        Object On = new Object();
                        lock (On)
                        {
                            SaveBeginEndLocation(i, j, k, 6);

                            SaveTableHeuristic(i, j, k, 6, ref TableHeuristic);

                            SaveLess(i, j, k, 6, ref Less, AA, Order);
                        }

                        Act = true;

                        StringHeuristics(6, 3, AA, Do, KingOnTable[i].WinOcuuredatChiled, KingOnTable[i].LoseOcuuredatChiled);
                    }


                }
                else//Set Table and Heuristic Value and Syntax.
                {
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicMainBody:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return continued;
        }
        //determined verified victom occured
        bool KiilledForce(int HaveKiller)
        {
            if (ThinkingQuantumChess.IsAtLeAStOneKillerAtDraw)
            {
                if (System.Math.Abs(HaveKilled) > 0)
                    return true;

            }

            return false;
        }
        //detrmined verfied ingured occured
        bool KillerForce(int HaveKiller)
        {
            return ((ThinkingQuantumChess.IsAtLeAStOneKillerAtDraw) || (!(HaveKiller > 0)));
        }
        //soldier Heuristic
        int[,] HeuristicAStarGreadySearchSoldier(ref int[,] TableHeuristic, int i, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;


            Object a1 = new Object();
            lock (a1)
            {
                //ChessRules AB = null;

                int j;
                List<int> Founded = new List<int>();
                int DummyOrder = Order;
                int DummyCurrentOrder = ChessRules.CurrentOrder;
                bool AA = false;
                int Do = 0;



                //For Every Soldier Movments AStarGreedy.
                for (int k = 0; k < AllDraw.SodierMovments; k++)
                //When There is an Movment in such situation.
                {
                    for (j = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && SolderesOnTable[i].SoldierThinkingQuantum[k] != null && j < SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder.Count; j++)
                    {
                        
                        {

                            //For Penalty Reagrad Mechanisam of Current Check CheckMate Current Movments.
                            //if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT
                            //)
                            if (SolderesOnTable[i].SoldierThinkingQuantum[k].PenaltyRegardListSolder[j].IsPenaltyAction() == 0)
                                continue;
                            int CDummy = ChessRules.CurrentOrder;
                            int COrder = Order;

                            if (SolderesOnTable[i].SoldierThinkingQuantum[k].AStarGreedy.Count > j && SolderesOnTable[i].SoldierThinkingQuantum[k].AStarGreedy[j] != null)
                                SolderesOnTable[i].SoldierThinkingQuantum[k].AStarGreedy[j].IsFoundOfLeafDepenOfKindhaveVictory(1, ref AA, Order * -1);
                            ChessRules.CurrentOrder *= -1;
                            Order *= -1;
                            Do = 0;


                            StringHeuristics(1, 1, AA, Do, SolderesOnTable[i].WinOcuuredatChiled, SolderesOnTable[i].LoseOcuuredatChiled);

                            if (SolderesOnTable[i].LoseOcuuredatChiled <= -1 || SolderesOnTable[i].LoseOcuuredatChiled <= -2 || SolderesOnTable[i].LoseOcuuredatChiled <= -3)
                                continue;

                            Order = COrder;
                            ChessRules.CurrentOrder = CDummy;
                            //if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT
                            //)


                            if (HeuristicRegardSection(i, j, k, ref Act, ref TableHeuristic, ref AA, a, 1, ref Do, AStarGreedyi, Order))
                                continue;
                            //When There is No Movments in Such Order Enemy continue.
                            Object ol = new Object();
                            lock (ol)
                            {
                                if (Order != AllDraw.OrderPlate)
                                    if (SolderesOnTable[i].SoldierThinkingQuantum[0].ReturnHeuristic(i, j, Order, AA, ref HaveKilled) > Less)
                                        continue;
                                //When There is greater Heuristic Movments.

                                if (HeuristicMainBody(i, j, k, ref Act, ref TableHeuristic, ref CurrentTableHeuristic, ref AA, a, 1, ref Do, AStarGreedyi, Order))
                                    continue;

                            }

                        }
                    }

                }


                Order = DummyOrder;
                ChessRules.CurrentOrder = DummyCurrentOrder;
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchSoldier:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //gray section of soldier Heuristic
        int[,] HeuristicAStarGreadySearchSoldierGray(ref int[,] TableHeuristic, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;

            Object a1 = new Object();
            lock (a1)
            {

                if (SodierMidle != 0)
                {
                    for (var i = 0; i < SodierMidle; i++)
                        TableHeuristic = HeuristicAStarGreadySearchSoldier(ref TableHeuristic, i, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);
                }
                else
                    Codeclass.SaveByCode(1, callStack.GetFileLineNumber(), callStack.GetFileName());
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchSoldierGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //brown section of soldier Heuristic
        int[,] HeuristicAStarGreadySearchSoldierBrown(ref int[,] TableHeuristic, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a1 = new Object();
            lock (a1)
            {
                if (SodierMidle != SodierHigh)
                {

                    for (var i = SodierMidle; i < SodierHigh; i++)
                        TableHeuristic = HeuristicAStarGreadySearchSoldier(ref TableHeuristic, i, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);
                }
                else
                    Codeclass.SaveByCode(1, callStack.GetFileLineNumber(), callStack.GetFileName());
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchSoldierBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //gray section of elephant Heuristic
        int[,] HeuristicAStarGreadySearchElephantGray(ref int[,] TableHeuristic, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;

            Object a1 = new Object();
            lock (a1)
            {
                if (0 != ElefantMidle)
                {
                    //Do For Remaining Objects same AS Soldeir Documentation.
                    for (var i = 0; i < ElefantMidle; i++)
                        TableHeuristic = HeuristicAStarGreadySearchElephant(ref TableHeuristic, i, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);
                }
                else
                    Codeclass.SaveByCode(1, callStack.GetFileLineNumber(), callStack.GetFileName());
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchElephantGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //brown section of elephant Heuristic
        int[,] HeuristicAStarGreadySearchElephantBrown(ref int[,] TableHeuristic, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a1 = new Object();
            lock (a1)
            {

                if (ElefantHigh != ElefantMidle)
                {
                    //Do For Remaining Objects same AS Soldeir Documentation.
                    for (var i = ElefantMidle; i < ElefantHigh; i++)
                        TableHeuristic = HeuristicAStarGreadySearchElephant(ref TableHeuristic, i, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);
                }
                else
                    Codeclass.SaveByCode(1, callStack.GetFileLineNumber(), callStack.GetFileName());
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchElephantBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //main section of elephant Heuristic
        int[,] HeuristicAStarGreadySearchElephant(ref int[,] TableHeuristic, int i, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a1 = new Object();
            lock (a1)
            {

                //ChessRules AB = null;

                int j;
                List<int> Founded = new List<int>();
                int DummyOrder = Order;
                int DummyCurrentOrder = ChessRules.CurrentOrder;
                bool AA = false;
                int Do = 0;

                for (int k = 0; k < AllDraw.ElefantMovments; k++)

                {
                    for (j = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum != null && ElephantOnTable[i].ElefantThinkingQuantum[k] != null && j < ElephantOnTable[i].ElefantThinkingQuantum[k].TableListElefant.Count; j++)
                    {
                        
                        {

                            //For Penalty Reagrad Mechanisam of Current Check CheckMate Current Movments.
                            //if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT
                            //)
                            if (ElephantOnTable[i].ElefantThinkingQuantum[k].PenaltyRegardListElefant[j].IsPenaltyAction() == 0)
                                continue;
                            int CDummy = ChessRules.CurrentOrder;
                            int COrder = Order;

                            if (ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count > j && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j] != null)
                                ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].IsFoundOfLeafDepenOfKindhaveVictory(2, ref AA, Order * -1);
                            ChessRules.CurrentOrder *= -1;
                            Order *= -1;
                            Do = 0;


                            StringHeuristics(2, 1, AA, Do, ElephantOnTable[i].WinOcuuredatChiled, ElephantOnTable[i].LoseOcuuredatChiled);
                            if (ElephantOnTable[i].LoseOcuuredatChiled <= -1 || ElephantOnTable[i].LoseOcuuredatChiled <= -2 || ElephantOnTable[i].LoseOcuuredatChiled <= -3)
                                continue;
                            Order = COrder;
                            ChessRules.CurrentOrder = CDummy;
                            //if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT
                            //)


                            if (HeuristicRegardSection(i, j, k, ref Act, ref TableHeuristic, ref AA, a, 2, ref Do, AStarGreedyi, Order))
                                continue;


                            Object ol = new Object();
                            lock (ol)
                            {

                                //When There is No Movments in Such Order Enemy continue.
                                if (Order != AllDraw.OrderPlate)
                                    if (ElephantOnTable[i].ElefantThinkingQuantum[0].ReturnHeuristic(i, j, Order, AA, ref HaveKilled) > Less)
                                        continue;
                                //When There is greater Heuristic Movments.
                                if (HeuristicMainBody(i, j, k, ref Act, ref TableHeuristic, ref CurrentTableHeuristic, ref AA, a, 2, ref Do, AStarGreedyi, Order))
                                    continue;



                            }


                        }

                    }
                }

                Order = DummyOrder;
                ChessRules.CurrentOrder = DummyCurrentOrder;

                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchElephant:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }


        }
        //gray section of hourse Heuristic
        int[,] HeuristicAStarGreadySearchHourseGray(ref int[,] TableHeuristic, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;

            Object a1 = new Object();
            lock (a1)
            {
                if (0 != HourseMidle)
                {
                    //For Every Soldeir
                    for (var i = 0; i < HourseMidle; i++)
                        TableHeuristic = HeuristicAStarGreadySearchHourse(ref TableHeuristic, i, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);
                }
                else
                    Codeclass.SaveByCode(1, callStack.GetFileLineNumber(), callStack.GetFileName());
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchHourseGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //brown section of hourse Heuristic
        int[,] HeuristicAStarGreadySearchHourseBrown(ref int[,] TableHeuristic, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a1 = new Object();
            lock (a1)
            {

                if (HourseHight != HourseMidle)
                {
                    //For Every Soldeir
                    for (var i = HourseMidle; i < HourseHight; i++)
                        TableHeuristic = HeuristicAStarGreadySearchHourse(ref TableHeuristic, i, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);
                }
                else
                    Codeclass.SaveByCode(1, callStack.GetFileLineNumber(), callStack.GetFileName());
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchHourseBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //main section of hourse Heuristic
        int[,] HeuristicAStarGreadySearchHourse(ref int[,] TableHeuristic, int i, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object a1 = new Object();
            lock (a1)
            {

                //ChessRules AB = null;

                int j;
                List<int> Founded = new List<int>();
                int DummyOrder = Order;
                int DummyCurrentOrder = ChessRules.CurrentOrder;
                bool AA = false;
                int Do = 0;


                for (int k = 0; k < AllDraw.HourseMovments; k++)
                {
                    for (j = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum != null && HoursesOnTable[i].HourseThinkingQuantum[k] != null && j < HoursesOnTable[i].HourseThinkingQuantum[k].TableListHourse.Count; j++)
                    {
                        
                        {

                            //For Penalty Reagrad Mechanisam of Current Check CheckMate Current Movments.
                            //if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT
                            //)
                            if (HoursesOnTable[i].HourseThinkingQuantum[k].PenaltyRegardListHourse[j].IsPenaltyAction() == 0)
                                continue;
                            int CDummy = ChessRules.CurrentOrder;
                            int COrder = Order;

                            if (HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count > j && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j] != null)
                                HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].IsFoundOfLeafDepenOfKindhaveVictory(3, ref AA, Order * -1);
                            ChessRules.CurrentOrder *= -1;
                            Order *= -1;
                            Do = 0;

                            StringHeuristics(3, 1, AA, Do, HoursesOnTable[i].WinOcuuredatChiled, HoursesOnTable[i].LoseOcuuredatChiled);

                            if (HoursesOnTable[i].LoseOcuuredatChiled <= -1 || HoursesOnTable[i].LoseOcuuredatChiled <= -2 || HoursesOnTable[i].LoseOcuuredatChiled <= -3)
                                continue;


                            Order = COrder;
                            ChessRules.CurrentOrder = CDummy;
                            //if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT
                            //)

                            if (HeuristicRegardSection(i, j, k, ref Act, ref TableHeuristic, ref AA, a, 3, ref Do, AStarGreedyi, Order))
                                continue;

                            Object ol = new Object();
                            lock (ol)
                            {

                                //When There is No Movments in Such Order Enemy continue.
                                if (Order != AllDraw.OrderPlate)
                                    if (HoursesOnTable[i].HourseThinkingQuantum[0].ReturnHeuristic(i, j, Order, AA, ref HaveKilled) > Less)
                                        continue;
                                //When There is greater Heuristic Movments.
                                if (HeuristicMainBody(i, j, k, ref Act, ref TableHeuristic, ref CurrentTableHeuristic, ref AA, a, 3, ref Do, AStarGreedyi, Order))
                                    continue;


                            }

                        }
                    }
                }
                Order = DummyOrder;
                ChessRules.CurrentOrder = DummyCurrentOrder;

                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchHourse:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //gray section of Castle Heuristic
        int[,] HeuristicAStarGreadySearchCastleGray(ref int[,] TableHeuristic, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {

                if (0 != HourseMidle)
                {
                    for (var i = 0; i < CastleMidle; i++)
                        TableHeuristic = HeuristicAStarGreadySearchCastle(ref TableHeuristic, i, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);
                }
                else
                    Codeclass.SaveByCode(1, callStack.GetFileLineNumber(), callStack.GetFileName());
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchCastleGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //main brown section of Castle Heuristic
        int[,] HeuristicAStarGreadySearchCastleBrown(ref int[,] TableHeuristic, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {


                if (CastleMidle != CastleHigh)
                {
                    for (var i = CastleMidle; i < CastleHigh; i++)
                        TableHeuristic = HeuristicAStarGreadySearchCastle(ref TableHeuristic, i, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);

                }
                else
                    Codeclass.SaveByCode(1, callStack.GetFileLineNumber(), callStack.GetFileName());
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchCastleBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //main section of Castle Heuristic
        int[,] HeuristicAStarGreadySearchCastle(ref int[,] TableHeuristic, int i, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O1 = new Object();
            lock (O1)
            {


                //ChessRules AB = null;

                int j;
                List<int> Founded = new List<int>();
                int DummyOrder = Order;
                int DummyCurrentOrder = ChessRules.CurrentOrder;
                bool AA = false;
                int Do = 0;

                for (int k = 0; k < AllDraw.CastleMovments; k++)
                {
                    for (j = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum != null && CastlesOnTable[i].CastleThinkingQuantum[k] != null && j < CastlesOnTable[i].CastleThinkingQuantum[k].TableListCastle.Count; j++)
                    {
                        
                        {

                            //For Penalty Reagrad Mechanisam of Current Check CheckMate Current Movments.
                            //if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT
                            //)
                            if (CastlesOnTable[i].CastleThinkingQuantum[k].PenaltyRegardListCastle[j].IsPenaltyAction() == 0)
                                continue;
                            int CDummy = ChessRules.CurrentOrder;
                            int COrder = Order;

                            if (CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count > j && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j] != null)
                                CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].IsFoundOfLeafDepenOfKindhaveVictory(4, ref AA, Order * -1);
                            ChessRules.CurrentOrder *= -1;
                            Order *= -1;

                            Order = COrder;
                            StringHeuristics(4, 1, AA, Do, CastlesOnTable[i].WinOcuuredatChiled, CastlesOnTable[i].LoseOcuuredatChiled);

                            if (CastlesOnTable[i].LoseOcuuredatChiled <= -1 || CastlesOnTable[i].LoseOcuuredatChiled <= -2 || CastlesOnTable[i].LoseOcuuredatChiled <= -3)
                                continue;
                            ChessRules.CurrentOrder = CDummy;
                            //if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT
                            //)


                            if (HeuristicRegardSection(i, j, k, ref Act, ref TableHeuristic, ref AA, a, 4, ref Do, AStarGreedyi, Order))
                                continue;


                            Object ol = new Object();
                            lock (ol)
                            {
                                //When There is No Movments in Such Order Enemy continue.
                                if (Order != AllDraw.OrderPlate)
                                    if (CastlesOnTable[i].CastleThinkingQuantum[0].ReturnHeuristic(i, j, Order, AA, ref HaveKilled) > Less)
                                        continue;
                                //When There is greater Heuristic Movments.
                                if (HeuristicMainBody(i, j, k, ref Act, ref TableHeuristic, ref CurrentTableHeuristic, ref AA, a, 4, ref Do, AStarGreedyi, Order))
                                    continue;

                            }

                        }
                    }


                }


                Order = DummyOrder;
                ChessRules.CurrentOrder = DummyCurrentOrder;
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchCastle:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //main section of minister Heuristic
        int[,] HeuristicAStarGreadySearchMinsisterGray(ref int[,] TableHeuristic, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {
                if (0 != MinisterMidle)
                {
                    for (var i = 0; i < MinisterMidle; i++)
                        TableHeuristic = HeuristicAStarGreadySearchMinsister(ref TableHeuristic, i, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);

                }
                else
                    Codeclass.SaveByCode(1, callStack.GetFileLineNumber(), callStack.GetFileName());
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchMinsisterGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }

        }
        //brown main section of minister Heuristic
        int[,] HeuristicAStarGreadySearchMinsisterBrown(ref int[,] TableHeuristic, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {
                if (MinisterHigh != MinisterMidle)
                {
                    for (var i = MinisterMidle; i < MinisterHigh; i++)
                        TableHeuristic = HeuristicAStarGreadySearchMinsister(ref TableHeuristic, i, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);

                }
                else
                    Codeclass.SaveByCode(1, callStack.GetFileLineNumber(), callStack.GetFileName());
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchMinsisterBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //main section of minister Heuristic
        int[,] HeuristicAStarGreadySearchMinsister(ref int[,] TableHeuristic, int i, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O3 = new Object();
            lock (O3)
            {

                //ChessRules AB = null;

                int j;
                List<int> Founded = new List<int>();
                int DummyOrder = Order;
                int DummyCurrentOrder = ChessRules.CurrentOrder;
                bool AA = false;
                int Do = 0;

                for (int k = 0; k < AllDraw.MinisterMovments; k++)
                {
                    for (j = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum != null && MinisterOnTable[i].MinisterThinkingQuantum[k] != null && j < MinisterOnTable[i].MinisterThinkingQuantum[k].TableListMinister.Count; j++)
                    {
                        
                        {
                            //For Penalty Reagrad Mechanisam of Current Check CheckMate Current Movments.
                            //if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT
                            //)
                            if (MinisterOnTable[i].MinisterThinkingQuantum[k].PenaltyRegardListMinister[j].IsPenaltyAction() == 0)
                                continue;
                            int CDummy = ChessRules.CurrentOrder;
                            int COrder = Order;

                            if (MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count > j && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j] != null)
                                MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].IsFoundOfLeafDepenOfKindhaveVictory(5, ref AA, Order * -1);
                            ChessRules.CurrentOrder *= -1;
                            Order *= -1;
                            Do = 0;

                            StringHeuristics(5, 1, AA, Do, MinisterOnTable[i].WinOcuuredatChiled, MinisterOnTable[i].LoseOcuuredatChiled);

                            if (MinisterOnTable[i].LoseOcuuredatChiled <= -1 || MinisterOnTable[i].LoseOcuuredatChiled <= -2 || MinisterOnTable[i].LoseOcuuredatChiled <= -3)
                                continue;
                            Order = COrder;
                            ChessRules.CurrentOrder = CDummy;
                            //if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT
                            //)


                            if (HeuristicRegardSection(i, j, k, ref Act, ref TableHeuristic, ref AA, a, 5, ref Do, AStarGreedyi, Order))
                                continue;

                            Object ol = new Object();
                            lock (ol)
                            {
                                if (Order != AllDraw.OrderPlate)
                                    if (MinisterOnTable[i].MinisterThinkingQuantum[0].ReturnHeuristic(i, j, Order, AA, ref HaveKilled) > Less)
                                        continue;
                                if (HeuristicMainBody(i, j, k, ref Act, ref TableHeuristic, ref CurrentTableHeuristic, ref AA, a, 5, ref Do, AStarGreedyi, Order))
                                    continue;

                            }
                        }
                    }


                }

                Order = DummyOrder;
                ChessRules.CurrentOrder = DummyCurrentOrder;
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchMinsister:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //main gray section of king Heuristic
        int[,] HeuristicAStarGreadySearchKingGray(ref int[,] TableHeuristic, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {
                if (0 != KingMidle)
                {
                    for (var i = 0; i < KingMidle; i++)
                        TableHeuristic = HeuristicAStarGreadySearchKing(ref TableHeuristic, i, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);
                }
                else
                    Codeclass.SaveByCode(1, callStack.GetFileLineNumber(), callStack.GetFileName());
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchKingGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //main brown section of king Heuristic
        int[,] HeuristicAStarGreadySearchKingBrown(ref int[,] TableHeuristic, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {

                if (KingHigh != KingMidle)
                {
                    for (var i = KingMidle; i < KingHigh; i++)
                        TableHeuristic = HeuristicAStarGreadySearchKing(ref TableHeuristic, i, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);
                }
                else
                    Codeclass.SaveByCode(1, callStack.GetFileLineNumber(), callStack.GetFileName());
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchKingBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //main section of king Heuristic
        int[,] HeuristicAStarGreadySearchKing(ref int[,] TableHeuristic, int i, int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {

                //ChessRules AB = null;

                int j;
                List<int> Founded = new List<int>();
                int DummyOrder = Order;
                int DummyCurrentOrder = ChessRules.CurrentOrder;
                bool AA = false;
                int Do = 0;

                for (int k = 0; k < AllDraw.KingMovments; k++)
                {
                    for (j = 0; KingOnTable != null && KingOnTable[i] != null && KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum[k] != null && KingOnTable[i].KingThinkingQuantum != null && j < KingOnTable[i].KingThinkingQuantum[k].TableListKing.Count; j++)
                    {
                        
                        {

                            //For Penalty Reagrad Mechanisam of Current Check CheckMate Current Movments.
                            //if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT
                            //)
                            if (KingOnTable[i].KingThinkingQuantum[k].PenaltyRegardListKing[j].IsPenaltyAction() == 0)
                                continue;
                            int CDummy = ChessRules.CurrentOrder;
                            int COrder = Order;

                            if (KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count > j && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j] != null)
                                KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].IsFoundOfLeafDepenOfKindhaveVictory(6, ref AA, Order * -1);
                            ChessRules.CurrentOrder *= -1;
                            Order *= -1;
                            Do = 0;

                            StringHeuristics(6, 1, AA, Do, KingOnTable[i].WinOcuuredatChiled, KingOnTable[i].LoseOcuuredatChiled);

                            if (KingOnTable[i].LoseOcuuredatChiled <= -1 || KingOnTable[i].LoseOcuuredatChiled <= -2 || KingOnTable[i].LoseOcuuredatChiled <= -3)
                                continue;
                            Order = COrder;
                            ChessRules.CurrentOrder = CDummy;
                            //if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT
                            //)


                            if (HeuristicRegardSection(i, j, k, ref Act, ref TableHeuristic, ref AA, a, 6, ref Do, AStarGreedyi, Order))
                                continue;

                            Object ol = new Object();
                            lock (ol)
                            {
                                //When There is No Movments in Such Order Enemy continue.
                                if (Order != AllDraw.OrderPlate)
                                    if (KingOnTable[i].KingThinkingQuantum[0].ReturnHeuristic(i, j, Order, AA, ref HaveKilled) > Less)
                                        continue;
                                //When There is greater Heuristic Movments.
                                if (HeuristicMainBody(i, j, k, ref Act, ref TableHeuristic, ref CurrentTableHeuristic, ref AA, a, 6, ref Do, AStarGreedyi, Order))
                                    continue;

                            }

                        }
                    }
                }

                Order = DummyOrder;
                ChessRules.CurrentOrder = DummyCurrentOrder;
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchKing:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //main gray section of  Heuristic
        int[,] HeuristicAStarGreadySearchGray(int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {

                int[,] TableHeuristic = new int[8, 8];

                HeuristicAStarGreadySearchSoldierGray(ref TableHeuristic, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);

                HeuristicAStarGreadySearchElephantGray(ref TableHeuristic, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);


                HeuristicAStarGreadySearchHourseGray(ref TableHeuristic, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);


                HeuristicAStarGreadySearchCastleGray(ref TableHeuristic, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);

                HeuristicAStarGreadySearchMinsisterGray(ref TableHeuristic, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);

                HeuristicAStarGreadySearchKingGray(ref TableHeuristic, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //main brown section of Heuristic
        int[,] HeuristicAStarGreadySearchBrown(int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {
                int[,] TableHeuristic = new int[8, 8];

                HeuristicAStarGreadySearchSoldierBrown(ref TableHeuristic, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);

                HeuristicAStarGreadySearchElephantBrown(ref TableHeuristic, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);


                HeuristicAStarGreadySearchHourseBrown(ref TableHeuristic, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);


                HeuristicAStarGreadySearchCastleBrown(ref TableHeuristic, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);

                HeuristicAStarGreadySearchMinsisterBrown(ref TableHeuristic, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);

                HeuristicAStarGreadySearchKingBrown(ref TableHeuristic, AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreadySearchBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //brown section of penalty Heuristic
        int[,] BrownHeuristicAStarGreaedySearchPenalites(int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic, ref bool Act)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {

                ChessRules AB = null;

                int ToCheckMate = -1, ForCheckMate = -1, j, i;
                List<int> Founded = new List<int>();
                int DummyOrder = Order;
                int DummyCurrentOrder = ChessRules.CurrentOrder;
                bool AA = false;
                int Do = 0;
                int[,] TableHeuristic = new int[8, 8];
                //For Every Soldeir
                for (i = SodierMidle; i < SodierHigh; i++)
                {

                    //For Every Soldier Movments AStarGreedy.
                    for (int k = 0; k < AllDraw.SodierMovments; k++)
                        //When There is an Movment in such situation.

                        for (j = 0; SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum[k] != null && SolderesOnTable[i].SoldierThinkingQuantum[k] != null && j < SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder.Count; j++)
                        {

                            //For Penalty Reagrad Mechanisam of Current Check CheckMate Current Movments.
                            int CDummy = ChessRules.CurrentOrder;
                            int COrder = Order;

                            ChessRules.CurrentOrder *= -1;
                            Order *= -1;
                            Do = 0;
                            if (UsePenaltyRegardMechnisamT)
                            {
                                for (int ij = 0; ij < SolderesOnTable[i].SoldierThinkingQuantum[k].AStarGreedy.Count - 1; ij++)
                                    SolderesOnTable[i].SoldierThinkingQuantum[k].AStarGreedy[ij].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, SolderesOnTable[i].SoldierThinkingQuantum[k].AStarGreedy[ij]);
                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                                ToCheckMate = -1; ForCheckMate = -1; AA = IsToCheckMateHASLessDeeperThanForCheckMate(this, Order, ref ToCheckMate, ref ForCheckMate, 0); if (Do == -1)
                                    continue;
                            }


                            Order = COrder;
                            ChessRules.CurrentOrder = CDummy;

                            if ((SolderesOnTable[i].SoldierThinkingQuantum[k].PenaltyRegardListSolder[j].IsPenaltyAction() != 0 && SolderesOnTable[i].SoldierThinkingQuantum[k].PenaltyRegardListSolder[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((Do == 1 || AA) && UsePenaltyRegardMechnisamT))
                            {
                                //Set Table and Heuristic Value and Syntax.
                                Act = true;
                                Object o1l = new Object();
                                lock (o1l)
                                {

                                    AllDraw.LastRowQ = SolderesOnTable[i].SoldierThinkingQuantum[k].Row;
                                    AllDraw.LastColumnQ = SolderesOnTable[i].SoldierThinkingQuantum[k].Column;
                                    AllDraw.NextRowQ = SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0];
                                    AllDraw.NextColumnQ = SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1];

                                    Less = SolderesOnTable[i].SoldierThinkingQuantum[k].NumberOfPenalties;
                                }


                                TableHeuristic = SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder[j];


                                Object OO = new Object();
                                lock (OO)
                                {
                                    ThingsConverter.ActOfClickEqualTow = true;
                                }
                                SolderesOnTable[i].ConvertOperation(SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1], a, SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder[j], Order, false, i);
                                int Sign = 1;
                                if (a == Color.Brown)
                                    Sign = -1;
                                //If there is Soldier Convert.
                                if (SolderesOnTable[i].Convert)
                                {

                                    if (SolderesOnTable[i].ConvertedToMinister)
                                        TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 5 * Sign;
                                    else if (SolderesOnTable[i].ConvertedToCastle)
                                        TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 4 * Sign;
                                    else if (SolderesOnTable[i].ConvertedToHourse)
                                        TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 3 * Sign;
                                    else if (SolderesOnTable[i].ConvertedToElefant)
                                        TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 2 * Sign;




                                    RegardOccurred = true;
                                    continue;
                                }

                            }
                            Object ol = new Object();
                            lock (ol)
                            {
                                //When There is No Movments in Such Order Enemy continue.
                                if (Order != AllDraw.OrderPlate)
                                    if (SolderesOnTable[i].SoldierThinkingQuantum[0].NumberOfPenalties < Less)
                                        continue;
                                //When There is greater Heuristic Movments.
                                if (SolderesOnTable[i].SoldierThinkingQuantum[0].NumberOfPenalties < Less)
                                {

                                    //retrive table of current Heuristic.
                                    int[,] TableS = SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder[j];

                                    //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                                    if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                                    {

                                        if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                                            continue;

                                    }
                                    //When there is not Penalty regard mechanism.

                                    AB = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, 1, CloneATable(TableS), Order, SolderesOnTable[i].SoldierThinkingQuantum[k].Row, SolderesOnTable[i].SoldierThinkingQuantum[k].Column);
                                    //If there is kish or kshachamaz Order.
                                    if (AB.Check(TableS, Order))
                                    {
                                        //When Order is Gray.
                                        if (Order == 1)
                                        {
                                            //Continue When is kish CheckObjectDangour and AStarGreadyFirstSearch .
                                            if (AB.CheckGray)
                                                continue;
                                        }
                                        else
                                        {
                                            //Continue when CheckBrown and AStarGreadyFirstSearch. 
                                            if (AB.CheckBrown)
                                                continue;
                                        }
                                    }

                                    RW1 = i;
                                    CL1 = k;
                                    Ki1 = j;
                                    RW2 = -1;
                                    CL2 = -1;
                                    Ki2 = -1;
                                    RW3 = -1;
                                    CL3 = -1;
                                    Ki3 = -1;
                                    RW4 = -1;
                                    CL4 = -1;
                                    Ki4 = -1;
                                    RW5 = -1;
                                    CL5 = -1;
                                    Ki5 = -1;
                                    RW6 = -1;
                                    CL6 = -1;
                                    Ki6 = -1;
                                    MaxLess1 = SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].NumberOfPenalties;
                                    if (MaxLess1 > MaxLess2)
                                        MaxLess2 = -1;
                                    if (MaxLess1 > MaxLess3)
                                        MaxLess3 = -1;
                                    if (MaxLess1 > MaxLess4)
                                        MaxLess4 = -1;
                                    if (MaxLess1 > MaxLess5)
                                        MaxLess5 = -1;
                                    if (MaxLess1 > MaxLess6)
                                        MaxLess6 = -1;

                                    //Set Table and Heuristic Value and Syntax.
                                    if (AStarGreedyi == 1)
                                    {
                                        Object OO = new Object();
                                        lock (OO)
                                        {
                                            if (Order == 1)
                                            {
                                                OutPut.Append("\r\nChess Heuristic Sodier By Bob!");

                                            }
                                            else//If Order is Brown.
                                            {
                                                OutPut.Append("\r\nChess Heuristic Sodier By Alice!");

                                            }
                                        }
                                        //Set Table and Heuristic Value and Syntax.
                                        Act = true;
                                        Object On = new Object();
                                        lock (On)
                                        {
                                            AllDraw.LastRowQ = SolderesOnTable[i].SoldierThinkingQuantum[k].Row;
                                            AllDraw.LastColumnQ = SolderesOnTable[i].SoldierThinkingQuantum[k].Column;
                                            AllDraw.NextRowQ = SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0];
                                            AllDraw.NextColumnQ = SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1];
                                        }

                                        Less = SolderesOnTable[i].SoldierThinkingQuantum[k].NumberOfPenalties;


                                        TableHeuristic = SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder[j];


                                        Object O1 = new Object();
                                        lock (O1)
                                        {
                                            ThingsConverter.ActOfClickEqualTow = true;
                                        }
                                        SolderesOnTable[i].ConvertOperation(SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1], a, SolderesOnTable[i].SoldierThinkingQuantum[k].TableListSolder[j], Order, false, i);
                                        int Sign = 1;
                                        if (a == Color.Brown)
                                            Sign = -1;
                                        //If there is Soldier Convert.
                                        if (SolderesOnTable[i].Convert)
                                        {

                                            if (SolderesOnTable[i].ConvertedToMinister)
                                                TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 5 * Sign;
                                            else if (SolderesOnTable[i].ConvertedToCastle)
                                                TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 4 * Sign;
                                            else if (SolderesOnTable[i].ConvertedToHourse)
                                                TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 3 * Sign;
                                            else if (SolderesOnTable[i].ConvertedToElefant)
                                                TableHeuristic[SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0], SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1]] = 2 * Sign;





                                        }

                                    }
                                    else
                                    {  //Set Table and Heuristic Value and Syntax.

                                        if (AStarGreedyi == 1)
                                        {
                                            //Found of Max Non Probable Movments.
                                            Founded.Clear();
                                            int LessB = Int32.MinValue;
                                            BeginIndexFoundingMaxLessofMaxList(0, Founded, ref LessB);
                                            RW1 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0]];
                                            CL1 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 1];
                                            Ki1 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 2];
                                            if (Founded[0] != MaxSoldeirFounded)
                                                continue;
                                            Act = true;
                                            Object On = new Object();
                                            lock (On)
                                            {
                                                AllDraw.LastRowQ = SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].Row;
                                                AllDraw.LastColumnQ = SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].Column;
                                                AllDraw.NextRowQ = SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][0];
                                                AllDraw.NextColumnQ = SolderesOnTable[i].SoldierThinkingQuantum[k].RowColumnSoldier[j][1];
                                            }
                                            Less = SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].ReturnHeuristic(RW1, Ki1, Order, false, ref HaveKilled);


                                            TableHeuristic = SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].TableListSolder[Ki1];


                                            Object O1 = new Object();
                                            lock (O1)
                                            {
                                                ThingsConverter.ActOfClickEqualTow = true;
                                            }
                                            SolderesOnTable[RW1].ConvertOperation(SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][0], SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][1], a, SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].TableListSolder[Ki1], Order, false, i);
                                            int Sign = 1;
                                            if (a == Color.Brown)
                                                Sign = -1;
                                            //If there is Soldier Convert.
                                            if (SolderesOnTable[RW1].Convert)
                                            {

                                                if (SolderesOnTable[RW1].ConvertedToMinister)
                                                    TableHeuristic[SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][0], SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][1]] = 5 * Sign;
                                                else if (SolderesOnTable[RW1].ConvertedToCastle)
                                                    TableHeuristic[SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][0], SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][1]] = 4 * Sign;
                                                else if (SolderesOnTable[RW1].ConvertedToHourse)
                                                    TableHeuristic[SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][0], SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][1]] = 3 * Sign;
                                                else if (SolderesOnTable[RW1].ConvertedToElefant)
                                                    TableHeuristic[SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][0], SolderesOnTable[RW1].SoldierThinkingQuantum[CL1].RowColumnSoldier[Ki1][1]] = 2 * Sign;




                                            }
                                            Object OO = new Object();
                                            lock (OO)
                                            {
                                                if (Order == 1)
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Sodier By Bob!");

                                                }
                                                else//If Order is Brown.
                                                {
                                                    OutPut.Append("\r\nChess Heuristic Sodier By Alice!");

                                                }
                                            }
                                        }


                                    }
                                }
                            }

                        }

                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;
                }
                //Do For Remaining Objects same AS Soldeir Documentation.
                for (i = ElefantMidle; i < ElefantHigh; i++)
                {
                    for (int k = 0; k < AllDraw.ElefantMovments; k++)

                        for (j = 0; ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum[k] != null && ElephantOnTable[i].ElefantThinkingQuantum[k] != null && j < ElephantOnTable[i].ElefantThinkingQuantum[k].TableListElefant.Count; j++)
                        {

                            //For Penalty Reagrad Mechanisam of Current Check CheckMate Current Movments.
                            ////if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT)
                            //   if (ElephantOnTable[i].ElefantThinkingQuantum[k].PenaltyRegardListElefant[j].IsPenaltyAction() == 0)
                            //       continue;
                            int CDummy = ChessRules.CurrentOrder;
                            int COrder = Order;

                            ChessRules.CurrentOrder *= -1;
                            Order *= -1;
                            Do = 0;
                            if (UsePenaltyRegardMechnisamT)
                            {
                                for (int ij = 0; ij < ElephantOnTable[i].ElefantThinkingQuantum[k].AStarGreedy.Count - 1; ij++)
                                    ElephantOnTable[i].ElefantThinkingQuantum[k].AStarGreedy[ij].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, ElephantOnTable[i].ElefantThinkingQuantum[k].AStarGreedy[ij]);
                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                                ToCheckMate = -1; ForCheckMate = -1; AA = IsToCheckMateHASLessDeeperThanForCheckMate(this, Order, ref ToCheckMate, ref ForCheckMate, 0); if (Do == -1)
                                    continue;
                            }


                            Order = COrder;
                            ChessRules.CurrentOrder = CDummy;
                            //if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT
                            //)
                            if ((ElephantOnTable[i].ElefantThinkingQuantum[k].PenaltyRegardListElefant[j].IsPenaltyAction() != 0 && ElephantOnTable[i].ElefantThinkingQuantum[k].PenaltyRegardListElefant[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((Do == 1 || AA) && UsePenaltyRegardMechnisamT))
                            {
                                Object On = new Object();
                                lock (On)
                                {
                                    AllDraw.LastRowQ = ElephantOnTable[i].ElefantThinkingQuantum[k].Row;
                                    AllDraw.LastColumnQ = ElephantOnTable[i].ElefantThinkingQuantum[k].Column;
                                    AllDraw.NextRowQ = ElephantOnTable[i].ElefantThinkingQuantum[k].RowColumnElefant[j][0];
                                    AllDraw.NextColumnQ = ElephantOnTable[i].ElefantThinkingQuantum[k].RowColumnElefant[j][1];


                                    Act = true;
                                    Less = ElephantOnTable[i].ElefantThinkingQuantum[k].NumberOfPenalties;
                                }
                                TableHeuristic = ElephantOnTable[i].ElefantThinkingQuantum[k].TableListElefant[j];
                                RegardOccurred = true;
                                //if (((Do == 1 || AA)&&UsePenaltyRegardMechnisamT))
                                //return TableHeuristic;
                                continue;
                            }
                            //When There is No Movments in Such Order Enemy continue.
                            if (ElephantOnTable[i].ElefantThinkingQuantum[k].PenaltyRegardListElefant[j].IsPenaltyAction() == 0)
                                continue;
                            Object ol = new Object();
                            lock (ol)
                            {
                                //When There is No Movments in Such Order Enemy continue.
                                if (Order != AllDraw.OrderPlate)
                                    if (ElephantOnTable[i].ElefantThinkingQuantum[0].NumberOfPenalties < Less)
                                        continue;
                                //When There is greater Heuristic Movments.
                                if (ElephantOnTable[i].ElefantThinkingQuantum[0].NumberOfPenalties < Less)
                                {

                                    //retrive table of current Heuristic.

                                    //if (CheckG || CheckB)
                                    //{
                                    //retrive table of current Heuristic.
                                    int[,] TableS = ElephantOnTable[i].ElefantThinkingQuantum[k].TableListElefant[j];
                                    //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                                    if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                                    {

                                        if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                                            continue;

                                    }
                                    //When there is not Penalty regard mechanism.
                                    //if (!UsePenaltyRegardMechnisamT)
                                    {
                                        AB = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, 2, CloneATable(TableS), Order, ElephantOnTable[i].ElefantThinkingQuantum[k].Row, ElephantOnTable[i].ElefantThinkingQuantum[k].Column);
                                        //If there is kish or kshachamaz Order.
                                        if (AB.Check(TableS, Order))
                                        {
                                            //When Order is Gray.
                                            if (Order == 1)
                                            {
                                                //Continue When is kish CheckObjectDangour and AStarGreadyFirstSearch .
                                                if (AB.CheckGray)
                                                    continue;
                                            }
                                            else
                                            {
                                                //Continue when CheckBrown and AStarGreadyFirstSearch. 
                                                if (AB.CheckBrown)
                                                    continue;
                                            }
                                        }
                                        else
                                        {

                                        }


                                    }
                                    RW2 = i;
                                    CL2 = k;
                                    Ki2 = j;
                                    RW1 = -1;
                                    CL1 = -1;
                                    Ki1 = -1;
                                    RW3 = -1;
                                    CL3 = -1;
                                    Ki3 = -1;
                                    RW4 = -1;
                                    CL4 = -1;
                                    Ki4 = -1;
                                    RW5 = -1;
                                    CL5 = -1;
                                    Ki5 = -1;
                                    RW6 = -1;
                                    CL6 = -1;
                                    Ki6 = -1;
                                    MaxLess2 = (ElephantOnTable[RW2].ElefantThinkingQuantum[CL2].NumberOfPenalties);
                                    MaxLess1 = -1;
                                    if (MaxLess2 > MaxLess3)
                                        MaxLess3 = -1;
                                    if (MaxLess2 > MaxLess4)
                                        MaxLess4 = -1;
                                    if (MaxLess2 > MaxLess5)
                                        MaxLess5 = -1;
                                    if (MaxLess2 > MaxLess6)
                                        MaxLess6 = -1;
                                    if (AStarGreedyi == 1)
                                    {
                                        Object OO = new Object();
                                        lock (OO)
                                        {
                                            if (Order == 1)
                                            {
                                                OutPut.Append("\r\nChess Heuristic Elephant By Bob!");

                                            }
                                            else//If Order is Brown.
                                            {
                                                OutPut.Append("\r\nChess Heuristic Elephant By Alice!");

                                            }
                                        }
                                        Object On = new Object();
                                        lock (On)
                                        {
                                            AllDraw.LastRowQ = ElephantOnTable[i].ElefantThinkingQuantum[k].Row;
                                            AllDraw.LastColumnQ = ElephantOnTable[i].ElefantThinkingQuantum[k].Column;
                                            AllDraw.NextRowQ = ElephantOnTable[i].ElefantThinkingQuantum[k].RowColumnElefant[j][0];
                                            AllDraw.NextColumnQ = ElephantOnTable[i].ElefantThinkingQuantum[k].RowColumnElefant[j][1];
                                        }

                                        Act = true;
                                        Less = ElephantOnTable[i].ElefantThinkingQuantum[k].NumberOfPenalties;
                                        TableHeuristic = ElephantOnTable[i].ElefantThinkingQuantum[k].TableListElefant[j];

                                    }
                                }
                                else//Set Table and Heuristic Value and Syntax.
                                {

                                    if (AStarGreedyi == 1)
                                    {
                                        //TakeRoot.Pointer = this;
                                        //Found of Max Non Probable Movments.
                                        Founded.Clear();
                                        int LessB = Int32.MinValue;
                                        BeginIndexFoundingMaxLessofMaxList(0, Founded, ref LessB);
                                        RW2 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0]];
                                        CL2 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 1];
                                        Ki2 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 2];
                                        if (Founded[0] != MaxElephntFounded)
                                            continue;

                                        Object On = new Object();
                                        lock (On)
                                        {
                                            AllDraw.LastRowQ = ElephantOnTable[RW2].ElefantThinkingQuantum[CL2].Row;
                                            AllDraw.LastColumnQ = ElephantOnTable[RW2].ElefantThinkingQuantum[CL2].Column;
                                            AllDraw.NextRowQ = ElephantOnTable[i].ElefantThinkingQuantum[k].RowColumnElefant[j][0];
                                            AllDraw.NextColumnQ = ElephantOnTable[i].ElefantThinkingQuantum[k].RowColumnElefant[j][1];
                                        }

                                        Act = true;
                                        Less = ElephantOnTable[RW2].ElefantThinkingQuantum[CL2].ReturnHeuristic(RW2, Ki2, Order, false, ref HaveKilled);
                                        TableHeuristic = ElephantOnTable[RW2].ElefantThinkingQuantum[CL2].TableListElefant[Ki2];
                                        Object OO = new Object();
                                        lock (OO)
                                        {
                                            if (Order == 1)
                                            {
                                                OutPut.Append("\r\nChess Heuristic Sodier By Bob!");

                                            }
                                            else//If Order is Brown.
                                            {
                                                OutPut.Append("\r\nChess Heuristic Sodier By Alice!");

                                            }
                                        }
                                    }


                                }
                            }

                        }


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;
                }

                for (i = HourseMidle; i < HourseHight; i++)
                {
                    for (int k = 0; k < AllDraw.HourseMovments; k++)

                        for (j = 0; HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum[k] != null && HoursesOnTable[i].HourseThinkingQuantum[k] != null && j < HoursesOnTable[i].HourseThinkingQuantum[k].TableListHourse.Count; j++)
                        {

                            //For Penalty Reagrad Mechanisam of Current Check CheckMate Current Movments.
                            ////if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT)
                            //    if (HoursesOnTable[i].HourseThinkingQuantum[k].PenaltyRegardListHourse[j].IsPenaltyAction() == 0)
                            //        continue;
                            int CDummy = ChessRules.CurrentOrder;
                            int COrder = Order;

                            ChessRules.CurrentOrder *= -1;
                            Order *= -1;
                            Do = 0;
                            if (UsePenaltyRegardMechnisamT)
                            {
                                for (int ij = 0; ij < HoursesOnTable[i].HourseThinkingQuantum[k].AStarGreedy.Count - 1; ij++)
                                    HoursesOnTable[i].HourseThinkingQuantum[k].AStarGreedy[ij].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, HoursesOnTable[i].HourseThinkingQuantum[k].AStarGreedy[ij]);
                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                                ToCheckMate = -1; ForCheckMate = -1; AA = IsToCheckMateHASLessDeeperThanForCheckMate(this, Order, ref ToCheckMate, ref ForCheckMate, 0); if (Do == -1)
                                    continue;
                            }


                            Order = COrder;
                            ChessRules.CurrentOrder = CDummy;
                            //if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT
                            //)
                            if ((HoursesOnTable[i].HourseThinkingQuantum[k].PenaltyRegardListHourse[j].IsPenaltyAction() != 0 && HoursesOnTable[i].HourseThinkingQuantum[k].PenaltyRegardListHourse[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((Do == 1 || AA) && UsePenaltyRegardMechnisamT))
                            {
                                Object On = new Object();
                                lock (On)
                                {
                                    AllDraw.LastRowQ = HoursesOnTable[i].HourseThinkingQuantum[k].Row;
                                    AllDraw.LastColumnQ = HoursesOnTable[i].HourseThinkingQuantum[k].Column;
                                    AllDraw.NextRowQ = HoursesOnTable[i].HourseThinkingQuantum[k].RowColumnHourse[j][0];
                                    AllDraw.NextColumnQ = HoursesOnTable[i].HourseThinkingQuantum[k].RowColumnHourse[j][1];


                                    Act = true;
                                    Less = HoursesOnTable[i].HourseThinkingQuantum[k].NumberOfPenalties;
                                }
                                TableHeuristic = HoursesOnTable[i].HourseThinkingQuantum[k].TableListHourse[j];
                                RegardOccurred = true;
                                //if (((Do == 1 || AA)&&UsePenaltyRegardMechnisamT))
                                //return TableHeuristic;
                                continue;
                            }

                            Object ol = new Object();
                            lock (ol)
                            {
                                //When There is No Movments in Such Order Enemy continue.
                                if (Order != AllDraw.OrderPlate)
                                    if (HoursesOnTable[i].HourseThinkingQuantum[0].NumberOfPenalties < Less)

                                        continue;
                                //When There is greater Heuristic Movments.
                                if (HoursesOnTable[i].HourseThinkingQuantum[0].NumberOfPenalties < Less)
                                {

                                    //retrive table of current Heuristic.

                                    //retrive table of current Heuristic.
                                    int[,] TableS = HoursesOnTable[i].HourseThinkingQuantum[k].TableListHourse[j];
                                    {
                                        //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                                        if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                                        {

                                            if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                                                continue;


                                        }
                                        //When there is not Penalty regard mechanism.
                                        //if (!UsePenaltyRegardMechnisamT)
                                        {
                                            AB = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, 3, CloneATable(TableS), Order, HoursesOnTable[i].HourseThinkingQuantum[k].Row, HoursesOnTable[i].HourseThinkingQuantum[k].Column);
                                            //If there is kish or kshachamaz Order.
                                            if (AB.Check(TableS, Order))
                                            {
                                                //When Order is Gray.
                                                if (Order == 1)
                                                {
                                                    //Continue When is kish CheckObjectDangour and AStarGreadyFirstSearch .
                                                    if (AB.CheckGray)
                                                        continue;
                                                }
                                                else
                                                {
                                                    //Continue when CheckBrown and AStarGreadyFirstSearch. 
                                                    if (AB.CheckBrown)
                                                        continue;
                                                }
                                            }
                                            else
                                            {

                                            }
                                        }


                                    }
                                    RW1 = -1;
                                    CL1 = -1;
                                    Ki1 = -1;
                                    RW2 = -1;
                                    CL2 = -1;
                                    Ki2 = -1;
                                    RW3 = i;
                                    CL3 = k;
                                    Ki3 = j;
                                    RW4 = -1;
                                    CL4 = -1;
                                    Ki4 = -1;
                                    RW5 = -1;
                                    CL5 = -1;
                                    Ki5 = -1;
                                    RW6 = -1;
                                    CL6 = -1;
                                    Ki6 = -1;
                                    MaxLess3 = HoursesOnTable[RW3].HourseThinkingQuantum[CL3].NumberOfPenalties;
                                    if (MaxLess3 > MaxLess1)
                                        MaxLess1 = -1;
                                    if (MaxLess3 > MaxLess2)
                                        MaxLess2 = -1;
                                    if (MaxLess3 > MaxLess4)
                                        MaxLess4 = -1;
                                    if (MaxLess3 > MaxLess5)
                                        MaxLess5 = -1;
                                    if (MaxLess3 > MaxLess6)
                                        MaxLess6 = -1;

                                    if (AStarGreedyi == 1)
                                    {
                                        Object OO = new Object();
                                        lock (OO)
                                        {
                                            if (Order == 1)
                                            {
                                                OutPut.Append("\r\nChess Heuristic Hourse By Bob!");

                                            }
                                            else//If Order is Brown.
                                            {
                                                OutPut.Append("\r\nChess Heuristic Hourse By Alice!");

                                            }
                                        }
                                        //Set Table and Heuristic Value and Syntax.

                                        Object On = new Object();
                                        lock (On)
                                        {
                                            AllDraw.LastRowQ = HoursesOnTable[i].HourseThinkingQuantum[k].Row;
                                            AllDraw.LastColumnQ = HoursesOnTable[i].HourseThinkingQuantum[k].Column;
                                            AllDraw.NextRowQ = HoursesOnTable[i].HourseThinkingQuantum[k].RowColumnHourse[j][0];
                                            AllDraw.NextColumnQ = HoursesOnTable[i].HourseThinkingQuantum[k].RowColumnHourse[j][1];
                                        }

                                        Act = true;
                                        Less = HoursesOnTable[i].HourseThinkingQuantum[k].NumberOfPenalties;
                                        TableHeuristic = HoursesOnTable[i].HourseThinkingQuantum[k].TableListHourse[j];

                                    }
                                }
                                else//Set Table and Heuristic Value and Syntax.
                                {

                                    if (AStarGreedyi == 1)
                                    {
                                        //TakeRoot.Pointer = this;
                                        //Found of Max Non Probable Movments.
                                        Founded.Clear();
                                        int LessB = Int32.MinValue;
                                        BeginIndexFoundingMaxLessofMaxList(0, Founded, ref LessB);
                                        RW3 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0]];
                                        CL3 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 1];
                                        Ki3 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 2];
                                        if (Founded[0] != MaxHourseFounded)
                                            continue;

                                        Object On = new Object();
                                        lock (On)
                                        {
                                            AllDraw.LastRowQ = HoursesOnTable[RW3].HourseThinkingQuantum[CL3].Row;
                                            AllDraw.LastColumnQ = HoursesOnTable[RW3].HourseThinkingQuantum[CL3].Column;
                                            AllDraw.NextRowQ = HoursesOnTable[i].HourseThinkingQuantum[k].RowColumnHourse[j][0];
                                            AllDraw.NextColumnQ = HoursesOnTable[i].HourseThinkingQuantum[k].RowColumnHourse[j][1];
                                        }

                                        Act = true;
                                        Less = HoursesOnTable[RW3].HourseThinkingQuantum[CL3].ReturnHeuristic(RW3, Ki3, Order, false, ref HaveKilled);
                                        TableHeuristic = HoursesOnTable[RW3].HourseThinkingQuantum[CL3].TableListHourse[Ki3];
                                        Object OO = new Object();
                                        lock (OO)
                                        {
                                            if (Order == 1)
                                            {
                                                OutPut.Append("\r\nChess Heuristic Sodier By Bob!");

                                            }
                                            else//If Order is Brown.
                                            {
                                                OutPut.Append("\r\nChess Heuristic Sodier By Alice!");

                                            }
                                        }
                                    }



                                }
                            }

                        }


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;
                }

                for (i = CastleMidle; i < CastleHigh; i++)
                {
                    for (int k = 0; k < AllDraw.CastleMovments; k++)

                        for (j = 0; CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum[k] != null && CastlesOnTable[i].CastleThinkingQuantum[k] != null && j < CastlesOnTable[i].CastleThinkingQuantum[k].TableListCastle.Count; j++)
                        {

                            //For Penalty Reagrad Mechanisam of Current Check CheckMate Current Movments.
                            ////if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT)
                            ///   if (CastlesOnTable[i].CastleThinkingQuantum[k].PenaltyRegardListCastle[j].IsPenaltyAction() == 0)
                            //       continue;

                            int CDummy = ChessRules.CurrentOrder;
                            int COrder = Order;

                            ChessRules.CurrentOrder *= -1;
                            Order *= -1;
                            Do = 0;
                            if (UsePenaltyRegardMechnisamT)
                            {
                                for (int ij = 0; ij < CastlesOnTable[i].CastleThinkingQuantum[k].AStarGreedy.Count - 1; ij++)
                                    CastlesOnTable[i].CastleThinkingQuantum[k].AStarGreedy[ij].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, CastlesOnTable[i].CastleThinkingQuantum[k].AStarGreedy[ij]);
                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                                ToCheckMate = -1; ForCheckMate = -1; AA = IsToCheckMateHASLessDeeperThanForCheckMate(this, Order, ref ToCheckMate, ref ForCheckMate, 0); if (Do == -1)
                                    continue;
                            }


                            Order = COrder;
                            ChessRules.CurrentOrder = CDummy;
                            //if (AllDraw.OrderPlate == Order && AStarGreedyi == 1 //&& UsePenaltyRegardMechnisamT
                            //)
                            if ((CastlesOnTable[i].CastleThinkingQuantum[k].PenaltyRegardListCastle[j].IsPenaltyAction() != 0 && CastlesOnTable[i].CastleThinkingQuantum[k].PenaltyRegardListCastle[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((Do == 1 || AA) && UsePenaltyRegardMechnisamT))
                            {

                                Object On = new Object();
                                lock (On)
                                {
                                    AllDraw.LastRowQ = CastlesOnTable[i].CastleThinkingQuantum[k].Row;
                                    AllDraw.LastColumnQ = CastlesOnTable[i].CastleThinkingQuantum[k].Column;
                                    AllDraw.NextRowQ = CastlesOnTable[i].CastleThinkingQuantum[k].RowColumnCastle[j][0];
                                    AllDraw.NextColumnQ = CastlesOnTable[i].CastleThinkingQuantum[k].RowColumnCastle[j][1];
                                    Act = true;
                                    Less = CastlesOnTable[i].CastleThinkingQuantum[k].NumberOfPenalties;
                                }
                                TableHeuristic = CastlesOnTable[i].CastleThinkingQuantum[k].TableListCastle[j];
                                RegardOccurred = true;
                                //if (((Do == 1 || AA)&&UsePenaltyRegardMechnisamT))
                                //return TableHeuristic;
                                continue;
                            }
                            Object ol = new Object();
                            lock (ol)
                            {
                                if (Order != AllDraw.OrderPlate)
                                    if (CastlesOnTable[i].CastleThinkingQuantum[0].NumberOfPenalties < Less)
                                        continue;
                                //When There is greater Heuristic Movments.
                                if (CastlesOnTable[i].CastleThinkingQuantum[0].NumberOfPenalties < Less)
                                {

                                    //retrive table of current Heuristic.
                                    //retrive table of current Heuristic.
                                    int[,] TableS = CastlesOnTable[i].CastleThinkingQuantum[k].TableListCastle[j];
                                    //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                                    if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                                    {

                                        if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                                            continue;


                                    }
                                    //When there is not Penalty regard mechanism.
                                    //if (!UsePenaltyRegardMechnisamT)
                                    {
                                        AB = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, 4, CloneATable(TableS), Order, CastlesOnTable[i].CastleThinkingQuantum[k].Row, CastlesOnTable[i].CastleThinkingQuantum[k].Column);
                                        //If there is kish or kshachamaz Order.
                                        if (AB.Check(TableS, Order))
                                        {
                                            //When Order is Gray.
                                            if (Order == 1)
                                            {
                                                //Continue When is kish CheckObjectDangour and AStarGreadyFirstSearch .
                                                if (AB.CheckGray)
                                                    continue;
                                            }
                                            else
                                            {
                                                //Continue when CheckBrown and AStarGreadyFirstSearch. 
                                                if (AB.CheckBrown)
                                                    continue;
                                            }
                                        }
                                        else
                                        {

                                        }

                                    }
                                    RW4 = i;
                                    CL4 = k;
                                    Ki4 = j;
                                    RW1 = -1;
                                    CL1 = -1;
                                    Ki1 = -1;
                                    RW2 = -1;
                                    CL2 = -1;
                                    Ki2 = -1;
                                    RW3 = -1;
                                    CL3 = -1;
                                    Ki3 = -1;
                                    RW5 = -1;
                                    CL5 = -1;
                                    Ki5 = -1;
                                    RW6 = -1;
                                    CL6 = -1;
                                    Ki6 = -1;
                                    MaxLess4 = (CastlesOnTable[RW4].CastleThinkingQuantum[CL4].NumberOfPenalties);
                                    if (MaxLess4 > MaxLess1)
                                        MaxLess1 = -1;
                                    if (MaxLess4 > MaxLess2)
                                        MaxLess2 = -1;
                                    if (MaxLess4 > MaxLess3)
                                        MaxLess3 = -1;
                                    if (MaxLess4 > MaxLess5)
                                        MaxLess5 = -1;
                                    if (MaxLess4 > MaxLess6)
                                        MaxLess6 = -1;

                                    if (AStarGreedyi == 1)
                                    {
                                        Object OO = new Object();
                                        lock (OO)
                                        {
                                            if (Order == 1)
                                            {
                                                OutPut.Append("\r\nChess Heuristic Castles By Bob!");

                                            }
                                            else//If Order is Brown.
                                            {
                                                OutPut.Append("\r\nChess Heuristic Castles By Alice!");

                                            }
                                        }
                                        //Set Table and Heuristic Value and Syntax.

                                        Object On = new Object();
                                        lock (On)
                                        {
                                            AllDraw.LastRowQ = CastlesOnTable[i].CastleThinkingQuantum[k].Row;
                                            AllDraw.LastColumnQ = CastlesOnTable[i].CastleThinkingQuantum[k].Column;
                                            AllDraw.NextRowQ = CastlesOnTable[i].CastleThinkingQuantum[k].RowColumnCastle[j][0];
                                            AllDraw.NextColumnQ = CastlesOnTable[i].CastleThinkingQuantum[k].RowColumnCastle[j][1];
                                        }

                                        Act = true;
                                        Less = CastlesOnTable[i].CastleThinkingQuantum[k].NumberOfPenalties;
                                        TableHeuristic = CastlesOnTable[i].CastleThinkingQuantum[k].TableListCastle[j];

                                    }
                                }
                                else//Set Table and Heuristic Value and Syntax.
                                {

                                    if (AStarGreedyi == 1)
                                    {
                                        //TakeRoot.Pointer = this;
                                        //Found of Max Non Probable Movments.
                                        Founded.Clear();
                                        int LessB = Int32.MinValue;
                                        BeginIndexFoundingMaxLessofMaxList(0, Founded, ref LessB);
                                        RW4 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0]];
                                        CL4 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 1];
                                        Ki4 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 2];
                                        if (Founded[0] != MaxCastlesFounded)
                                            continue;

                                        Object On = new Object();
                                        lock (On)
                                        {
                                            AllDraw.LastRowQ = CastlesOnTable[RW4].CastleThinkingQuantum[CL4].Row;
                                            AllDraw.LastColumnQ = CastlesOnTable[RW4].CastleThinkingQuantum[CL4].Column;
                                            AllDraw.NextRowQ = CastlesOnTable[i].CastleThinkingQuantum[k].RowColumnCastle[j][0];
                                            AllDraw.NextColumnQ = CastlesOnTable[i].CastleThinkingQuantum[k].RowColumnCastle[j][1];
                                        }

                                        Act = true;
                                        Less = CastlesOnTable[RW4].CastleThinkingQuantum[CL4].ReturnHeuristic(RW4, Ki4, Order, false, ref HaveKilled);
                                        TableHeuristic = CastlesOnTable[RW4].CastleThinkingQuantum[CL4].TableListCastle[Ki4];
                                        Object OO = new Object();
                                        lock (OO)
                                        {
                                            if (Order == 1)
                                            {
                                                OutPut.Append("\r\nChess Heuristic Sodier By Bob!");

                                            }
                                            else//If Order is Brown.
                                            {
                                                OutPut.Append("\r\nChess Heuristic Sodier By Alice!");

                                            }
                                        }
                                    }


                                }
                            }

                        }


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;

                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;
                }


                for (i = MinisterMidle; i < MinisterHigh; i++)
                {
                    for (int k = 0; k < AllDraw.MinisterMovments; k++)

                        for (j = 0; MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum[k] != null && MinisterOnTable[i].MinisterThinkingQuantum[k] != null && j < MinisterOnTable[i].MinisterThinkingQuantum[k].TableListMinister.Count; j++)
                        {

                            //For Penalty Reagrad Mechanisam of Current Check CheckMate Current Movments.
                            int CDummy = ChessRules.CurrentOrder;
                            int COrder = Order;

                            ChessRules.CurrentOrder *= -1;
                            Order *= -1;
                            Do = 0;
                            if (UsePenaltyRegardMechnisamT)
                            {
                                for (int ij = 0; ij < MinisterOnTable[i].MinisterThinkingQuantum[k].AStarGreedy.Count - 1; ij++)
                                    MinisterOnTable[i].MinisterThinkingQuantum[k].AStarGreedy[ij].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, MinisterOnTable[i].MinisterThinkingQuantum[k].AStarGreedy[ij]);
                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                                ToCheckMate = -1; ForCheckMate = -1; AA = IsToCheckMateHASLessDeeperThanForCheckMate(this, Order, ref ToCheckMate, ref ForCheckMate, 0); if (Do == -1)
                                    continue;
                            }


                            Order = COrder;
                            ChessRules.CurrentOrder = CDummy;

                            if ((MinisterOnTable[i].MinisterThinkingQuantum[k].PenaltyRegardListMinister[j].IsPenaltyAction() != 0 && MinisterOnTable[i].MinisterThinkingQuantum[k].PenaltyRegardListMinister[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((Do == 1 || AA) && UsePenaltyRegardMechnisamT))
                            {

                                Object On = new Object();
                                lock (On)
                                {
                                    AllDraw.LastRowQ = MinisterOnTable[i].MinisterThinkingQuantum[k].Row;
                                    AllDraw.LastColumnQ = MinisterOnTable[i].MinisterThinkingQuantum[k].Column;
                                    AllDraw.NextRowQ = MinisterOnTable[i].MinisterThinkingQuantum[k].RowColumnMinister[j][0];
                                    AllDraw.NextColumnQ = MinisterOnTable[i].MinisterThinkingQuantum[k].RowColumnMinister[j][1];


                                    Act = true;
                                    Less = MinisterOnTable[i].MinisterThinkingQuantum[k].NumberOfPenalties;
                                }
                                TableHeuristic = MinisterOnTable[i].MinisterThinkingQuantum[k].TableListMinister[j];
                                RegardOccurred = true;

                                continue;
                            }
                            Object ol = new Object();
                            lock (ol)
                            {
                                //When There is No Movments in Such Order Enemy continue.
                                if (Order != AllDraw.OrderPlate)
                                    if (MinisterOnTable[i].MinisterThinkingQuantum[0].NumberOfPenalties < Less)
                                        continue;


                                //When There is greater Heuristic Movments.
                                if (MinisterOnTable[i].MinisterThinkingQuantum[0].NumberOfPenalties < Less)
                                //retrive table of current Heuristic.
                                {

                                    //retrive table of current Heuristic.
                                    int[,] TableS = MinisterOnTable[i].MinisterThinkingQuantum[k].TableListMinister[j];
                                    //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                                    if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                                    {

                                        if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                                            continue;

                                    }
                                    //When there is not Penalty regard mechanism.

                                    AB = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, 5, CloneATable(TableS), Order, MinisterOnTable[i].MinisterThinkingQuantum[k].Row, MinisterOnTable[i].MinisterThinkingQuantum[k].Column);
                                    //If there is kish or kshachamaz Order.
                                    if (AB.Check(TableS, Order))
                                    {
                                        //When Order is Gray.
                                        if (Order == 1)
                                        {
                                            //Continue When is kish CheckObjectDangour and AStarGreadyFirstSearch .
                                            if (AB.CheckGray)
                                                continue;
                                        }
                                        else
                                        {
                                            //Continue when CheckBrown and AStarGreadyFirstSearch. 
                                            if (AB.CheckBrown)
                                                continue;
                                        }
                                    }

                                    RW5 = i;
                                    CL5 = k;
                                    Ki5 = j;
                                    RW1 = -1;
                                    CL1 = -1;
                                    Ki1 = -1;
                                    RW2 = -1;
                                    CL2 = -1;
                                    Ki2 = -1;
                                    RW3 = -1;
                                    CL3 = -1;
                                    Ki3 = -1;
                                    RW4 = -1;
                                    CL4 = -1;
                                    Ki4 = -1;
                                    RW6 = -1;
                                    CL6 = -1;
                                    Ki6 = -1;
                                    MaxLess5 = (MinisterOnTable[RW5].MinisterThinkingQuantum[CL5].NumberOfPenalties);
                                    if (MaxLess5 > MaxLess1)
                                        MaxLess1 = -1;
                                    if (MaxLess5 > MaxLess2)
                                        MaxLess2 = -1;
                                    if (MaxLess5 > MaxLess3)
                                        MaxLess3 = -1;
                                    if (MaxLess5 > MaxLess4)
                                        MaxLess4 = -1;
                                    if (MaxLess5 > MaxLess6)
                                        MaxLess6 = -1;
                                    if (AStarGreedyi == 1)
                                    {
                                        Object OO = new Object();
                                        lock (OO)
                                        {
                                            if (Order == 1)
                                            {
                                                OutPut.Append("\r\nChess Heuristic Minister By Bob!");

                                            }
                                            else//If Order is Brown.
                                            {
                                                OutPut.Append("\r\nChess Heuristic Minister By Alice!");

                                            }
                                        }
                                        Object On = new Object();
                                        lock (On)
                                        {
                                            AllDraw.LastRowQ = MinisterOnTable[i].MinisterThinkingQuantum[k].Row;
                                            AllDraw.LastColumnQ = MinisterOnTable[i].MinisterThinkingQuantum[k].Column;
                                            AllDraw.NextRowQ = MinisterOnTable[i].MinisterThinkingQuantum[k].RowColumnMinister[j][0];
                                            AllDraw.NextColumnQ = MinisterOnTable[i].MinisterThinkingQuantum[k].RowColumnMinister[j][1];
                                        }

                                        Act = true;
                                        Less = MinisterOnTable[i].MinisterThinkingQuantum[k].NumberOfPenalties;
                                        TableHeuristic = MinisterOnTable[i].MinisterThinkingQuantum[k].TableListMinister[j];

                                    }
                                }
                                else//Set Table and Heuristic Value and Syntax.
                                {

                                    if (AStarGreedyi == 1)
                                    {
                                        //Found of Max Non Probable Movments.
                                        Founded.Clear();
                                        int LessB = Int32.MinValue;
                                        BeginIndexFoundingMaxLessofMaxList(0, Founded, ref LessB);
                                        RW5 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0]];
                                        CL5 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 1];
                                        Ki5 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 2];
                                        if (Founded[0] != MaxMinisterFounded)
                                            continue;

                                        Object On = new Object();
                                        lock (On)
                                        {
                                            AllDraw.LastRowQ = MinisterOnTable[RW5].MinisterThinkingQuantum[CL5].Row;
                                            AllDraw.LastColumnQ = MinisterOnTable[RW5].MinisterThinkingQuantum[CL5].Column;
                                            AllDraw.NextRowQ = MinisterOnTable[i].MinisterThinkingQuantum[k].RowColumnMinister[j][0];
                                            AllDraw.NextColumnQ = MinisterOnTable[i].MinisterThinkingQuantum[k].RowColumnMinister[j][1];
                                        }
                                        Act = true;
                                        Less = MinisterOnTable[RW5].MinisterThinkingQuantum[CL5].ReturnHeuristic(RW5, Ki5, Order, false, ref HaveKilled);
                                        TableHeuristic = MinisterOnTable[RW5].MinisterThinkingQuantum[CL5].TableListMinister[Ki5];
                                        Object OO = new Object();
                                        lock (OO)
                                        {
                                            if (Order == 1)
                                            {
                                                OutPut.Append("\r\nChess Heuristic Sodier By Bob!");

                                            }
                                            else//If Order is Brown.
                                            {
                                                OutPut.Append("\r\nChess Heuristic Sodier By Alice!");

                                            }
                                        }
                                    }

                                }
                            }

                        }


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;
                }
                Order = DummyOrder;
                ChessRules.CurrentOrder = DummyCurrentOrder;

                for (i = KingMidle; i < KingHigh; i++)
                {
                    for (int k = 0; k < AllDraw.KingMovments; k++)

                        for (j = 0; KingOnTable != null && KingOnTable[i] != null && KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum[k] != null && KingOnTable[i].KingThinkingQuantum[k] != null && j < KingOnTable[i].KingThinkingQuantum[k].TableListKing.Count; j++)
                        {

                            int CDummy = ChessRules.CurrentOrder;
                            int COrder = Order;

                            ChessRules.CurrentOrder *= -1;
                            Order *= -1;
                            Do = 0;
                            if (UsePenaltyRegardMechnisamT)
                            {
                                for (int ij = 0; ij < KingOnTable[i].KingThinkingQuantum[k].AStarGreedy.Count - 1; ij++)
                                    KingOnTable[i].KingThinkingQuantum[k].AStarGreedy[ij].IsPenaltyRegardCheckMateAtBranch(Order, ref Do, KingOnTable[i].KingThinkingQuantum[k].AStarGreedy[ij]);
                                Order = COrder;
                                ChessRules.CurrentOrder = CDummy;
                                ToCheckMate = -1; ForCheckMate = -1; AA = IsToCheckMateHASLessDeeperThanForCheckMate(this, Order, ref ToCheckMate, ref ForCheckMate, 0); if (Do == -1)
                                    continue;
                            }


                            Order = COrder;
                            ChessRules.CurrentOrder = CDummy;

                            if ((KingOnTable[i].KingThinkingQuantum[k].PenaltyRegardListKing[j].IsPenaltyAction() != 0 && KingOnTable[i].KingThinkingQuantum[k].PenaltyRegardListKing[j].IsRewardAction() == 1 && AStarGreedyi == 1) || ((Do == 1 || AA) && UsePenaltyRegardMechnisamT))
                            {

                                Object On = new Object();
                                lock (On)
                                {
                                    AllDraw.LastRowQ = KingOnTable[i].KingThinkingQuantum[k].Row;
                                    AllDraw.LastColumnQ = KingOnTable[i].KingThinkingQuantum[k].Column;
                                    AllDraw.NextRowQ = KingOnTable[i].KingThinkingQuantum[k].RowColumnKing[j][0];
                                    AllDraw.NextColumnQ = KingOnTable[i].KingThinkingQuantum[k].RowColumnKing[j][1];


                                    Act = true;
                                    Less = KingOnTable[i].KingThinkingQuantum[k].NumberOfPenalties;
                                }
                                TableHeuristic = KingOnTable[i].KingThinkingQuantum[k].TableListKing[j];
                                RegardOccurred = true;

                                continue;
                            }
                            Object ol = new Object();
                            lock (ol)
                            {

                                //When There is No Movments in Such Order Enemy continue.
                                if (Order != AllDraw.OrderPlate)
                                    if (KingOnTable[i].KingThinkingQuantum[0].NumberOfPenalties < Less)
                                        continue;


                                //When There is greater Heuristic Movments.
                                if (KingOnTable[i].KingThinkingQuantum[0].NumberOfPenalties < Less)
                                //retrive table of current Heuristic.
                                {


                                    //retrive table of current Heuristic.
                                    int[,] TableS = KingOnTable[i].KingThinkingQuantum[k].TableListKing[j];
                                    //checked for Legal Movments ArgumentOutOfRangeException curnt game.
                                    if (DynamicAStarGreedytPrograming && !CurrentTableHeuristic && AStarGreedyi == 1)
                                    {

                                        if (!IsEnemyThingsinStable(TableS, AllDraw.TableListAction[AllDraw.TableListAction.Count - 1], AllDraw.OrderPlate))
                                            continue;


                                    }
                                    //When there is not Penalty regard mechanism.

                                    AB = new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, 6, CloneATable(TableS), Order, KingOnTable[i].KingThinkingQuantum[k].Row, KingOnTable[i].KingThinkingQuantum[k].Column);
                                    //If there is kish or kshachamaz Order.
                                    if (AB.Check(TableS, Order))
                                    {
                                        //When Order is Gray.
                                        if (Order == 1)
                                        {
                                            //Continue When is kish CheckObjectDangour and AStarGreadyFirstSearch .
                                            if (AB.CheckGray)
                                                continue;
                                        }
                                        else
                                        {
                                            //Continue when CheckBrown and AStarGreadyFirstSearch. 
                                            if (AB.CheckBrown)
                                                continue;
                                        }
                                    }



                                    RW6 = i;
                                    CL6 = k;
                                    Ki6 = j;
                                    RW1 = -1;
                                    CL1 = -1;
                                    Ki1 = -1;
                                    RW2 = -1;
                                    CL2 = -1;
                                    Ki2 = -1;
                                    RW3 = -1;
                                    CL3 = -1;
                                    Ki3 = -1;
                                    RW4 = -1;
                                    CL4 = -1;
                                    Ki4 = -1;
                                    RW5 = -1;
                                    CL5 = -1;
                                    Ki5 = -1;
                                    MaxLess6 = (KingOnTable[RW6].KingThinkingQuantum[CL6].NumberOfPenalties);
                                    if (MaxLess6 > MaxLess1)
                                        MaxLess1 = -1;
                                    if (MaxLess6 > MaxLess2)
                                        MaxLess2 = -1;
                                    if (MaxLess6 > MaxLess3)
                                        MaxLess3 = -1;
                                    if (MaxLess6 > MaxLess4)
                                        MaxLess4 = -1;
                                    if (MaxLess6 > MaxLess5)
                                        MaxLess5 = -1;
                                    if (AStarGreedyi == 1)
                                    {
                                        Object OO = new Object();
                                        lock (OO)
                                        {
                                            if (Order == 1)
                                            {
                                                OutPut.Append("\r\nChess Heuristic King By Bob!");

                                            }
                                            else//If Order is Brown.
                                            {
                                                OutPut.Append("\r\nChess Heuristic King By Alice!");

                                            }
                                        }
                                        Object On = new Object();
                                        lock (On)
                                        {
                                            AllDraw.LastRowQ = KingOnTable[i].KingThinkingQuantum[k].Row;
                                            AllDraw.LastColumnQ = KingOnTable[i].KingThinkingQuantum[k].Column;
                                            AllDraw.NextRowQ = KingOnTable[i].KingThinkingQuantum[k].RowColumnKing[j][0];
                                            AllDraw.NextColumnQ = KingOnTable[i].KingThinkingQuantum[k].RowColumnKing[j][1];
                                        }

                                        Act = true;
                                        Less = KingOnTable[i].KingThinkingQuantum[k].NumberOfPenalties;
                                        TableHeuristic = KingOnTable[i].KingThinkingQuantum[k].TableListKing[j];

                                    }
                                }
                                else//Set Table and Heuristic Value and Syntax.
                                {

                                    if (AStarGreedyi == 1)
                                    {
                                        //TakeRoot.Pointer = this;
                                        //Found of Max Non Probable Movments.
                                        Founded.Clear();
                                        int LessB = Int32.MinValue;
                                        BeginIndexFoundingMaxLessofMaxList(0, Founded, ref LessB);
                                        if (Founded[0] != 1)
                                            continue;
                                        RW6 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0]];
                                        CL6 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 1];
                                        Ki6 = (int)MaxHeuristicAStarGreedytBackWard[0][(int)Founded[0] + 2];
                                        if (Founded[0] != MaxKingFounded)
                                            continue;

                                        Object On = new Object();
                                        lock (On)
                                        {
                                            AllDraw.LastRowQ = KingOnTable[RW6].KingThinkingQuantum[CL6].Row;
                                            AllDraw.LastColumnQ = KingOnTable[RW6].KingThinkingQuantum[CL6].Column;
                                            AllDraw.NextRowQ = KingOnTable[i].KingThinkingQuantum[k].RowColumnKing[j][0];
                                            AllDraw.NextColumnQ = KingOnTable[i].KingThinkingQuantum[k].RowColumnKing[j][1];
                                        }

                                        Act = true;
                                        Less = KingOnTable[RW6].KingThinkingQuantum[CL6].ReturnHeuristic(RW6, Ki6, Order, false, ref HaveKilled);
                                        TableHeuristic = KingOnTable[RW6].KingThinkingQuantum[CL6].TableListKing[Ki6];
                                        Object OO = new Object();
                                        lock (OO)
                                        {
                                            if (Order == 1)
                                            {
                                                OutPut.Append("\r\nChess Heuristic Sodier By Bob!");

                                            }
                                            else//If Order is Brown.
                                            {
                                                OutPut.Append("\r\nChess Heuristic Sodier By Alice!");

                                            }
                                        }
                                    }
                                }
                            }

                        }


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;
                }
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BrownHeuristicAStarGreaedySearchPenalites:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        //AStarGreedy First Heuristic Method.
        public int[,] HeuristicAStarGreedySearch(int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {
                int[,] TableHeuristic = new int[8, 8];

                AStarGreedyi++;
                int DummyOrder = Order;
                int DummyCurrentOrder = ChessRules.CurrentOrder;
                //Initiate For Dynamic Backward Current AStarGreedyi Non Minus Founded Max Movments Detection Global Variables.
                List<int> Founded = new List<int>();
                //Initiateing Indicating Heuristic Multiple Same Value Best Found of Movments.
                MaxLess1 = -1;
                MaxLess2 = -1;
                MaxLess3 = -1;
                MaxLess4 = -1;
                MaxLess5 = -1;
                MaxLess6 = -1;
                RW1 = -1;
                CL1 = -1;
                Ki1 = -1;
                RW2 = -1;
                CL2 = -1;
                Ki2 = -1;
                RW3 = -1;
                CL3 = -1;
                Ki3 = -1;
                RW4 = -1;
                CL4 = -1;
                Ki4 = -1;
                RW5 = -1;
                CL5 = -1;
                Ki5 = -1;
                RW6 = -1;
                CL6 = -1;
                Ki6 = -1;

                int[] BacWard = new int[25];
                Object Omm = new Object();
                lock (Omm)
                {

                    if (AStarGreedyi > MaxAStarGreedy)
                        return TableHeuristic;
                }
                bool Act = false;

                if (Order == 1)
                {
                    TableHeuristic = HeuristicAStarGreadySearchGray(AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);
                }
                else
                {
                    TableHeuristic = HeuristicAStarGreadySearchBrown(AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);
                }

                Order = DummyOrder;
                ChessRules.CurrentOrder = DummyCurrentOrder;
                //Store In Local Variable and Dynamic Purpose Proccessing.
                //Every Non Minuse Non Idept in List HAS Gretest Max Order.
                //Is Desired of Idept Oner Best Movments.
                BacWard[0] = AStarGreedyi;

                BacWard[1] = MaxLess1;
                BacWard[2] = RW1;
                BacWard[3] = RW1;
                BacWard[4] = Ki1;


                BacWard[5] = MaxLess2;
                BacWard[6] = RW2;
                BacWard[7] = RW2;
                BacWard[8] = Ki2;

                BacWard[9] = MaxLess3;
                BacWard[10] = RW3;
                BacWard[11] = RW3;
                BacWard[12] = Ki3;

                BacWard[13] = MaxLess4;
                BacWard[14] = RW4;
                BacWard[15] = RW4;
                BacWard[16] = Ki4;

                BacWard[17] = MaxLess5;
                BacWard[18] = RW5;
                BacWard[19] = RW5;
                BacWard[20] = Ki5;

                BacWard[21] = MaxLess6;
                BacWard[22] = RW6;
                BacWard[23] = RW6;
                BacWard[24] = Ki6;

                //We Have Information of Maximum of Heuristic in Each Level and Table.
                MaxHeuristicAStarGreedytBackWard.Add(BacWard);
                MaxHeuristicAStarGreedytBackWardTable.Add(TableHeuristic);

                Founded.Clear();
                //If Found retrun table.
                if (Act)
                    return TableHeuristic;
                //Return what found table.
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreedySearch:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return TableHeuristic;
            }
        }
        public int[,] HeuristicAStarGreedySearchPenalties(int AStarGreedyi, Color a, int Order, bool CurrentTableHeuristic)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {
                int[,] TableHeuristic = new int[8, 8];

                AStarGreedyi++;
                int DummyOrder = Order;
                int DummyCurrentOrder = ChessRules.CurrentOrder;
                //Initiate For Dynamic Backward Current AStarGreedyi Non Minus Founded Max Movments Detection Global Variables.
                List<int> Founded = new List<int>();
                //Initiateing Indicating Heuristic Multiple Same Value Best Found of Movments.
                MaxLess1 = -1;
                MaxLess2 = -1;
                MaxLess3 = -1;
                MaxLess4 = -1;
                MaxLess5 = -1;
                MaxLess6 = -1;
                RW1 = -1;
                CL1 = -1;
                Ki1 = -1;
                RW2 = -1;
                CL2 = -1;
                Ki2 = -1;
                RW3 = -1;
                CL3 = -1;
                Ki3 = -1;
                RW4 = -1;
                CL4 = -1;
                Ki4 = -1;
                RW5 = -1;
                CL5 = -1;
                Ki5 = -1;
                RW6 = -1;
                CL6 = -1;
                Ki6 = -1;

                int[] BacWard = new int[25];
                Object Omm = new Object();
                lock (Omm)
                {
                    if (AStarGreedyi > MaxAStarGreedy)
                        return TableHeuristic;
                }
                bool Act = false;
                if (Order == 1)
                {
                    TableHeuristic = HeuristicAStarGreadySearchPenalties(AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);
                }
                else
                {
                    TableHeuristic = BrownHeuristicAStarGreaedySearchPenalites(AStarGreedyi, a, Order, CurrentTableHeuristic, ref Act);
                }

                Order = DummyOrder;
                ChessRules.CurrentOrder = DummyCurrentOrder;
                //Store In Local Variable and Dynamic Purpose Proccessing.
                //Every Non Minuse Non Idept in List HAS Gretest Max Order.
                //Is Desired of Idept Oner Best Movments.
                BacWard[0] = AStarGreedyi;

                BacWard[1] = MaxLess1;
                BacWard[2] = RW1;
                BacWard[3] = RW1;
                BacWard[4] = Ki1;


                BacWard[5] = MaxLess2;
                BacWard[6] = RW2;
                BacWard[7] = RW2;
                BacWard[8] = Ki2;

                BacWard[9] = MaxLess3;
                BacWard[10] = RW3;
                BacWard[11] = RW3;
                BacWard[12] = Ki3;

                BacWard[13] = MaxLess4;
                BacWard[14] = RW4;
                BacWard[15] = RW4;
                BacWard[16] = Ki4;

                BacWard[17] = MaxLess5;
                BacWard[18] = RW5;
                BacWard[19] = RW5;
                BacWard[20] = Ki5;

                BacWard[21] = MaxLess6;
                BacWard[22] = RW6;
                BacWard[23] = RW6;
                BacWard[24] = Ki6;

                //We Have Information of Maximum of Heuristic in Each Level and Table.
                MaxHeuristicAStarGreedytBackWard.Add(BacWard);
                MaxHeuristicAStarGreedytBackWardTable.Add(TableHeuristic);

                Founded.Clear();
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("HeuristicAStarGreedySearchPenalties:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                //If Found retrun table.
                if (Act)
                    return TableHeuristic;
                //Return what found table.
                return TableHeuristic;
            }
        }
        //Genethic Algorithm Game Method.
        public void InitiateGenetic(int ii, int jj, Color a, int[,] Table, int Order, bool TB)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {
                //Initiate Local and Global Variables.
                int Current = ChessRules.CurrentOrder;
                int DummyOrder = Order;

                TableList.Add(Table);


                Object OO = new Object();
                lock (OO)
                {
                    ThinkingQuantumChess.NotSolvedKingDanger = false;
                }
                LoopHeuristicIndex = 0;
                //For One time.
                for (var i = 0; i < 1; i++)
                {
                    //If Order is Gray.
                    Object O2 = new Object();
                    lock (O2)
                    {
                        if (Order == 1)
                        {
                            OutPut.Append("\r\nChess Genetic By Bob!");

                        }
                        else//If Order is Brown.
                        {
                            OutPut.Append("\r\nChess Genetic By Alice!");


                        }
                    }
                    //Initiate Local Variables.
                    int[,] TablInit = new int[8, 8];
                    if (Order == 1)
                        a = Color.Gray;
                    else
                        a = Color.Brown;
                    int In = 0;
                    //Found Of Random Movments.
                    do
                    {
                        if (Order == 1)
                            In = (new System.Random()).Next(0, 8);
                        else
                            In = (new System.Random()).Next(8, 16);
                    } while (SolderesOnTable[In] == null);


                    //If Order is Gray.
                    Object OOO = new Object();
                    lock (OOO)
                    {
                        if (Order == 1)
                        {
                            OutPut.Append("\r\nGenetic Algorithm Begin AStarGreedy " + i.ToString() + " By Bob!");

                        }
                        else//If Order is Brown.
                        {
                            OutPut.Append("\r\nGenetic Algirithm Begin AStarGreedy " + i.ToString() + " By Alice!");


                        }
                    }
                    //Found Of Genetic Algorithm Movments By GeneticAlgorithm Call Objectsand Method.
                    ChessGeneticAlgorithm R = (new ChessGeneticAlgorithm(MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    //Found Table.
                    int[,] Tab = R.GenerateTable(TableListAction, 0, Order);
                    //If Order is Gray.
                    Object OOO1 = new Object();
                    lock (OOO1)
                    {
                        if (Order == 1)
                        {
                            OutPut.Append("\r\nGenetic Algorithm Finsished AStarGreedy " + i.ToString() + " By Bob!");

                        }
                        else//If Order is Brown.
                        {
                            OutPut.Append("\r\nGenetic Algirithm Finished AStarGreedy " + i.ToString() + " By Alice!");


                        }
                    }

                    //If Table Found.
                    if (Tab != null)
                    {
                        //Construct a Clone Copy of Table.
                        for (var iii = 0; iii < 8; iii++)
                            for (var jjj = 0; jjj < 8; jjj++)
                            {
                                TablInit[iii, jjj] = Tab[iii, jjj];
                            }
                        //Initiate a Table.
                        Table = new int[8, 8];
                        //Construct a Clone Copy of Table.
                        for (var iii = 0; iii < 8; iii++)
                            for (var jjj = 0; jjj < 8; jjj++)
                            {
                                Table[iii, jjj] = TablInit[iii, jjj];
                            }
                        //Initiate Local and Global Varibales.
                        TableList.Add(TablInit);
                        ClList.Add(CL);
                        RWList.Add(RW);
                        KiList.Add(Ki);
                        // Order = Order * -1;
                        // ChessRules.CurrentOrder = Order;
                        AStarGreedy++;
                        //return;

                    }
                }
            //Determination of CheckMate Consideration.
            (new ChessRules(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, 1, CloneATable(Table), Order, -1, -1)).CheckMate(CloneATable(Table), Order);

                //Reconstruction of Order Global Varibales.
                Order = DummyOrder;
                ChessRules.CurrentOrder = Current;

                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateGenetic:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            }
        }
        //AStarGreedy First Initiat ThinkingQuantum Main Method.
        public AllDraw InitiateAStarGreedytOneNode(int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, int iIndex, int KindIndex, int LeafAStarGreedy
            )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            {
                SetObjectNumbers(Tab);
                //List<Task> tHA = new List<Task>();
                int[,] Table = new int[8, 8];
                for (var iii = 0; iii < 8; iii++)
                    for (var jjj = 0; jjj < 8; jjj++)
                        Table[iii, jjj] = Tab[iii, jjj];

                Object O = new Object();
                lock (O)
                {
                    ThinkingQuantumChess.BeginThread = 0;
                    ThinkingQuantumChess.EndThread = 0;
                }
                //Initiate of global Variables Byte Local Variables.
                int DummyOrder = new int();
                DummyOrder = Order;
                int DummyCurrentOrder = new int();
                DummyCurrentOrder = ChessRules.CurrentOrder;

                int[,] TablInit = new int[8, 8];
                if (Order == 1)
                    a = Color.Gray;
                else
                    a = Color.Brown;
                var j = 0;
                Object Omm = new Object();
                lock (Omm)
                {
                    if (iAStarGreedy >= MaxAStarGreedy)
                        return null;
                }

                iAStarGreedy++;




                //If Order is Gray.
                if (Order == 1)
                {
                    //For Gray Soldeirs Objects. 
                    //                    for (i = 0; i < SodierMidle; i++)
                    if (KindIndex == 1)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        //If Solders Not Exist Continue and Traversal Back.
                        //If There is no ThinkingQuantum Movments on Current Object  


                        bool ASS = false; Object OOOAAA = new Object(); lock (OOOAAA)
                        { ASS = AllDraw.Blitz; }
                        if (!ASS)
                        {
                            //ThinkingQuantum of Gray Solder Operation.
                            SolderesOnTable[iIndex].SoldierThinkingQuantum[0].ThinkingQuantumBegin = true;
                            SolderesOnTable[iIndex].SoldierThinkingQuantum[0].ThinkingQuantumFinished = false;
                            SolderesOnTable[iIndex].SoldierThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref SolderesOnTable[iIndex].LoseOcuuredatChiled, ref SolderesOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(SolderesOnTable[iIndex].SoldierThinkingQuantum[0].ThinkingQuantum));
                                            SolderesOnTable[iIndex].SoldierThinkingQuantum[0].t.Start();
                                            if (SolderesOnTable[iIndex].SoldierThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                { tH.Add(SolderesOnTable[iIndex].SoldierThinkingQuantum[0].t); } }*/
                        }
                        else if (ASS)
                        //If There is A Soldeir Movments.                                   
                        {

                            //ThinkingQuantum of Gray Soldeir Operations.
                            SolderesOnTable[iIndex].SoldierThinkingQuantum[0].ThinkingQuantumBegin = true;
                            SolderesOnTable[iIndex].SoldierThinkingQuantum[0].ThinkingQuantumFinished = false;
                            SolderesOnTable[iIndex].SoldierThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref SolderesOnTable[iIndex].LoseOcuuredatChiled, ref SolderesOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(SolderesOnTable[iIndex].SoldierThinkingQuantum[0].ThinkingQuantum));
                                            SolderesOnTable[iIndex].SoldierThinkingQuantum[0].t.Start();
                                            if (SolderesOnTable[iIndex].SoldierThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                    { tH.Add(SolderesOnTable[iIndex].SoldierThinkingQuantum[0].t); } }*/
                        }

                    }
                    //Progressing.
                    //For All Gray Elephant Objects.

                    if (KindIndex == 2)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        //Ignore of Non Exist Current Elephant Gray Objects.
                        bool ASS = false; Object OOOAAA = new Object(); lock (OOOAAA)
                        { ASS = AllDraw.Blitz; }
                        if (!ASS)
                        {
                            //Operational ThinkingQuantum Gray Elephant. 
                            ElephantOnTable[iIndex].ElefantThinkingQuantum[0].ThinkingQuantumBegin = true;
                            ElephantOnTable[iIndex].ElefantThinkingQuantum[0].ThinkingQuantumFinished = false;
                            ElephantOnTable[iIndex].ElefantThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref ElephantOnTable[iIndex].LoseOcuuredatChiled, ref ElephantOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(ElephantOnTable[iIndex].ElefantThinkingQuantum[0].ThinkingQuantum));
                                            ElephantOnTable[iIndex].ElefantThinkingQuantum[0].t.Start();
                                            if (ElephantOnTable[iIndex].ElefantThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                { tH.Add(ElephantOnTable[iIndex].ElefantThinkingQuantum[0].t); } }*/
                        }//If There is Movment ThinkingQuantum Gary Elphant Object List.
                        else if (ASS)
                        {
                            //For Every Gray Elephant ThinkingQuantum Movments.
                            //Gray Elephant Object ThinkingQuantum Operations.
                            ElephantOnTable[iIndex].ElefantThinkingQuantum[0].ThinkingQuantumBegin = true;
                            ElephantOnTable[iIndex].ElefantThinkingQuantum[0].ThinkingQuantumFinished = false;
                            ElephantOnTable[iIndex].ElefantThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref ElephantOnTable[iIndex].LoseOcuuredatChiled, ref ElephantOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(ElephantOnTable[iIndex].ElefantThinkingQuantum[0].ThinkingQuantum));
                                            ElephantOnTable[iIndex].ElefantThinkingQuantum[0].t.Start();
                                            if (ElephantOnTable[iIndex].ElefantThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                    { tH.Add(ElephantOnTable[iIndex].ElefantThinkingQuantum[0].t); } }*/
                        }

                    }
                    //Progressing.

                    //For All Gray Hourse Objects.
                    if (KindIndex == 3)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;

                        bool ASS = false; Object OOOAAA = new Object(); lock (OOOAAA)
                        { ASS = AllDraw.Blitz; }
                        if (!ASS)
                        {
                            //ThinkingQuantum of Gray Hourse Oprational.
                            HoursesOnTable[iIndex].HourseThinkingQuantum[0].ThinkingQuantumBegin = true;
                            HoursesOnTable[iIndex].HourseThinkingQuantum[0].ThinkingQuantumFinished = false;
                            HoursesOnTable[iIndex].HourseThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref HoursesOnTable[iIndex].LoseOcuuredatChiled, ref HoursesOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(HoursesOnTable[iIndex].HourseThinkingQuantum[0].ThinkingQuantum));
                                            HoursesOnTable[iIndex].HourseThinkingQuantum[0].t.Start();
                                            if (HoursesOnTable[iIndex].HourseThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt)
                                                { tH.Add(HoursesOnTable[iIndex].HourseThinkingQuantum[0].t); } }*/
                        }
                        else if (ASS)//If Table List Exist int The ThinkingQuantum.
                        {

                            //ThinkingQuantum Operation of Gray Hourse.
                            HoursesOnTable[iIndex].HourseThinkingQuantum[0].TableT = HoursesOnTable[iIndex].HourseThinkingQuantum[0].TableListHourse[j];
                            HoursesOnTable[iIndex].HourseThinkingQuantum[0].ThinkingQuantumBegin = true;
                            HoursesOnTable[iIndex].HourseThinkingQuantum[0].ThinkingQuantumFinished = false;
                            HoursesOnTable[iIndex].HourseThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref HoursesOnTable[iIndex].LoseOcuuredatChiled, ref HoursesOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(HoursesOnTable[iIndex].HourseThinkingQuantum[0].ThinkingQuantum));
                                            HoursesOnTable[iIndex].HourseThinkingQuantum[0].t.Start();
                                            if (HoursesOnTable[iIndex].HourseThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                    { tH.Add(HoursesOnTable[iIndex].HourseThinkingQuantum[0].t); } }*/
                        }

                    }
                    //Progressing.


                    if (KindIndex == 4)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        bool ASS = false; Object OOOAAA = new Object(); lock (OOOAAA)
                        { ASS = AllDraw.Blitz; }
                        if (!ASS)
                        {
                            //When There is Possible ThinkingQuantum Castle of Gray Table
                            //ThinkingQuantum of Gray Castles Operational.
                            CastlesOnTable[iIndex].CastleThinkingQuantum[0].ThinkingQuantumBegin = true;
                            CastlesOnTable[iIndex].CastleThinkingQuantum[0].ThinkingQuantumFinished = false;
                            CastlesOnTable[iIndex].CastleThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref CastlesOnTable[iIndex].LoseOcuuredatChiled, ref CastlesOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(CastlesOnTable[iIndex].CastleThinkingQuantum[0].ThinkingQuantum));
                                            CastlesOnTable[iIndex].CastleThinkingQuantum[0].t.Start();
                                            if (CastlesOnTable[iIndex].CastleThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                { tH.Add(CastlesOnTable[iIndex].CastleThinkingQuantum[0].t); } }*/

                        }
                        else if (ASS)
                        {
                            //When There is Possible ThinkingQuantum Castle of Gray Table
                            //ThinkingQuantum of Gray Castles  Objective Movments.
                            CastlesOnTable[iIndex].CastleThinkingQuantum[0].TableT = CastlesOnTable[iIndex].CastleThinkingQuantum[0].TableListCastle[j];
                            CastlesOnTable[iIndex].CastleThinkingQuantum[0].ThinkingQuantumBegin = true;
                            CastlesOnTable[iIndex].CastleThinkingQuantum[0].ThinkingQuantumFinished = false;
                            CastlesOnTable[iIndex].CastleThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref CastlesOnTable[iIndex].LoseOcuuredatChiled, ref CastlesOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(CastlesOnTable[iIndex].CastleThinkingQuantum[0].ThinkingQuantum));
                                            CastlesOnTable[iIndex].CastleThinkingQuantum[0].t.Start();
                                            if (CastlesOnTable[iIndex].CastleThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                    { tH.Add(CastlesOnTable[iIndex].CastleThinkingQuantum[0].t); } }*/
                        }

                    }
                    if (KindIndex == 5)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        bool ASS = false; Object OOOAAA = new Object(); lock (OOOAAA)
                        { ASS = AllDraw.Blitz; }
                        if (!ASS)
                        {//When There is Table Gray Minister Count of ThinkingQuantum.
                         //ThinkingQuantum of Gray Minister Operational.
                            MinisterOnTable[iIndex].MinisterThinkingQuantum[0].ThinkingQuantumBegin = true;
                            MinisterOnTable[iIndex].MinisterThinkingQuantum[0].ThinkingQuantumFinished = false;
                            MinisterOnTable[iIndex].MinisterThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref HoursesOnTable[iIndex].LoseOcuuredatChiled, ref HoursesOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(MinisterOnTable[iIndex].MinisterThinkingQuantum[0].ThinkingQuantum));
                                            MinisterOnTable[iIndex].MinisterThinkingQuantum[0].t.Start();
                                            if (MinisterOnTable[iIndex].MinisterThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                { tH.Add(MinisterOnTable[iIndex].MinisterThinkingQuantum[0].t); } }*/
                        }
                        else if (ASS)//When There is Table Gray Minister Count of ThinkingQuantum.
                        {
                            //ThinkingQuantum.
                            MinisterOnTable[iIndex].Table = MinisterOnTable[iIndex].MinisterThinkingQuantum[0].TableListMinister[j];
                            MinisterOnTable[iIndex].MinisterThinkingQuantum[0].ThinkingQuantumBegin = true;
                            MinisterOnTable[iIndex].MinisterThinkingQuantum[0].ThinkingQuantumFinished = false;
                            MinisterOnTable[iIndex].MinisterThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref HoursesOnTable[iIndex].LoseOcuuredatChiled, ref HoursesOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(MinisterOnTable[iIndex].MinisterThinkingQuantum[0].ThinkingQuantum));
                                            MinisterOnTable[iIndex].MinisterThinkingQuantum[0].t.Start();
                                            if (MinisterOnTable[iIndex].MinisterThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                    { tH.Add(MinisterOnTable[iIndex].MinisterThinkingQuantum[0].t); } }*/
                        }

                    }

                    if (KindIndex == 6)
                    {


                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        bool ASS = false; Object OOOAAA = new Object(); lock (OOOAAA)
                        { ASS = AllDraw.Blitz; }
                        if (!ASS)
                        {//When ThinkingQuantum Gray King Count of Existing Operations.
                         //ThinkingQuantum Of Gray King Operatins.
                            KingOnTable[iIndex].KingThinkingQuantum[0].ThinkingQuantumBegin = true;
                            KingOnTable[iIndex].KingThinkingQuantum[0].ThinkingQuantumFinished = false;
                            KingOnTable[iIndex].KingThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref HoursesOnTable[iIndex].LoseOcuuredatChiled, ref HoursesOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(KingOnTable[iIndex].KingThinkingQuantum[0].ThinkingQuantum));
                                            KingOnTable[iIndex].KingThinkingQuantum[0].t.Start();
                                            if (KingOnTable[iIndex].KingThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                { tH.Add(KingOnTable[iIndex].KingThinkingQuantum[0].t); } }*/
                        }
                        else if (ASS)//When ThinkingQuantum Gray King Count of Existing Operations.
                        {
                            //Gray King ThinkingQuantum Operations.                                        
                            KingOnTable[iIndex].KingThinkingQuantum[0].ThinkingQuantumBegin = true;
                            KingOnTable[iIndex].KingThinkingQuantum[0].ThinkingQuantumFinished = false;
                            KingOnTable[iIndex].KingThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref HoursesOnTable[iIndex].LoseOcuuredatChiled, ref HoursesOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(KingOnTable[iIndex].KingThinkingQuantum[0].ThinkingQuantum));
                                            KingOnTable[iIndex].KingThinkingQuantum[0].t.Start();
                                            if (KingOnTable[iIndex].KingThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                { tH.Add(KingOnTable[iIndex].KingThinkingQuantum[0].t); } }*/
                        }

                    }
                }
                else//Brown Order Considarations.
                {

                    if (KindIndex == -1)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        bool ASS = false; Object OOOAAA = new Object(); lock (OOOAAA)
                        { ASS = AllDraw.Blitz; }
                        if (!ASS)//When There is Current Brown Existing Objective ThinkingQuantum Movments.
                        {
                            //Wheen Brown King Object There is Not Continue Traversal Back.
                            //ThinkingQuantum Operations of Brown Current Objects.
                            SolderesOnTable[iIndex].SoldierThinkingQuantum[0].ThinkingQuantumBegin = true;
                            SolderesOnTable[iIndex].SoldierThinkingQuantum[0].ThinkingQuantumFinished = false;
                            SolderesOnTable[iIndex].SoldierThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref SolderesOnTable[iIndex].LoseOcuuredatChiled, ref SolderesOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(SolderesOnTable[iIndex].SoldierThinkingQuantum[0].ThinkingQuantum));
                                            SolderesOnTable[iIndex].SoldierThinkingQuantum[0].t.Start();
                                            if (SolderesOnTable[iIndex].SoldierThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                { tH.Add(SolderesOnTable[iIndex].SoldierThinkingQuantum[0].t); } }*/

                        }

                        else if (ASS)//When There is Current Brown Existing Objective ThinkingQuantum Movments.
                        {
                            //ThinkingQuantum of ThinkingQuantum Brown CurrentTable Objective Operations.
                            SolderesOnTable[iIndex].SoldierThinkingQuantum[0].ThinkingQuantumBegin = true;
                            SolderesOnTable[iIndex].SoldierThinkingQuantum[0].ThinkingQuantumFinished = false;
                            SolderesOnTable[iIndex].SoldierThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref SolderesOnTable[iIndex].LoseOcuuredatChiled, ref SolderesOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(SolderesOnTable[iIndex].SoldierThinkingQuantum[0].ThinkingQuantum));
                                            SolderesOnTable[iIndex].SoldierThinkingQuantum[0].t.Start();
                                            if (SolderesOnTable[iIndex].SoldierThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                { tH.Add(SolderesOnTable[iIndex].SoldierThinkingQuantum[0].t); } }*/

                        }

                    }
                    if (KindIndex == -2)
                    {

                        bool ASS = false; Object OOOAAA = new Object(); lock (OOOAAA)
                        { ASS = AllDraw.Blitz; }
                        if (!ASS)
                        {//When There is Current Brown Existing Objective ThinkingQuantum Movments.
                            Order = DummyOrder;
                            ChessRules.CurrentOrder = DummyCurrentOrder;
                            //ThinkingQuantum Operations of Brown Current Objects.
                            ElephantOnTable[iIndex].ElefantThinkingQuantum[0].ThinkingQuantumBegin = true;
                            ElephantOnTable[iIndex].ElefantThinkingQuantum[0].ThinkingQuantumFinished = false;
                            ElephantOnTable[iIndex].ElefantThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref ElephantOnTable[iIndex].LoseOcuuredatChiled, ref ElephantOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(ElephantOnTable[iIndex].ElefantThinkingQuantum[0].ThinkingQuantum));
                                            ElephantOnTable[iIndex].ElefantThinkingQuantum[0].t.Start();
                                            if (ElephantOnTable[iIndex].ElefantThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                { tH.Add(ElephantOnTable[iIndex].ElefantThinkingQuantum[0].t); } }*/
                        }
                        else if (ASS)//When There is Current Brown Existing Objective ThinkingQuantum Movments.
                        {
                            //Inititae Local Varibale By Global Gray Elephant Objects Varibales.
                            //ThinkingQuantum of ThinkingQuantum Brown CurrentTable Objective Operations.                                                   
                            ElephantOnTable[iIndex].ElefantThinkingQuantum[0].ThinkingQuantumBegin = true;
                            ElephantOnTable[iIndex].ElefantThinkingQuantum[0].ThinkingQuantumFinished = false;
                            ElephantOnTable[iIndex].ElefantThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref ElephantOnTable[iIndex].LoseOcuuredatChiled, ref ElephantOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(ElephantOnTable[iIndex].ElefantThinkingQuantum[0].ThinkingQuantum));
                                            ElephantOnTable[iIndex].ElefantThinkingQuantum[0].t.Start();
                                            if (ElephantOnTable[iIndex].ElefantThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                { tH.Add(ElephantOnTable[iIndex].ElefantThinkingQuantum[0].t); } }*/
                        }

                    }


                    if (KindIndex == -3)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        bool ASS = false; Object OOOAAA = new Object(); lock (OOOAAA)
                        { ASS = AllDraw.Blitz; }
                        if (!ASS)
                        {//When There is Current Brown Existing Objective ThinkingQuantum Movments.
                         //ThinkingQuantum Operations of Brown Current Objects.
                         //HoursesOnTable[iIndex].HourseThinkingQuantum[0].TableT = HoursesOnTable[iIndex].HourseThinkingQuantum[0].TableT;
                            HoursesOnTable[iIndex].HourseThinkingQuantum[0].ThinkingQuantumBegin = true;
                            HoursesOnTable[iIndex].HourseThinkingQuantum[0].ThinkingQuantumFinished = false;
                            HoursesOnTable[iIndex].HourseThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref HoursesOnTable[iIndex].LoseOcuuredatChiled, ref HoursesOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(HoursesOnTable[iIndex].HourseThinkingQuantum[0].ThinkingQuantum));
                                            HoursesOnTable[iIndex].HourseThinkingQuantum[0].t.Start();
                                            if (HoursesOnTable[iIndex].HourseThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                { tH.Add(HoursesOnTable[iIndex].HourseThinkingQuantum[0].t); } }*/

                        }
                        else if (ASS)//When There is Current Brown Existing Objective ThinkingQuantum Movments.
                        {
                            //ThinkingQuantum of ThinkingQuantum Brown CurrentTable Objective Operations.                                          SolderesOnTable[iIndex].SoldierThinkingQuantum[0].Table = SolderesOnTable[iIndex].SoldierThinkingQuantum[0].TableListSolder[j];
                            HoursesOnTable[iIndex].HourseThinkingQuantum[0].ThinkingQuantumBegin = true;
                            HoursesOnTable[iIndex].HourseThinkingQuantum[0].ThinkingQuantumFinished = false;
                            HoursesOnTable[iIndex].HourseThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref HoursesOnTable[iIndex].LoseOcuuredatChiled, ref HoursesOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(HoursesOnTable[iIndex].HourseThinkingQuantum[0].ThinkingQuantum));
                                            HoursesOnTable[iIndex].HourseThinkingQuantum[0].t.Start();
                                            if (HoursesOnTable[iIndex].HourseThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt)
                                                    { tH.Add(HoursesOnTable[iIndex].HourseThinkingQuantum[0].t); } }*/


                        }

                    }
                    //Progressing.




                    if (KindIndex == -4)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        bool ASS = false; Object OOOAAA = new Object(); lock (OOOAAA)
                        { ASS = AllDraw.Blitz; }
                        if (!ASS)
                        {//When There is Current Brown Existing Objective ThinkingQuantum Movments.
                         //ThinkingQuantum Operations of Brown Current Objects.
                            CastlesOnTable[iIndex].CastleThinkingQuantum[0].ThinkingQuantumBegin = true;
                            CastlesOnTable[iIndex].CastleThinkingQuantum[0].ThinkingQuantumFinished = false;
                            CastlesOnTable[iIndex].CastleThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref CastlesOnTable[iIndex].LoseOcuuredatChiled, ref CastlesOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(CastlesOnTable[iIndex].CastleThinkingQuantum[0].ThinkingQuantum));
                                            CastlesOnTable[iIndex].CastleThinkingQuantum[0].t.Start();
                                            if (CastlesOnTable[iIndex].CastleThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                { tH.Add(CastlesOnTable[iIndex].CastleThinkingQuantum[0].t); } }*/
                        }
                        else if (ASS)//When There is Current Brown Existing Objective ThinkingQuantum Movments.
                        {
                            //ThinkingQuantum of ThinkingQuantum Brown CurrentTable Objective Operations.        
                            CastlesOnTable[iIndex].CastleThinkingQuantum[0].ThinkingQuantumBegin = true;
                            CastlesOnTable[iIndex].CastleThinkingQuantum[0].ThinkingQuantumFinished = false;
                            CastlesOnTable[iIndex].CastleThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref CastlesOnTable[iIndex].LoseOcuuredatChiled, ref CastlesOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(CastlesOnTable[iIndex].CastleThinkingQuantum[0].ThinkingQuantum));
                                            CastlesOnTable[iIndex].CastleThinkingQuantum[0].t.Start();
                                            if (CastlesOnTable[iIndex].CastleThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt)
                                                    { tH.Add(CastlesOnTable[iIndex].CastleThinkingQuantum[0].t); } }*/
                        }

                    }

                    if (KindIndex == -5)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        bool ASS = false; Object OOOAAA = new Object(); lock (OOOAAA)
                        { ASS = AllDraw.Blitz; }
                        if (!ASS)
                        {//When There is Current Brown Existing Objective ThinkingQuantum Movments.
                         //ThinkingQuantum Operations of Brown Current Objects.
                            MinisterOnTable[iIndex].MinisterThinkingQuantum[0].ThinkingQuantumBegin = true;
                            MinisterOnTable[iIndex].MinisterThinkingQuantum[0].ThinkingQuantumFinished = false;
                            MinisterOnTable[iIndex].MinisterThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref MinisterOnTable[iIndex].LoseOcuuredatChiled, ref MinisterOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(MinisterOnTable[iIndex].MinisterThinkingQuantum[0].ThinkingQuantum));
                                            MinisterOnTable[iIndex].MinisterThinkingQuantum[0].t.Start();
                                            if (MinisterOnTable[iIndex].MinisterThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt)
                                                { tH.Add(MinisterOnTable[iIndex].MinisterThinkingQuantum[0].t); } }*/
                        }
                        else if (ASS)//When There is Current Brown Existing Objective ThinkingQuantum Movments.
                        {
                            //ThinkingQuantum of ThinkingQuantum Brown CurrentTable Objective Operations.                                          SolderesOnTable[iIndex].SoldierThinkingQuantum[0].Table = SolderesOnTable[iIndex].SoldierThinkingQuantum[0].TableListSolder[j];
                            MinisterOnTable[iIndex].MinisterThinkingQuantum[0].ThinkingQuantumBegin = true;
                            MinisterOnTable[iIndex].MinisterThinkingQuantum[0].ThinkingQuantumFinished = false;
                            MinisterOnTable[iIndex].MinisterThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref MinisterOnTable[iIndex].LoseOcuuredatChiled, ref MinisterOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(MinisterOnTable[iIndex].MinisterThinkingQuantum[0].ThinkingQuantum));
                                            MinisterOnTable[iIndex].MinisterThinkingQuantum[0].t.Start();
                                            if (MinisterOnTable[iIndex].MinisterThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                    { tH.Add(MinisterOnTable[iIndex].MinisterThinkingQuantum[0].t); } }*/

                        }

                    }
                    //Progressing.

                    if (KindIndex == -6)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        bool ASS = false; Object OOOAAA = new Object(); lock (OOOAAA)
                        { ASS = AllDraw.Blitz; }
                        if (!ASS)
                        {//When There is Current Brown Existing Objective ThinkingQuantum Movments.
                         //ThinkingQuantum Operations of Brown Current Objects.
                            KingOnTable[iIndex].KingThinkingQuantum[0].ThinkingQuantumBegin = true;
                            KingOnTable[iIndex].KingThinkingQuantum[0].ThinkingQuantumFinished = false;
                            KingOnTable[iIndex].KingThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref KingOnTable[iIndex].LoseOcuuredatChiled, ref KingOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(KingOnTable[iIndex].KingThinkingQuantum[0].ThinkingQuantum));
                                            KingOnTable[iIndex].KingThinkingQuantum[0].t.Start();
                                            if (KingOnTable[iIndex].KingThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                { tH.Add(KingOnTable[iIndex].KingThinkingQuantum[0].t); } }*/

                        }
                        else if (ASS)//When There is Current Brown Existing Objective ThinkingQuantum Movments.
                        {
                            //ThinkingQuantum of ThinkingQuantum Brown CurrentTable Objective Operations.       
                            KingOnTable[iIndex].KingThinkingQuantum[0].TableT = KingOnTable[iIndex].KingThinkingQuantum[0].TableListKing[j];
                            KingOnTable[iIndex].KingThinkingQuantum[0].ThinkingQuantumBegin = true;
                            KingOnTable[iIndex].KingThinkingQuantum[0].ThinkingQuantumFinished = false;
                            KingOnTable[iIndex].KingThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref KingOnTable[iIndex].LoseOcuuredatChiled, ref KingOnTable[iIndex].WinOcuuredatChiled);/*.t = new Task(new Action(KingOnTable[iIndex].KingThinkingQuantum[0].ThinkingQuantum));
                                            KingOnTable[iIndex].KingThinkingQuantum[0].t.Start();
                                            if (KingOnTable[iIndex].KingThinkingQuantum[0].t != null) { Object tttt = new Object(); lock (tttt) 
                                                { tH.Add(KingOnTable[iIndex].KingThinkingQuantum[0].t); } }*/


                        }


                    }

                    //IncreASeprogressBarRefregitzValue(THIS.progressBarVerify, increASedProgress);
                    //THIS.progressBarVerify.Invalidate();
                    //SetprogressBarUpdate(THIS.progressBarVerify);

                }







                bool FOUND = false;
                if (KindIndex == 1 || KindIndex == -1)
                {
                    SolderesOnTable[iIndex].SoldierThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    SolderesOnTable[iIndex].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[iIndex].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    SolderesOnTable[iIndex].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[iIndex].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(CloneATable(Tab));
                    SolderesOnTable[iIndex].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[iIndex].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    SolderesOnTable[iIndex].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[iIndex].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, ii, jj, a, Tab, Order * -1, false, FOUND, LeafAStarGreedy);
                }
                else
                    if (KindIndex == 2 || KindIndex == -2)
                {
                    ElephantOnTable[iIndex].ElefantThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    ElephantOnTable[iIndex].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[iIndex].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    ElephantOnTable[iIndex].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[iIndex].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(CloneATable(Tab));
                    ElephantOnTable[iIndex].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[iIndex].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    ElephantOnTable[iIndex].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[iIndex].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, ii, jj, a, Tab, Order * -1, false, FOUND, LeafAStarGreedy);
                }
                else
                        if (KindIndex == 3 || KindIndex == -3)
                {
                    HoursesOnTable[iIndex].HourseThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    HoursesOnTable[iIndex].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[iIndex].HourseThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    HoursesOnTable[iIndex].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[iIndex].HourseThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(CloneATable(Tab));
                    HoursesOnTable[iIndex].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[iIndex].HourseThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    HoursesOnTable[iIndex].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[iIndex].HourseThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, ii, jj, a, Tab, Order * -1, false, FOUND, LeafAStarGreedy);
                }
                else
                            if (KindIndex == 4 || KindIndex == -4)
                {
                    CastlesOnTable[iIndex].CastleThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    CastlesOnTable[iIndex].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[iIndex].CastleThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    CastlesOnTable[iIndex].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[iIndex].CastleThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(CloneATable(Tab));
                    CastlesOnTable[iIndex].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[iIndex].CastleThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    CastlesOnTable[iIndex].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[iIndex].CastleThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, ii, jj, a, Tab, Order * -1, false, FOUND, LeafAStarGreedy);
                }
                else
                                if (KindIndex == 5 || KindIndex == -5)
                {
                    MinisterOnTable[iIndex].MinisterThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    MinisterOnTable[iIndex].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[iIndex].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    MinisterOnTable[iIndex].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[iIndex].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(CloneATable(Tab));
                    MinisterOnTable[iIndex].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[iIndex].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    MinisterOnTable[iIndex].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[iIndex].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, ii, jj, a, Tab, Order * -1, false, FOUND, LeafAStarGreedy);
                }
                else
                                    if (KindIndex == 6 || KindIndex == -6)
                {
                    KingOnTable[iIndex].KingThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    KingOnTable[iIndex].KingThinkingQuantum[0].AStarGreedy[MinisterOnTable[iIndex].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    KingOnTable[iIndex].KingThinkingQuantum[0].AStarGreedy[MinisterOnTable[iIndex].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(CloneATable(Tab));
                    KingOnTable[iIndex].KingThinkingQuantum[0].AStarGreedy[MinisterOnTable[iIndex].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    KingOnTable[iIndex].KingThinkingQuantum[0].AStarGreedy[MinisterOnTable[iIndex].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, ii, jj, a, Tab, Order * -1, false, FOUND, LeafAStarGreedy);
                }
                //                } 
                Order = DummyOrder;
                ChessRules.CurrentOrder = DummyCurrentOrder;

                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedytOneNode:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;

                Order = DummyOrder;
                ChessRules.CurrentOrder = DummyCurrentOrder;
                return this;
            }
        }
        //gray index objects max count
        int MaxGrayMidle()
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {
                int[] Tab = new int[6];
                Tab[0] = SodierMidle;
                Tab[1] = ElefantMidle;
                Tab[2] = HourseMidle;
                Tab[3] = CastleMidle;
                Tab[4] = MinisterMidle;
                Tab[5] = KingMidle;
                int Max = 0;
                for (var i = 0; i < 6; i++)
                {
                    if (Tab[i] > Max)
                        Max = Tab[i];
                }
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("MaxGrayMidle:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return Max;
            }
        }
        //brown index objects max count
        int MaxBrownHigh()
        {
            //long Time = TimeElapced.TimeNow();Spaces++;

            Object O = new Object();
            lock (O)
            {
                int[] Tab = new int[6];
                Tab[0] = SodierHigh;
                Tab[1] = ElefantHigh;
                Tab[2] = HourseHight;
                Tab[3] = CastleHigh;
                Tab[4] = MinisterHigh;
                Tab[5] = KingHigh;
                int Max = 0;
                for (var i = 0; i < 6; i++)
                {
                    if (Tab[i] > Max)
                        Max = Tab[i];
                }
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("MaxBrownHigh:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return Max;
            }
        }
        //gray index objects min count
        int MinBrownMidle()
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {

                int[] Tab = new int[6];
                Tab[0] = SodierHigh;
                Tab[1] = ElefantHigh;
                Tab[2] = HourseHight;
                Tab[3] = CastleHigh;
                Tab[4] = MinisterHigh;
                Tab[5] = KingHigh;
                int Min = MaxBrownHigh();
                for (var i = 0; i < 6; i++)
                {
                    if (Tab[i] < Min)
                        Min = Tab[i];
                }
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("MinBrownMidle:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return Min;
            }
        }
        //gray object initiation second method
        AllDraw InitiateAStarGreedytObjectGray(int iii, int jjj, int[,] Table, int DummyOrder, int DummyCurrentOrder, int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, bool TB, bool FOUND, int LeafAStarGreedy //, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref int Less
            )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object oo = new Object();
            lock (oo)
            {
                for (var i = 0; i < MaxGrayMidle(); i++)
                {
                    //Parallel.Invoke(() =>
                    {
                        Object ooo = new Object();
                        lock (ooo)
                        {
                            if (SodierMidle > i)
                            {
                                Object O = new Object();
                                lock (O)
                                {

                                    Order = DummyOrder;
                                    ChessRules.CurrentOrder = DummyCurrentOrder;
                                    //If Solders Not Exist Continue and Traversal Back.
                                    if (SolderesOnTable != null && SolderesOnTable[i] != null)
                                    {
                                        //Initiate of Local Variables By Global Objective Gray Current Solder.
                                        ii = (int)SolderesOnTable[i].Row;
                                        jj = (int)SolderesOnTable[i].Column;
                                        //Construction of ThinkingQuantum Gray Soldier By Local Variables.

                                        //If There is no ThinkingQuantum Movments on Current Object  

                                        if (SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count == 0)
                                        {
                                            //For All Movable Gray Solders.
                                            for (var j = 0; j < AllDraw.SodierMovments; j++)
                                            ////Parallel.For(0, AllDraw.SodierMovments, j =>
                                            {
                                                //ThinkingQuantum of Gray Solder Operation.
                                                Object OOO = new Object();
                                                lock (OOO)
                                                {
                                                    SolderesOnTable[i].SoldierThinkingQuantum[0].ThinkingQuantumBegin = true;
                                                    SolderesOnTable[i].SoldierThinkingQuantum[0].ThinkingQuantumFinished = false;
                                                    SolderesOnTable[i].SoldierThinkingQuantum[0].Kind = 1;
                                                    SolderesOnTable[i].SoldierThinkingQuantum[j].ThinkingQuantum(iAStarGreedy, this, ref SolderesOnTable[i].LoseOcuuredatChiled, ref SolderesOnTable[i].WinOcuuredatChiled);


                                                }
                                            }//);
                                        }
                                    }

                                }
                            }
                        }
                    }//,
                    // () =>
                    {
                        Object ooo = new Object();
                        lock (ooo)
                        {
                            if (MinisterMidle > i)
                            {


                                Object O = new Object();
                                lock (O)
                                {
                                    Order = DummyOrder;
                                    ChessRules.CurrentOrder = DummyCurrentOrder;
                                    //For Each Non Exist Gray Minister Objectives.
                                    if (MinisterOnTable != null && MinisterOnTable[i] != null)
                                    {
                                        //Inititate Local Variables By Global Varibales.
                                        ii = (int)MinisterOnTable[i].Row;
                                        jj = (int)MinisterOnTable[i].Column;
                                        //Construction of ThinkingQuantum Objects Gray Minister.

                                        //If There is Not Minister Of Gray In The ThinkingQuantum Table List.   
                                        if (MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count == 0)
                                        {
                                            //For All Possible Movments.
                                            for (var j = 0; j < AllDraw.MinisterMovments; j++)
                                            ////Parallel.For(0, AllDraw.MinisterMovments, j =>
                                            {
                                                //ThinkingQuantum of Gray Minister Operational.
                                                Object OOO = new Object();
                                                lock (OOO)
                                                {
                                                    MinisterOnTable[i].MinisterThinkingQuantum[0].ThinkingQuantumBegin = true;
                                                    MinisterOnTable[i].MinisterThinkingQuantum[0].ThinkingQuantumFinished = false;
                                                    MinisterOnTable[i].MinisterThinkingQuantum[0].Kind = 5;
                                                    MinisterOnTable[i].MinisterThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref MinisterOnTable[i].LoseOcuuredatChiled, ref MinisterOnTable[i].WinOcuuredatChiled);
                                                }
                                            }//);
                                        }
                                    }
                                }

                            }
                        }
                    }//,
                     //() =>
                    {
                        Object ooo = new Object();
                        lock (ooo)
                        {

                            if (KingMidle > i)
                            {


                                Object O = new Object();
                                lock (O)
                                {

                                    Order = DummyOrder;
                                    ChessRules.CurrentOrder = DummyCurrentOrder;
                                    //If There is Not Current Object Continue Traversal Back.
                                    if (KingOnTable != null && KingOnTable[i] != null)
                                    {
                                        //Initiate Local varibale By Global Objective Varibales.
                                        ii = (int)(int)KingOnTable[i].Row;
                                        jj = (int)KingOnTable[i].Column;
                                        //Construction of Gray King ThinkingQuantum Objects.

                                        //When There is Not ThinkingQuantum Table Gray King Movments.
                                        if (KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count == 0)
                                        {
                                            //For All Possible Gray King Movments.
                                            ////Parallel.For(0, AllDraw.KingMovments, j =>
                                            for (var j = 0; j < AllDraw.KingMovments; j++)
                                            {
                                                //ThinkingQuantum Of Gray King Operatins.
                                                Object OOO = new Object();
                                                lock (OOO)
                                                {
                                                    KingOnTable[i].KingThinkingQuantum[0].ThinkingQuantumBegin = true;
                                                    KingOnTable[i].KingThinkingQuantum[0].ThinkingQuantumFinished = false;
                                                    KingOnTable[i].KingThinkingQuantum[0].Kind = 6;
                                                    KingOnTable[i].KingThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref MinisterOnTable[i].LoseOcuuredatChiled, ref MinisterOnTable[i].WinOcuuredatChiled);

                                                }
                                            }//);
                                        }
                                    }

                                }
                            }
                        }
                    }//);
                }//);
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedytObjectGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return this;
        }
        AllDraw InitiateAStarGreedytObjectBrown(int iii, int jjj, int[,] Table, int DummyOrder, int DummyCurrentOrder, int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, bool TB, bool FOUND, int LeafAStarGreedy//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref int Less
            )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object oo = new Object();
            lock (oo)
            {
                ////Parallel.For(MinBrownMidle(), MaxBrownHigh(), i =>
                for (var i = MinBrownMidle(); i < MaxBrownHigh(); i++)
                {

                    //Parallel.Invoke(() =>
                    {
                        Object ooo = new Object();
                        lock (ooo)
                        {
                            if (SodierMidle <= i && SodierHigh > i)
                            {
                                Object O = new Object();
                                lock (O)
                                {

                                    Order = DummyOrder;
                                    ChessRules.CurrentOrder = DummyCurrentOrder;
                                    //If Solders Not Exist Continue and Traversal Back.
                                    if (SolderesOnTable != null && SolderesOnTable[i] != null)
                                    {
                                        //Initiate of Local Variables By Global Objective Gray Current Solder.
                                        ii = (int)SolderesOnTable[i].Row;
                                        jj = (int)SolderesOnTable[i].Column;
                                        //Construction of ThinkingQuantum Gray Soldier By Local Variables.

                                        //If There is no ThinkingQuantum Movments on Current Object  

                                        if (SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count == 0)
                                        {
                                            //For All Movable Gray Solders.
                                            for (var j = 0; j < AllDraw.SodierMovments; j++)
                                            ////Parallel.For(0, AllDraw.SodierMovments, j =>
                                            {
                                                //ThinkingQuantum of Gray Solder Operation.
                                                Object OOO = new Object();
                                                lock (OOO)
                                                {
                                                    SolderesOnTable[i].SoldierThinkingQuantum[0].ThinkingQuantumBegin = true;
                                                    SolderesOnTable[i].SoldierThinkingQuantum[0].ThinkingQuantumFinished = false;
                                                    SolderesOnTable[i].SoldierThinkingQuantum[0].Kind = 1;
                                                    SolderesOnTable[i].SoldierThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref SolderesOnTable[i].LoseOcuuredatChiled, ref SolderesOnTable[i].WinOcuuredatChiled);
                                                }
                                            }//);
                                        }
                                    }

                                }
                            }
                        }
                    }//,() =>
                    {
                        Object oooo = new Object();
                        lock (oooo)
                        {

                            if (ElefantMidle <= i && ElefantHigh > i)
                            {

                                Object O = new Object();
                                lock (O)
                                {

                                    Order = DummyOrder;
                                    ChessRules.CurrentOrder = DummyCurrentOrder;
                                    //Ignore of Non Exist Current Elephant Gray Objects.
                                    if (ElephantOnTable != null && ElephantOnTable[i] != null)
                                    {
                                        //Inititae Local Varibale By Global Gray Elephant Objects Varibales.
                                        ii = (int)ElephantOnTable[i].Row;
                                        jj = (int)ElephantOnTable[i].Column;
                                        //Construction of ThinkingQuantum Objects By Local Varibales.

                                        //If There is Not ThinkingQuantum Objetive List Elephant Gray. 
                                        if (ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count == 0)
                                        {
                                            //For All Possible Movments.
                                            ////Parallel.For(0, AllDraw.ElefantMovments, j =>
                                            for (var j = 0; j < AllDraw.ElefantMovments; j++)
                                            {
                                                //Operational ThinkingQuantum Gray Elephant. 
                                                Object OOO = new Object();
                                                lock (OOO)
                                                {
                                                    ElephantOnTable[i].ElefantThinkingQuantum[0].ThinkingQuantumBegin = true;
                                                    ElephantOnTable[i].ElefantThinkingQuantum[0].ThinkingQuantumFinished = false;
                                                    ElephantOnTable[i].ElefantThinkingQuantum[0].Kind = 2;
                                                    ElephantOnTable[i].ElefantThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref ElephantOnTable[i].LoseOcuuredatChiled, ref ElephantOnTable[i].WinOcuuredatChiled);
                                                }
                                            }//);
                                        }
                                    }

                                }
                            }
                        }
                    }//,() =>
                    {
                        Object oooo = new Object();
                        lock (oooo)
                        {

                            if (HourseMidle <= i && HourseHight > i)
                            {

                                Object O = new Object();
                                lock (O)
                                {

                                    Order = DummyOrder;
                                    ChessRules.CurrentOrder = DummyCurrentOrder;
                                    //Ignore of Non Exist Current Gray Hourse Objects.
                                    if (HoursesOnTable != null && HoursesOnTable[i] != null)
                                    {
                                        //Initiate of Local Variables By Global Gray Hourse Objectives.
                                        ii = (int)HoursesOnTable[i].Row;
                                        jj = (int)HoursesOnTable[i].Column;
                                        //Construction of Gray Hourse ThinkingQuantum Objects..

                                        //When There is Not HourseList Count. 
                                        if (HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count == 0)
                                        {
                                            //For All Possible Movments.
                                            for (var j = 0; j < AllDraw.HourseMovments; j++)
                                            ////Parallel.For(0, AllDraw.HourseMovments, j =>
                                            {
                                                //ThinkingQuantum of Gray Hourse Oprational.
                                                Object OOO = new Object();
                                                lock (OOO)
                                                {
                                                    HoursesOnTable[i].HourseThinkingQuantum[0].ThinkingQuantumBegin = true;
                                                    HoursesOnTable[i].HourseThinkingQuantum[0].ThinkingQuantumFinished = false;
                                                    HoursesOnTable[i].HourseThinkingQuantum[0].Kind = 3;
                                                    HoursesOnTable[i].HourseThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref HoursesOnTable[i].LoseOcuuredatChiled, ref HoursesOnTable[i].WinOcuuredatChiled);
                                                }
                                            }//);
                                        }
                                    }

                                }
                            }
                        }

                    }//,() =>
                    {
                        Object oooo = new Object();
                        lock (oooo)
                        {

                            if (CastleMidle <= i && CastleHigh < i)
                            {
                                Object O = new Object();
                                lock (O)
                                {

                                    Order = DummyOrder;
                                    ChessRules.CurrentOrder = DummyCurrentOrder;
                                    //When Current Castles Gray Not Exist Continue Traversal Back.
                                    if (CastlesOnTable != null && CastlesOnTable[i] != null)
                                    {
                                        //Initaiate of Local Varibales By Global Varoiables.
                                        ii = (int)CastlesOnTable[i].Row;
                                        jj = (int)CastlesOnTable[i].Column;
                                        //Construction of ThinkingQuantum Variables By Local Variables.

                                        //When Count of Table Castles of ThinkingQuantum Not Exist Do Operational.
                                        if (CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count == 0)
                                        {
                                            //For All Possible Movments.
                                            ////Parallel.For(0, AllDraw.CastleMovments, j =>
                                            for (var j = 0; j < AllDraw.CastleMovments; j++)
                                            {
                                                Object OOO = new Object();
                                                lock (OOO)
                                                {
                                                    //ThinkingQuantum of Gray Castles Operational.
                                                    CastlesOnTable[i].CastleThinkingQuantum[0].ThinkingQuantumBegin = true;
                                                    CastlesOnTable[i].CastleThinkingQuantum[0].ThinkingQuantumFinished = false;
                                                    CastlesOnTable[i].CastleThinkingQuantum[0].Kind = 4;
                                                    CastlesOnTable[i].CastleThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref CastlesOnTable[i].LoseOcuuredatChiled, ref CastlesOnTable[i].WinOcuuredatChiled);
                                                }
                                            }//);
                                        }
                                    }

                                }
                            }
                        }
                    }//,() =>
                    {
                        Object oooo = new Object();
                        lock (oooo)
                        {



                            if (MinisterMidle <= i && MinisterHigh > i)
                            {
                                Object O = new Object();
                                lock (O)
                                {
                                    Order = DummyOrder;
                                    ChessRules.CurrentOrder = DummyCurrentOrder;
                                    //For Each Non Exist Gray Minister Objectives.
                                    if (MinisterOnTable != null && MinisterOnTable[i] != null)
                                    {
                                        //Inititate Local Variables By Global Varibales.
                                        ii = (int)MinisterOnTable[i].Row;
                                        jj = (int)MinisterOnTable[i].Column;
                                        //Construction of ThinkingQuantum Objects Gray Minister.

                                        //If There is Not Minister Of Gray In The ThinkingQuantum Table List.   
                                        if (MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count == 0)
                                        {
                                            //For All Possible Movments.
                                            ////Parallel.For(0, AllDraw.MinisterMovments, j =>
                                            for (var j = 0; j < AllDraw.MinisterMovments; j++)
                                            {
                                                //ThinkingQuantum of Gray Minister Operational.
                                                Object OOO = new Object();
                                                lock (OOO)
                                                {
                                                    MinisterOnTable[i].MinisterThinkingQuantum[0].ThinkingQuantumBegin = true;
                                                    MinisterOnTable[i].MinisterThinkingQuantum[0].ThinkingQuantumFinished = false;
                                                    MinisterOnTable[i].MinisterThinkingQuantum[0].Kind = 5;
                                                    MinisterOnTable[i].MinisterThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref CastlesOnTable[i].LoseOcuuredatChiled, ref CastlesOnTable[i].WinOcuuredatChiled);
                                                }
                                            }//);
                                        }
                                    }
                                }
                            }

                        }

                    }//,
                    // () =>
                    {
                        Object oooo = new Object();
                        lock (oooo)
                        {
                            if (KingMidle <= i && KingHigh > i)
                            {
                                Object O = new Object();
                                lock (O)
                                {

                                    Order = DummyOrder;
                                    ChessRules.CurrentOrder = DummyCurrentOrder;
                                    //If There is Not Current Object Continue Traversal Back.
                                    if (KingOnTable != null && KingOnTable[i] != null)
                                    {
                                        //Initiate Local varibale By Global Objective Varibales.
                                        ii = (int)(int)KingOnTable[i].Row;
                                        jj = (int)KingOnTable[i].Column;
                                        //Construction of Gray King ThinkingQuantum Objects.

                                        //When There is Not ThinkingQuantum Table Gray King Movments.
                                        if (KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count == 0)
                                        {
                                            //For All Possible Gray King Movments.
                                            for (var j = 0; j < AllDraw.KingMovments; j++)
                                            {
                                                //ThinkingQuantum Of Gray King Operatins.
                                                Object OOO = new Object();
                                                lock (OOO)
                                                {
                                                    KingOnTable[i].KingThinkingQuantum[0].ThinkingQuantumBegin = true;
                                                    KingOnTable[i].KingThinkingQuantum[0].ThinkingQuantumFinished = false;
                                                    KingOnTable[i].KingThinkingQuantum[0].Kind = 6;
                                                    KingOnTable[i].KingThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref CastlesOnTable[i].LoseOcuuredatChiled, ref CastlesOnTable[i].WinOcuuredatChiled);
                                                }
                                            }//);
                                        }
                                    }

                                }
                            }
                        }
                    }//);

                }//);
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedytObjectBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return this;
        }
        //return index of table state index at list
        int FoundTableIndex(List<int[,]> T, int[,] TAab)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            int C = -1;
            for (var i = 0; i < T.Count; i++)
            {
                if (TableEqual(T[i], TAab))
                    C = i;
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundTableIndex:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return C;
        }
        //when tatow table is not equal
        bool TableEqual(int[,] t1, int[,] t2)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Is = true;
            for (var i = 0; i < 8; i++)
                for (var j = 0; j < 8; j++)
                {
                    if (t1[i, j] != t2[i, j])
                        Is = false;
                }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("TableEqual:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Is;
        }
        //support of objects by self object regard by values named served
        void Serve(int Order)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //gray
            if (Order == 1)
            {
                //sodier
                for (var i = 0; i < SodierMidle; i++)
                {
                    if (SolderesOnTable == null || SolderesOnTable[i] == null)
                        continue;
                    ServeISSup(Order, 1, i);
                }
                //elephant
                for (var i = 0; i < ElefantMidle; i++)
                {
                    if (ElephantOnTable == null || ElephantOnTable[i] == null)
                        continue;
                    ServeISSup(Order, 2, i);
                }
                //hourse
                for (var i = 0; i < HourseMidle; i++)
                {
                    if (HoursesOnTable == null || HoursesOnTable[i] == null)
                        continue;
                    ServeISSup(Order, 3, i);
                }
                //Castle
                for (var i = 0; i < CastleMidle; i++)
                {
                    if (CastlesOnTable == null || CastlesOnTable[i] == null)
                        continue;
                    ServeISSup(Order, 4, i);
                }
                //minister
                for (var i = 0; i < MinisterMidle; i++)
                {
                    if (MinisterOnTable == null || MinisterOnTable[i] == null)
                        continue;
                    ServeISSup(Order, 5, i);
                }
                //king
                for (var i = 0; i < KingMidle; i++)
                {
                    if (KingOnTable == null || KingOnTable[i] == null)
                        continue;
                    ServeISSup(Order, 6, i);
                }

            }//brown
            else
            {   //soldier
                for (var i = SodierMidle; i < SodierHigh; i++)
                {
                    if (SolderesOnTable == null || SolderesOnTable[i] == null)
                        continue;
                    ServeISSup(Order, 1, i);
                }
                //elephant
                for (var i = ElefantMidle; i < ElefantHigh; i++)
                {
                    if (ElephantOnTable == null || ElephantOnTable[i] == null)
                        continue;
                    ServeISSup(Order, 2, i);
                }
                ///hourse
                for (var i = HourseMidle; i < HourseHight; i++)
                {
                    if (HoursesOnTable == null || HoursesOnTable[i] == null)
                        continue;
                    ServeISSup(Order, 3, i);
                }
                //Castle
                for (var i = CastleMidle; i < CastleHigh; i++)
                {
                    if (CastlesOnTable == null || CastlesOnTable[i] == null)
                        continue;
                    ServeISSup(Order, 4, i);
                }
                //minister
                for (var i = MinisterMidle; i < MinisterHigh; i++)
                {
                    if (MinisterOnTable == null || MinisterOnTable[i] == null)
                        continue;
                    ServeISSup(Order, 5, i);
                }
                //king
                for (var i = KingMidle; i < KingHigh; i++)
                {
                    if (KingOnTable == null || KingOnTable[i] == null)
                        continue;
                    ServeISSup(Order, 6, i);
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("Serve:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }

        //served mechaisam core
        void ServeISSup(int Order, int Kind,
                int ii
               )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //soldoer
            if (Kind == 1)
            {
                //gray
                if (Order == 1)
                {
                    //soldier
                    for (var i = 0; i < SodierMidle; i++)
                    {
                        if (SolderesOnTable == null || SolderesOnTable[i] == null)
                            continue;

                        for (var j = 0; j < SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder.Count; j++)
                        {
                            if (!(SolderesOnTable[i].SoldierThinkingQuantum[0].IsSup[j]))
                                continue;


                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][0] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicAttackValueSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][1] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][2] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicSelfSupportedValueSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][3] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][4] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicReducedSupportSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][5] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicReducedAttackValueSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][6] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicDistributionValueSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][7] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicKingSafeSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][8] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicFromCenterSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][9] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicKingDangourSup;
                            SolderesOnTable[i].SoldierThinkingQuantum[0].IsSup[j] = false;

                            AllDraw.OutPut.Append("\r\nServed Soldeir!");
                        }
                    }
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicAttackValueSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicSelfSupportedValueSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicReducedSupportSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicReducedAttackValueSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicDistributionValueSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicKingSafeSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicFromCenterSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicKingDangourSup = 0;

                }
                else//brown
                {


                    for (var i = SodierMidle; i < SodierHigh; i++)
                    {
                        if (SolderesOnTable == null || SolderesOnTable[i] == null)
                            continue;

                        for (var j = 0; j < SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder.Count; j++)
                        {
                            if (!(SolderesOnTable[i].SoldierThinkingQuantum[0].IsSup[j]))
                                continue;


                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][0] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicAttackValueSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][1] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][2] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicSelfSupportedValueSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][3] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][4] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicReducedSupportSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][5] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicReducedAttackValueSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][6] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicDistributionValueSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][7] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicKingSafeSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][8] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicFromCenterSup;
                            this.SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][9] += SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicKingDangourSup;
                            SolderesOnTable[i].SoldierThinkingQuantum[0].IsSup[j] = false;

                            AllDraw.OutPut.Append("\r\nServed Soldeir!");
                        }
                    }
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicAttackValueSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicSelfSupportedValueSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicReducedSupportSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicReducedAttackValueSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicDistributionValueSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicKingSafeSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicFromCenterSup = 0;
                    SolderesOnTable[ii].SoldierThinkingQuantum[0].HeuristicKingDangourSup = 0;
                }

            }
            else if (Kind == 2)//elephant
            {
                if (Order == 1)//gray
                {
                    for (var i = 0; i < ElefantMidle; i++)
                    {
                        if (ElephantOnTable == null || ElephantOnTable[i] == null)
                            continue;


                        for (var j = 0; j < ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant.Count; j++)
                        {
                            if (!(ElephantOnTable[i].ElefantThinkingQuantum[0].IsSup[j]))
                                continue;

                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][0] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicAttackValueSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][1] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][2] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicSelfSupportedValueSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][3] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][4] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicReducedSupportSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][5] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicReducedAttackValueSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][6] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicDistributionValueSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][7] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicKingSafeSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][8] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicFromCenterSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][9] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicKingDangourSup;
                            ElephantOnTable[i].ElefantThinkingQuantum[0].IsSup[j] = false;

                            AllDraw.OutPut.Append("\r\nServed Elephant!");
                        }

                    }
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicAttackValueSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicSelfSupportedValueSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicReducedSupportSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicReducedAttackValueSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicDistributionValueSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicKingSafeSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicFromCenterSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicKingDangourSup = 0;

                }
                else//brown
                {

                    //elephant
                    for (var i = ElefantMidle; i < ElefantHigh; i++)
                    {
                        if (ElephantOnTable == null || ElephantOnTable[i] == null)
                            continue;

                        for (var j = 0; j < ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant.Count; j++)
                        {
                            if (!(ElephantOnTable[i].ElefantThinkingQuantum[0].IsSup[j]))
                                continue;


                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][0] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicAttackValueSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][1] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][2] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicSelfSupportedValueSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][3] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][4] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicReducedSupportSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][5] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicReducedAttackValueSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][6] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicDistributionValueSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][7] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicKingSafeSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][8] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicFromCenterSup;
                            this.ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][9] += ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicKingDangourSup;
                            ElephantOnTable[i].ElefantThinkingQuantum[0].IsSup[j] = false;

                            AllDraw.OutPut.Append("\r\nServed Elephant!");
                        }

                    }
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicAttackValueSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicSelfSupportedValueSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicReducedSupportSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicReducedAttackValueSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicDistributionValueSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicKingSafeSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicFromCenterSup = 0;
                    ElephantOnTable[ii].ElefantThinkingQuantum[0].HeuristicKingDangourSup = 0;
                }

            }
            else if (Kind == 3)//hourse
            {
                if (Order == 1)//gray
                {

                    for (var i = 0; i < HourseMidle; i++)
                    {
                        if (HoursesOnTable == null || HoursesOnTable[i] == null)
                            continue;
                        //var j = FoundTableIndex(this.HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse, HoursesOnTable[ii].HourseThinkingQuantum[0].TableConst);
                        for (var j = 0; j < HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse.Count; j++)
                        {
                            if (!(HoursesOnTable[i].HourseThinkingQuantum[0].IsSup[j]))
                                continue;

                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][0] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicAttackValueSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][1] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][2] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicSelfSupportedValueSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][3] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][4] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicReducedSupportSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][5] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicReducedAttackValueSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][6] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicDistributionValueSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][7] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicKingSafeSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][8] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicFromCenterSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][9] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicKingDangourSup;
                            HoursesOnTable[i].HourseThinkingQuantum[0].IsSup[j] = false;

                            AllDraw.OutPut.Append("\r\nServed Hourse!");
                        }
                    }
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicAttackValueSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicSelfSupportedValueSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicReducedSupportSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicReducedAttackValueSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicDistributionValueSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicKingSafeSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicFromCenterSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicKingDangourSup = 0;


                }
                else//brown
                {

                    for (var i = HourseMidle; i < HourseHight; i++)
                    {
                        if (HoursesOnTable == null || HoursesOnTable[i] == null)
                            continue;

                        for (var j = 0; j < HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse.Count; j++)
                        {
                            if (!(HoursesOnTable[i].HourseThinkingQuantum[0].IsSup[j]))
                                continue;

                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][0] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicAttackValueSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][1] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][2] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicSelfSupportedValueSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][3] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][4] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicReducedSupportSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][5] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicReducedAttackValueSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][6] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicDistributionValueSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][7] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicKingSafeSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][8] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicFromCenterSup;
                            this.HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][9] += HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicKingDangourSup;
                            HoursesOnTable[i].HourseThinkingQuantum[0].IsSup[j] = false;

                            AllDraw.OutPut.Append("\r\nServed Hourse!");
                        }
                    }
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicAttackValueSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicSelfSupportedValueSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicReducedSupportSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicReducedAttackValueSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicDistributionValueSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicKingSafeSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicFromCenterSup = 0;
                    HoursesOnTable[ii].HourseThinkingQuantum[0].HeuristicKingDangourSup = 0;
                }

            }
            else if (Kind == 4)//Castle
            {
                if (Order == 1)//gray
                {

                    for (var i = 0; i < CastleMidle; i++)
                    {
                        if (CastlesOnTable == null || CastlesOnTable[i] == null)
                            continue;

                        for (var j = 0; j < CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle.Count; j++)
                        {
                            if (!(CastlesOnTable[i].CastleThinkingQuantum[0].IsSup[j]))
                                continue;

                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][0] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicAttackValueSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][1] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][2] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicSelfSupportedValueSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][3] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][4] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicReducedSupportSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][5] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicReducedAttackValueSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][6] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicDistributionValueSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][7] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicKingSafeSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][8] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicFromCenterSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][9] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicKingDangourSup;
                            CastlesOnTable[i].CastleThinkingQuantum[0].IsSup[j] = false;

                            AllDraw.OutPut.Append("\r\nServed Castle!");
                        }
                    }
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicAttackValueSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicSelfSupportedValueSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicReducedSupportSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicReducedAttackValueSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicDistributionValueSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicKingSafeSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicFromCenterSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicKingDangourSup = 0;

                }
                else//brown
                {

                    for (var i = CastleMidle; i < CastleHigh; i++)
                    {
                        if (CastlesOnTable == null || CastlesOnTable[i] == null)
                            continue;

                        for (var j = 0; j < CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle.Count; j++)
                        {
                            if (!(CastlesOnTable[i].CastleThinkingQuantum[0].IsSup[j]))
                                continue;


                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][0] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicAttackValueSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][1] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][2] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicSelfSupportedValueSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][3] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][4] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicReducedSupportSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][5] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicReducedAttackValueSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][6] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicDistributionValueSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][7] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicKingSafeSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][8] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicFromCenterSup;
                            this.CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][9] += CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicKingDangourSup;
                            CastlesOnTable[i].CastleThinkingQuantum[0].IsSup[j] = false;

                            AllDraw.OutPut.Append("\r\nServed Castle!");
                        }
                    }
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicAttackValueSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicSelfSupportedValueSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicReducedSupportSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicReducedAttackValueSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicDistributionValueSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicKingSafeSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicFromCenterSup = 0;
                    CastlesOnTable[ii].CastleThinkingQuantum[0].HeuristicKingDangourSup = 0;
                }
            }
            else//minister
            if (Kind == 5)
            {
                if (Order == 1)//gray
                {

                    for (var i = 0; i < MinisterMidle; i++)
                    {
                        if (MinisterOnTable == null || MinisterOnTable[i] == null)
                            continue;

                        for (var j = 0; j < MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister.Count; j++)
                        {
                            if (!(MinisterOnTable[i].MinisterThinkingQuantum[0].IsSup[j]))
                                continue;

                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][0] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicAttackValueSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][1] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][2] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicSelfSupportedValueSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][3] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][4] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicReducedSupportSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][5] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicReducedAttackValueSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][6] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicDistributionValueSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][7] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicKingSafeSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][8] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicFromCenterSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][9] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicKingDangourSup;
                            MinisterOnTable[i].MinisterThinkingQuantum[0].IsSup[j] = false;


                            AllDraw.OutPut.Append("\r\nServed Minister!");
                        }
                    }
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicAttackValueSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicSelfSupportedValueSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicReducedSupportSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicReducedAttackValueSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicDistributionValueSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicKingSafeSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicFromCenterSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicKingDangourSup = 0;

                }
                else
                {

                    for (var i = MinisterMidle; i < MinisterHigh; i++)
                    {
                        if (MinisterOnTable == null || MinisterOnTable[i] == null)
                            continue;

                        for (var j = 0; j < MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister.Count; j++)
                        {
                            if (!(MinisterOnTable[i].MinisterThinkingQuantum[0].IsSup[j]))
                                continue;


                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][0] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicAttackValueSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][1] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][2] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicSelfSupportedValueSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][3] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][4] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicReducedSupportSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][5] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicReducedAttackValueSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][6] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicDistributionValueSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][7] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicKingSafeSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][8] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicFromCenterSup;
                            this.MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][9] += MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicKingDangourSup;
                            MinisterOnTable[i].MinisterThinkingQuantum[0].IsSup[j] = false;

                            AllDraw.OutPut.Append("\r\nServed Minister!");
                        }
                    }
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicAttackValueSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicSelfSupportedValueSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicReducedSupportSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicReducedAttackValueSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicDistributionValueSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicKingSafeSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicFromCenterSup = 0;
                    MinisterOnTable[ii].MinisterThinkingQuantum[0].HeuristicKingDangourSup = 0;
                }
            }
            else
            if (Kind == 6)//king
            {
                if (Order == 1)//gray
                {

                    for (var i = 0; i < KingMidle; i++)
                    {
                        if (KingOnTable == null || KingOnTable[i] == null)
                            continue;

                        for (var j = 0; j < KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing.Count; j++)
                        {
                            if (!(KingOnTable[i].KingThinkingQuantum[0].IsSup[j]))
                                continue;

                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][0] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicAttackValueSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][1] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][2] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicSelfSupportedValueSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][3] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][4] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicReducedSupportSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][5] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicReducedAttackValueSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][6] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicDistributionValueSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][7] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicKingSafeSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][8] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicFromCenterSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][9] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicKingDangourSup;
                            KingOnTable[i].KingThinkingQuantum[0].IsSup[j] = false;


                            AllDraw.OutPut.Append("\r\nServed King!");
                        }
                    }
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicAttackValueSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicSelfSupportedValueSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicReducedSupportSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicReducedAttackValueSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicDistributionValueSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicKingSafeSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicFromCenterSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicKingDangourSup = 0;


                }
                else//brown
                {

                    for (var i = KingMidle; i < KingHigh; i++)
                    {
                        if (KingOnTable == null || KingOnTable[i] == null)
                            continue;

                        for (var j = 0; j < KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing.Count; j++)
                        {
                            if (!(KingOnTable[i].KingThinkingQuantum[0].IsSup[j]))
                                continue;


                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][0] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicAttackValueSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][1] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][2] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicSelfSupportedValueSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][3] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicReducedMovementValueSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][4] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicReducedSupportSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][5] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicReducedAttackValueSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][6] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicDistributionValueSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][7] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicKingSafeSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][8] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicFromCenterSup;
                            this.KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][9] += KingOnTable[ii].KingThinkingQuantum[0].HeuristicKingDangourSup;
                            KingOnTable[i].KingThinkingQuantum[0].IsSup[j] = false;


                            AllDraw.OutPut.Append("\r\nServed King!");
                        }
                    }
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicAttackValueSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicSelfSupportedValueSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicReducedMovementValueSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicReducedSupportSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicReducedAttackValueSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicDistributionValueSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicKingSafeSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicFromCenterSup = 0;
                    KingOnTable[ii].KingThinkingQuantum[0].HeuristicKingDangourSup = 0;


                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("ServeISSup:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        void ThinkingQuantumAllowedSemaphore(int i)
        {
            if (ThinkingQuantumAllowed == null)
                ThinkingQuantumAllowed = new bool[12];
            do {  } while (!ThinkingQuantumAllowed[i - 1]);


        }
        //main initiation of soldier gray
        AllDraw InitiateAStarGreedytSodlerGray(int iii, int jjj, int[,] Table, int DummyOrder, int DummyCurrentOrder, int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, bool TB, bool FOUND, int LeafAStarGreedy//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref int Less
            )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object oo = new Object();
            lock (oo)
            {
                //var arr = Task.Factory.StartNew(() => ThinkingQuantumAllowedSemaphore(1));
                //arr.Wait();

                //For Gray Soldeirs Objects. 
                Parallel.For(0, SodierMidle, i =>
                //for (var i = 0; i < SodierMidle; i++)
                {
                    Object O = new Object();
                    lock (O)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        //If Solders Not Exist Continue and Traversal Back.
                        if (SolderesOnTable != null && SolderesOnTable[i] != null)
                        {
                            //Initiate of Local Variables By Global Objective Gray Current Solder.
                            ii = (int)SolderesOnTable[i].Row;
                            jj = (int)SolderesOnTable[i].Column;
                            //Construction of ThinkingQuantum Gray Soldier By Local Variables.
                            if (SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count == 0)
                                SolderesOnTable[i] = new DrawSoldierQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, ii, jj, a, CloneATable(Table), Order, false, i);
                            //If There is no ThinkingQuantum Movments on Current Object  

                            if (SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count == 0)
                            {
                                //For All Movable Gray Solders.
                                ////Parallel.For(0, AllDraw.SodierMovments, j =>
                                {
                                    //ThinkingQuantum of Gray Solder Operation.
                                    Object OOO = new Object();
                                    lock (OOO)
                                    {
                                        SolderesOnTable[i].SoldierThinkingQuantum[0].ThinkingQuantumBegin = true;
                                        SolderesOnTable[i].SoldierThinkingQuantum[0].ThinkingQuantumFinished = false;
                                        var array = Task.Factory.StartNew(() => SolderesOnTable[i].SoldierThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref SolderesOnTable[i].LoseOcuuredatChiled, ref SolderesOnTable[i].WinOcuuredatChiled));
                                        tH.Add(array);
                                        //ServeISSup(Order,1, i);
                                    }

                                }//);
                            }
                            else
                            {
                                SolderesOnTable[i].SoldierThinkingQuantum[0].ThinkingQuantumBegin = false;
                                SolderesOnTable[i].SoldierThinkingQuantum[0].ThinkingQuantumFinished = true;
                            }
                        }

                    }
                });


            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedytSodlerGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return this;
        }
        //main initiation of elephant gray
        AllDraw InitiateAStarGreedytElephantGray(int iii, int jjj, int[,] Table, int DummyOrder, int DummyCurrentOrder, int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, bool TB, bool FOUND, int LeafAStarGreedy//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref int Less
            )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object oo = new Object();
            lock (oo)
            {
                //var arr = Task.Factory.StartNew(() => ThinkingQuantumAllowedSemaphore(2));
                //arr.Wait();

                Parallel.For(0, ElefantMidle, i =>
                //for (var i = 0; i < ElefantMidle; i++)
                {
                    Object O = new Object();
                    lock (O)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        //Ignore of Non Exist Current Elephant Gray Objects.
                        if (ElephantOnTable != null && ElephantOnTable[i] != null)
                        {
                            //Inititae Local Varibale By Global Gray Elephant Objects Varibales.
                            ii = (int)ElephantOnTable[i].Row;
                            jj = (int)ElephantOnTable[i].Column;
                            //Construction of ThinkingQuantum Objects By Local Varibales.
                            if (ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count == 0)
                                ElephantOnTable[i] = new DrawElefantQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, ii, jj, a, CloneATable(Table), Order, false, i);
                            //If There is Not ThinkingQuantum Objetive List Elephant Gray. 
                            if (ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count == 0)
                            {
                                //For All Possible Movments.
                                ////Parallel.For(0, AllDraw.ElefantMovments, j =>
                                {
                                    //Operational ThinkingQuantum Gray Elephant. 
                                    Object OOO = new Object();
                                    lock (OOO)
                                    {
                                        ElephantOnTable[i].ElefantThinkingQuantum[0].ThinkingQuantumBegin = true;
                                        ElephantOnTable[i].ElefantThinkingQuantum[0].ThinkingQuantumFinished = false;

                                        var array = Task.Factory.StartNew(() => ElephantOnTable[i].ElefantThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref ElephantOnTable[i].LoseOcuuredatChiled, ref ElephantOnTable[i].WinOcuuredatChiled));
                                        tH.Add(array);
                                        //ServeISSup(Order,2, i);

                                    }
                                }//);
                            }
                            else
                            {
                                ElephantOnTable[i].ElefantThinkingQuantum[0].ThinkingQuantumBegin = false;
                                ElephantOnTable[i].ElefantThinkingQuantum[0].ThinkingQuantumFinished = true;
                            }
                        }

                    }
                });

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedytElephantGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;

            return this;
        }
        //main initiation of hourse gray
        AllDraw InitiateAStarGreedythHourseGray(int iii, int jjj, int[,] Table, int DummyOrder, int DummyCurrentOrder, int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, bool TB, bool FOUND, int LeafAStarGreedy//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref int Less
            )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object oo = new Object();
            lock (oo)
            {
                //var arr = Task.Factory.StartNew(() => ThinkingQuantumAllowedSemaphore(3));
                //arr.Wait();

                //For All Gray Hourse Objects.
                Parallel.For(0, HourseMidle, i =>
                //for (var i = 0; i < HourseMidle; i++)
                {
                    Object O = new Object();
                    lock (O)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        //Ignore of Non Exist Current Gray Hourse Objects.
                        if (HoursesOnTable != null && HoursesOnTable[i] != null)
                        {
                            //Initiate of Local Variables By Global Gray Hourse Objectives.
                            ii = (int)HoursesOnTable[i].Row;
                            jj = (int)HoursesOnTable[i].Column;
                            //Construction of Gray Hourse ThinkingQuantum Objects..
                            if (HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count == 0)
                                HoursesOnTable[i] = new DrawHourseQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, ii, jj, a, CloneATable(Table), Order, false, i);
                            //When There is Not HourseList Count. 
                            if (HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count == 0)
                            {
                                //For All Possible Movments.
                                ////Parallel.For(0, AllDraw.HourseMovments, j =>
                                {
                                    //ThinkingQuantum of Gray Hourse Oprational.
                                    Object OOO = new Object();
                                    lock (OOO)
                                    {
                                        HoursesOnTable[i].HourseThinkingQuantum[0].ThinkingQuantumBegin = true;
                                        HoursesOnTable[i].HourseThinkingQuantum[0].ThinkingQuantumFinished = false;
                                        var array = Task.Factory.StartNew(() => HoursesOnTable[i].HourseThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref HoursesOnTable[i].LoseOcuuredatChiled, ref HoursesOnTable[i].WinOcuuredatChiled));
                                        tH.Add(array);

                                        //ServeISSup(Order,3, i);



                                    }
                                }//);
                            }
                            else
                            {
                                HoursesOnTable[i].HourseThinkingQuantum[0].ThinkingQuantumBegin = false;
                                HoursesOnTable[i].HourseThinkingQuantum[0].ThinkingQuantumFinished = true;
                            }
                        }

                    }
                });


            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedythHourseGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return this;
        }
        //main initiation of Castle gray
        AllDraw InitiateAStarGreedythCastleGray(int iii, int jjj, int[,] Table, int DummyOrder, int DummyCurrentOrder, int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, bool TB, bool FOUND, int LeafAStarGreedy//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref int Less
            )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object oo = new Object();
            lock (oo)
            {
                //var arr = Task.Factory.StartNew(() => ThinkingQuantumAllowedSemaphore(4));
                //arr.Wait();

                //For All Possible Gray Castles Objects.
                Parallel.For(0, CastleMidle, i =>
                //for (var i = 0; i < CastleMidle; i++)
                {
                    Object O = new Object();
                    lock (O)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        //When Current Castles Gray Not Exist Continue Traversal Back.
                        if (CastlesOnTable != null && CastlesOnTable[i] != null)
                        {
                            //Initaiate of Local Varibales By Global Varoiables.
                            ii = (int)CastlesOnTable[i].Row;
                            jj = (int)CastlesOnTable[i].Column;
                            //Construction of ThinkingQuantum Variables By Local Variables.
                            if (CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count == 0)
                                CastlesOnTable[i] = new DrawCastleQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, ii, jj, a, CloneATable(Table), Order, false, i);
                            //When Count of Table Castles of ThinkingQuantum Not Exist Do Operational.
                            if (CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count == 0)
                            {
                                //For All Possible Movments.
                                ////Parallel.For(0, AllDraw.CastleMovments, j =>
                                {
                                    Object OOO = new Object();
                                    lock (OOO)
                                    {
                                        //ThinkingQuantum of Gray Castles Operational.
                                        CastlesOnTable[i].CastleThinkingQuantum[0].ThinkingQuantumBegin = true;
                                        CastlesOnTable[i].CastleThinkingQuantum[0].ThinkingQuantumFinished = false;

                                        var array = Task.Factory.StartNew(() => CastlesOnTable[i].CastleThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref CastlesOnTable[i].LoseOcuuredatChiled, ref CastlesOnTable[i].WinOcuuredatChiled));
                                        tH.Add(array);
                                        //ServeISSup(Order,4, i);

                                    }
                                }//);

                            }
                            else
                            {
                                CastlesOnTable[i].CastleThinkingQuantum[0].ThinkingQuantumBegin = false;
                                CastlesOnTable[i].CastleThinkingQuantum[0].ThinkingQuantumFinished = true;
                            }
                        }

                    }
                });


            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedythCastleGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return this;
        }
        //main initiation of minister gray
        AllDraw InitiateAStarGreedythMinisterGray(int iii, int jjj, int[,] Table, int DummyOrder, int DummyCurrentOrder, int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, bool TB, bool FOUND, int LeafAStarGreedy//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref int Less
            )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object oo = new Object();
            lock (oo)
            {
                //var arr = Task.Factory.StartNew(() => ThinkingQuantumAllowedSemaphore(5));
                //arr.Wait();

                //For All Possible Gray Minister Movments.
                Parallel.For(0, MinisterMidle, i =>
                //for (var i = 0; i < MinisterMidle; i++)
                {

                    Object O = new Object();
                    lock (O)
                    {
                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        //For Each Non Exist Gray Minister Objectives.
                        if (MinisterOnTable != null && MinisterOnTable[i] != null)
                        {
                            //Inititate Local Variables By Global Varibales.
                            ii = (int)MinisterOnTable[i].Row;
                            jj = (int)MinisterOnTable[i].Column;
                            //Construction of ThinkingQuantum Objects Gray Minister.
                            if (MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count == 0)
                                MinisterOnTable[i] = new DrawMinisterQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, ii, jj, a, CloneATable(Table), Order, false, i);
                            //If There is Not Minister Of Gray In The ThinkingQuantum Table List.   
                            if (MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count == 0)
                            {
                                //For All Possible Movments.
                                // //Parallel.For(0, AllDraw.MinisterMovments, j =>
                                {
                                    //ThinkingQuantum of Gray Minister Operational.
                                    Object OOO = new Object();
                                    lock (OOO)
                                    {
                                        MinisterOnTable[i].MinisterThinkingQuantum[0].ThinkingQuantumBegin = true;
                                        MinisterOnTable[i].MinisterThinkingQuantum[0].ThinkingQuantumFinished = false;

                                        var array = Task.Factory.StartNew(() => MinisterOnTable[i].MinisterThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref MinisterOnTable[i].LoseOcuuredatChiled, ref MinisterOnTable[i].WinOcuuredatChiled));
                                        tH.Add(array);
                                        //ServeISSup(Order,5, i);

                                    }
                                }//);

                            }
                            else
                            {
                                MinisterOnTable[i].MinisterThinkingQuantum[0].ThinkingQuantumBegin = false;
                                MinisterOnTable[i].MinisterThinkingQuantum[0].ThinkingQuantumFinished = true;
                            }
                        }
                    }

                });

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedythMinisterGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return this;
        }
        //main initiation of king gray
        AllDraw InitiateAStarGreedythKingGray(int iii, int jjjj, int[,] Table, int DummyOrder, int DummyCurrentOrder, int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, bool TB, bool FOUND, int LeafAStarGreedy//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref int Less
            )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object oo = new Object();
            lock (oo)
            {
                //var arr = Task.Factory.StartNew(() => ThinkingQuantumAllowedSemaphore(6));
                //arr.Wait();

                //For All Possible Gray King Objects.
                Parallel.For(0, KingMidle, i =>
                //for (var i = 0; i < KingMidle; i++)
                {
                    Object O = new Object();
                    lock (O)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        //If There is Not Current Object Continue Traversal Back.
                        if (KingOnTable != null && KingOnTable[i] != null)
                        {
                            //Initiate Local varibale By Global Objective Varibales.
                            ii = (int)(int)KingOnTable[i].Row;
                            jj = (int)KingOnTable[i].Column;
                            //Construction of Gray King ThinkingQuantum Objects.
                            if (KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count == 0)
                                KingOnTable[i] = new DrawKingQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, ii, jj, a, CloneATable(Table), Order, false, i);
                            //When There is Not ThinkingQuantum Table Gray King Movments.
                            if (KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count == 0)
                            {
                                //For All Possible Gray King Movments.
                                ////Parallel.For(0, AllDraw.KingMovments, j =>
                                {
                                    //ThinkingQuantum Of Gray King Operatins.
                                    Object OOO = new Object();
                                    lock (OOO)
                                    {
                                        KingOnTable[i].KingThinkingQuantum[0].ThinkingQuantumBegin = true;
                                        KingOnTable[i].KingThinkingQuantum[0].ThinkingQuantumFinished = false;
                                        ; var array = Task.Factory.StartNew(() => KingOnTable[i].KingThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref KingOnTable[i].LoseOcuuredatChiled, ref KingOnTable[i].WinOcuuredatChiled));
                                        tH.Add(array);

                                        //ServeISSup(Order,6, i);
                                    }
                                }//);
                            }
                            else
                            {
                                KingOnTable[i].KingThinkingQuantum[0].ThinkingQuantumBegin = false;
                                KingOnTable[i].KingThinkingQuantum[0].ThinkingQuantumFinished = true;
                            }
                        }

                    }
                });

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedythKingGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return this;
        }
        //main initiation of soldier brown 
        AllDraw InitiateAStarGreedythSoldierBrown(int iii, int jjj, int[,] Table, int DummyOrder, int DummyCurrentOrder, int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, bool TB, bool FOUND, int LeafAStarGreedy//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref int Less
            )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object oo = new Object();
            lock (oo)
            {
                //var arr = Task.Factory.StartNew(() => ThinkingQuantumAllowedSemaphore(7));
                //arr.Wait();

                //For Each Objects of Brown Sodiers.
                Parallel.For(SodierMidle, SodierHigh, i =>
                //for (var i = SodierMidle; i < SodierHigh; i++)
                {
                    Object O = new Object();
                    lock (O)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        //Wheen Brown King Object There is Not Continue Traversal Back.
                        if (SolderesOnTable != null && SolderesOnTable[i] != null)
                        {
                            //Initiate Local varibale By Global Objective Varibales.
                            ii = (int)SolderesOnTable[i].Row;
                            jj = (int)SolderesOnTable[i].Column;
                            //Construction of ThinkingQuantum Brown Current Objects.
                            if (SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count == 0)
                                SolderesOnTable[i] = new DrawSoldierQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, ii, jj, a, CloneATable(Table), Order, false, i);
                            {
                                //When There is Current Brown Object Table List ThinkingQuantum Objective Movments.
                                if (SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count == 0)
                                {
                                    //For Each Brown Possible Movments. 
                                    ////Parallel.For(0, AllDraw.SodierMovments, j =>
                                    {
                                        //ThinkingQuantum Operations of Brown Current Objects.
                                        Object OOO = new Object();
                                        lock (OOO)
                                        {
                                            SolderesOnTable[i].SoldierThinkingQuantum[0].ThinkingQuantumBegin = true;
                                            SolderesOnTable[i].SoldierThinkingQuantum[0].ThinkingQuantumFinished = false;
                                            var array = Task.Factory.StartNew(() => SolderesOnTable[i].SoldierThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref SolderesOnTable[i].LoseOcuuredatChiled, ref SolderesOnTable[i].WinOcuuredatChiled));
                                            tH.Add(array);
                                            //ServeISSup(Order,1, i);
                                        }
                                    }//);

                                }
                                else
                                {
                                    SolderesOnTable[i].SoldierThinkingQuantum[0].ThinkingQuantumBegin = false;
                                    SolderesOnTable[i].SoldierThinkingQuantum[0].ThinkingQuantumFinished = true;
                                }

                            }
                        }

                    }
                });


            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedythSoldierBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return this;
        }
        //main initiation of elephant brown
        AllDraw InitiateAStarGreedythElephantBrown(int iii, int jjj, int[,] Table, int DummyOrder, int DummyCurrentOrder, int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, bool TB, bool FOUND, int LeafAStarGreedy//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref int Less
            )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object oo = new Object();
            lock (oo)
            {
                //var arr = Task.Factory.StartNew(() => ThinkingQuantumAllowedSemaphore(8));
                //arr.Wait();


                Parallel.For(ElefantMidle, ElefantHigh, i =>
                //for (var i = ElefantMidle; i < ElefantHigh; i++)
                {
                    Object O = new Object();
                    lock (O)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        if (ElephantOnTable != null && ElephantOnTable[i] != null)
                        {
                            //Initiate Local varibale By Global Objective Varibales.
                            ii = (int)ElephantOnTable[i].Row;
                            jj = (int)ElephantOnTable[i].Column;
                            //Construction of ThinkingQuantum Brown Current Objects.
                            if (ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count == 0)
                                ElephantOnTable[i] = new DrawElefantQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, ii, jj, a, CloneATable(Table), Order, false, i);
                            {
                                //When There is Current Brown Object Table List ThinkingQuantum Objective Movments.
                                if (ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count == 0)
                                {
                                    //For Each Brown Possible Movments. 
                                    ////Parallel.For(0, AllDraw.ElefantMovments, j =>
                                    {
                                        Object OOO = new Object();
                                        lock (OOO)
                                        {
                                            //ThinkingQuantum Operations of Brown Current Objects.
                                            ElephantOnTable[i].ElefantThinkingQuantum[0].ThinkingQuantumBegin = true;
                                            ElephantOnTable[i].ElefantThinkingQuantum[0].ThinkingQuantumFinished = false;
                                            var array = Task.Factory.StartNew(() => ElephantOnTable[i].ElefantThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref ElephantOnTable[i].LoseOcuuredatChiled, ref ElephantOnTable[i].WinOcuuredatChiled));
                                            tH.Add(array);

                                            //ServeISSup(Order,2, i);
                                        }
                                    }//);
                                }
                                else
                                {
                                    ElephantOnTable[i].ElefantThinkingQuantum[0].ThinkingQuantumBegin = false;
                                    ElephantOnTable[i].ElefantThinkingQuantum[0].ThinkingQuantumFinished = true;
                                }

                            }
                        }

                    }
                });


            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedythElephantBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return this;
        }
        //main initiation of hourse brown
        AllDraw InitiateAStarGreedythHourseBrown(int iii, int jjj, int[,] Table, int DummyOrder, int DummyCurrentOrder, int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, bool TB, bool FOUND, int LeafAStarGreedy//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref int Less
            )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object oo = new Object();
            lock (oo)
            {
                //var arr = Task.Factory.StartNew(() => ThinkingQuantumAllowedSemaphore(9));
                //arr.Wait();

                Parallel.For(HourseMidle, HourseHight, i =>
                //for (var i = HourseMidle; i < HourseHight; i++)
                {
                    Object O = new Object();
                    lock (O)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        if (HoursesOnTable != null && HoursesOnTable[i] != null)
                        {
                            //Initiate Local varibale By Global Objective Varibales.
                            ii = (int)HoursesOnTable[i].Row;
                            jj = (int)HoursesOnTable[i].Column;
                            //Construction of ThinkingQuantum Brown Current Objects.
                            if (HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count == 0)
                                HoursesOnTable[i] = new DrawHourseQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, ii, jj, a, CloneATable(Table), Order, false, i);

                            {
                                //When There is Current Brown Object Table List ThinkingQuantum Objective Movments.
                                if (HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count == 0)
                                {
                                    //For Each Brown Possible Movments. 
                                    ////Parallel.For(0, AllDraw.HourseMovments, j =>
                                    {
                                        Object OOO = new Object();
                                        lock (OOO)
                                        {
                                            //ThinkingQuantum Operations of Brown Current Objects.
                                            //HoursesOnTable[i].HourseThinkingQuantum[0].TableT = HoursesOnTable[i].HourseThinkingQuantum[0].TableT;
                                            HoursesOnTable[i].HourseThinkingQuantum[0].ThinkingQuantumBegin = true;
                                            HoursesOnTable[i].HourseThinkingQuantum[0].ThinkingQuantumFinished = false;
                                            ;
                                            var array = Task.Factory.StartNew(() => HoursesOnTable[i].HourseThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref HoursesOnTable[i].LoseOcuuredatChiled, ref HoursesOnTable[i].WinOcuuredatChiled));
                                            tH.Add(array);
                                            //ServeISSup(Order,3, i);
                                        }
                                    }//);


                                }
                                else
                                {
                                    HoursesOnTable[i].HourseThinkingQuantum[0].ThinkingQuantumBegin = false;
                                    HoursesOnTable[i].HourseThinkingQuantum[0].ThinkingQuantumFinished = true;
                                }
                            }

                        }
                    }
                });


            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedythHourseBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return this;
        }
        //main initiation of Castle brown
        AllDraw InitiateAStarGreedythCastleBrown(int iii, int jjj, int[,] Table, int DummyOrder, int DummyCurrentOrder, int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, bool TB, bool FOUND, int LeafAStarGreedy//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref int Less
            )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object oo = new Object();
            lock (oo)
            {
                //var arr = Task.Factory.StartNew(() => ThinkingQuantumAllowedSemaphore(10));
                //arr.Wait();

                Parallel.For(CastleMidle, CastleHigh, i =>
                //for (var i = CastleMidle; i < CastleHigh; i++)
                {
                    Object O = new Object();
                    lock (O)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        if (CastlesOnTable != null && CastlesOnTable[i] != null)

                        {
                            //Initiate Local varibale By Global Objective Varibales.
                            ii = (int)CastlesOnTable[i].Row;
                            jj = (int)CastlesOnTable[i].Column;
                            //Construction of ThinkingQuantum Brown Current Objects.
                            if (CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count == 0)
                                CastlesOnTable[i] = new DrawCastleQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, ii, jj, a, CloneATable(Table), Order, false, i);

                            {
                                //When There is Current Brown Object Table List ThinkingQuantum Objective Movments.
                                if (CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count == 0)
                                {
                                    //For Each Brown Possible Movments. 
                                    ////Parallel.For(0, AllDraw.CastleMovments, j =>
                                    {
                                        Object OOO = new Object();
                                        lock (OOO)
                                        {
                                            //ThinkingQuantum Operations of Brown Current Objects.
                                            CastlesOnTable[i].CastleThinkingQuantum[0].ThinkingQuantumBegin = true;
                                            CastlesOnTable[i].CastleThinkingQuantum[0].ThinkingQuantumFinished = false;
                                            var array = Task.Factory.StartNew(() => CastlesOnTable[i].CastleThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref CastlesOnTable[i].LoseOcuuredatChiled, ref CastlesOnTable[i].WinOcuuredatChiled));
                                            tH.Add(array); ;
                                            //ServeISSup(Order,4, i);
                                        }
                                    }//);

                                }
                                else
                                {
                                    CastlesOnTable[i].CastleThinkingQuantum[0].ThinkingQuantumBegin = false;
                                    CastlesOnTable[i].CastleThinkingQuantum[0].ThinkingQuantumFinished = true;
                                }
                            }
                        }

                    }
                });


            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedythCastleBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return this;
        }
        //main initiatiob of minister brown
        AllDraw InitiateAStarGreedythMinisterBrown(int iii, int jjj, int[,] Table, int DummyOrder, int DummyCurrentOrder, int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, bool TB, bool FOUND, int LeafAStarGreedy//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref int Less
            )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object oo = new Object();
            lock (oo)
            {
                //var arr = Task.Factory.StartNew(() => ThinkingQuantumAllowedSemaphore(11));
                //arr.Wait();


                Parallel.For(MinisterMidle, MinisterHigh, i =>
                //for (var i = MinisterMidle; i < MinisterHigh; i++)
                {
                    Object O = new Object();
                    lock (O)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        if (MinisterOnTable != null && MinisterOnTable[i] != null)
                        {
                            //Initiate Local varibale By Global Objective Varibales.
                            ii = (int)MinisterOnTable[i].Row;
                            jj = (int)MinisterOnTable[i].Column;
                            //Construction of ThinkingQuantum Brown Current Objects.
                            if (MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count == 0)
                                MinisterOnTable[i] = new DrawMinisterQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, ii, jj, a, CloneATable(Table), Order, false, i);

                            //When There is Current Brown Object Table List ThinkingQuantum Objective Movments.
                            if (MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count == 0)
                            {
                                //For Each Brown Possible Movments. 
                                ////Parallel.For(0, AllDraw.MinisterMovments, j =>
                                {
                                    Object OOO = new Object();
                                    lock (OOO)
                                    {
                                        //ThinkingQuantum Operations of Brown Current Objects.
                                        MinisterOnTable[i].MinisterThinkingQuantum[0].ThinkingQuantumBegin = true;
                                        MinisterOnTable[i].MinisterThinkingQuantum[0].ThinkingQuantumFinished = false;
                                        var array = Task.Factory.StartNew(() => MinisterOnTable[i].MinisterThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref MinisterOnTable[i].LoseOcuuredatChiled, ref MinisterOnTable[i].WinOcuuredatChiled));
                                        tH.Add(array);


                                        //ServeISSup(Order,5, i);
                                    }
                                }//);
                            }
                            else
                            {
                                MinisterOnTable[i].MinisterThinkingQuantum[0].ThinkingQuantumBegin = false;
                                MinisterOnTable[i].MinisterThinkingQuantum[0].ThinkingQuantumFinished = true;
                            }
                        }

                    }
                });

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedythMinisterBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;

            return this;
        }
        //main initiation of king brown
        AllDraw InitiateAStarGreedythKingBrown(int iii, int jjj, int[,] Table, int DummyOrder, int DummyCurrentOrder, int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, bool TB, bool FOUND, int LeafAStarGreedy//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref int Less
            )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object oo = new Object();
            lock (oo)
            {
                //var arr = Task.Factory.StartNew(() => ThinkingQuantumAllowedSemaphore(12));
                //arr.Wait();


                Parallel.For(KingMidle, KingHigh, i =>
                //for (var i = KingMidle; i < KingHigh; i++)
                {
                    Object O = new Object();
                    lock (O)
                    {

                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        if (KingOnTable != null && KingOnTable[i] != null)
                        {
                            //Initiate Local varibale By Global Objective Varibales.
                            ii = (int)KingOnTable[i].Row;
                            jj = (int)KingOnTable[i].Column;
                            //Construction of ThinkingQuantum Brown Current Objects.
                            if (KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count == 0)
                                KingOnTable[i] = new DrawKingQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, ii, jj, a, CloneATable(Table), Order, false, i);

                            //When There is Current Brown Object Table List ThinkingQuantum Objective Movments.
                            if (KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count == 0)
                            {
                                //For Each Brown Possible Movments. 
                                ////Parallel.For(0, AllDraw.KingMovments, j =>
                                {
                                    Object OOO = new Object();
                                    lock (OOO)
                                    {
                                        //ThinkingQuantum Operations of Brown Current Objects.
                                        KingOnTable[i].KingThinkingQuantum[0].ThinkingQuantumBegin = true;
                                        KingOnTable[i].KingThinkingQuantum[0].ThinkingQuantumFinished = false;
                                        var array = Task.Factory.StartNew(() => KingOnTable[i].KingThinkingQuantum[0].ThinkingQuantum(iAStarGreedy, this, ref KingOnTable[i].LoseOcuuredatChiled, ref KingOnTable[i].WinOcuuredatChiled));
                                        tH.Add(array);
                                        ;
                                        //ServeISSup(Order,6, i);
                                    }
                                }//);

                            }
                            else
                            {
                                KingOnTable[i].KingThinkingQuantum[0].ThinkingQuantumBegin = false;
                                KingOnTable[i].KingThinkingQuantum[0].ThinkingQuantumFinished = true;
                            }
                        }

                    }
                });

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedythKingBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;

            return this;
        }
        //boundry condition determistic method for break
        bool FullBoundryConditions(int Current, int Order, int iAStarGreedy)
        {
            Object O = new Object();
            lock (O)
            {//long Time = TimeElapced.TimeNow();Spaces++;


                bool IS = false;
                if (iAStarGreedy < 0 //&& iAStarGreedy < MaxDuringLevelThinkingQuantumCreation
                )
                {
                    IS = true;
                }
                //gray
                if (Order == 1)
                {
                    //soldier
                    for (int ikk = 0; ikk < SodierMidle; ikk++)
                    {
                        if (SolderesOnTable == null || SolderesOnTable[ikk] == null)
                            continue;
                        if (SolderesOnTable[ikk].LoseOcuuredatChiled < -1)
                        {
                            OutPut.Append("\r\nCheckedMate SELF Boundry Conditon in Leafs found at  " + ThinkingQuantumChess.FoundFirstSelfMating.ToString());
                            IS = true;
                        }
                    }
                    //elephant
                    for (int ikk = 0; ikk < ElefantMidle; ikk++)
                    {
                        if (ElephantOnTable == null || ElephantOnTable[ikk] == null)
                            continue;
                        if (ElephantOnTable[ikk].LoseOcuuredatChiled < -1)
                        {
                            OutPut.Append("\r\nCheckedMate SELF Boundry Conditon in Leafs found at  " + ThinkingQuantumChess.FoundFirstSelfMating.ToString());
                            IS = true;
                        }
                    }
                    //hourse
                    for (int ikk = 0; ikk < HourseMidle; ikk++)
                    {
                        if (HoursesOnTable == null || HoursesOnTable[ikk] == null)
                            continue;
                        if (HoursesOnTable[ikk].LoseOcuuredatChiled < -1)
                        {
                            OutPut.Append("\r\nCheckedMate SELF Boundry Conditon in Leafs found at  " + ThinkingQuantumChess.FoundFirstSelfMating.ToString());
                            IS = true;
                        }
                    }
                    //Castle
                    for (int ikk = 0; ikk < CastleMidle; ikk++)
                    {
                        if (CastlesOnTable == null || CastlesOnTable[ikk] == null)
                            continue;
                        if (CastlesOnTable[ikk].LoseOcuuredatChiled < -1)
                        {
                            OutPut.Append("\r\nCheckedMate SELF Boundry Conditon in Leafs found at  " + ThinkingQuantumChess.FoundFirstSelfMating.ToString());
                            IS = true;
                        }
                    }
                    //minister
                    for (int ikk = 0; ikk < MinisterMidle; ikk++)
                    {
                        if (MinisterOnTable == null || MinisterOnTable[ikk] == null)
                            continue;
                        if (MinisterOnTable[ikk].LoseOcuuredatChiled < -1)
                        {
                            OutPut.Append("\r\nCheckedMate SELF Boundry Conditon in Leafs found at  " + ThinkingQuantumChess.FoundFirstSelfMating.ToString());
                            IS = true;
                        }
                    }
                    //king
                    for (int ikk = 0; ikk < KingMidle; ikk++)
                    {
                        if (KingOnTable == null || KingOnTable[ikk] == null)
                            continue;
                        if (KingOnTable[ikk].LoseOcuuredatChiled < -1)
                        {
                            OutPut.Append("\r\nCheckedMate SELF Boundry Conditon in Leafs found at  " + ThinkingQuantumChess.FoundFirstSelfMating.ToString());
                            IS = true;
                        }
                    }
                    //when vicrory count satisfied
                    if ((ThinkingQuantumChess.FoundFirstMating > (MaxAStarGreedy))) //|| (SetDeptIgnore))
                    {
                        OutPut.Append("\r\nCheckedMate Boundry Conditon in Leafs found at  " + ThinkingQuantumChess.FoundFirstMating.ToString());
                        IS = true;
                    }

                }
                else
                {
                    //soldier
                    for (int ikk = SodierMidle; ikk < SodierHigh; ikk++)
                    {
                        if (SolderesOnTable == null || SolderesOnTable[ikk] == null)
                            continue;
                        if (SolderesOnTable[ikk].LoseOcuuredatChiled < -1)
                        {
                            OutPut.Append("\r\nCheckedMate SELF Boundry Conditon in Leafs found at  " + ThinkingQuantumChess.FoundFirstSelfMating.ToString());
                            IS = true;
                        }
                    }
                    //elephant
                    for (int ikk = ElefantMidle; ikk < ElefantHigh; ikk++)
                    {
                        if (ElephantOnTable == null || ElephantOnTable[ikk] == null)
                            continue;
                        if (ElephantOnTable[ikk].LoseOcuuredatChiled < -1)
                        {
                            OutPut.Append("\r\nCheckedMate SELF Boundry Conditon in Leafs found at  " + ThinkingQuantumChess.FoundFirstSelfMating.ToString());
                            IS = true;
                        }
                    }
                    //hourse
                    for (int ikk = HourseMidle; ikk < HourseHight; ikk++)
                    {
                        if (HoursesOnTable == null || HoursesOnTable[ikk] == null)
                            continue;
                        if (HoursesOnTable[ikk].LoseOcuuredatChiled < -1)
                        {
                            OutPut.Append("\r\nCheckedMate SELF Boundry Conditon in Leafs found at  " + ThinkingQuantumChess.FoundFirstSelfMating.ToString());
                            IS = true;
                        }
                    }
                    //Castle
                    for (int ikk = CastleMidle; ikk < CastleHigh; ikk++)
                    {
                        if (CastlesOnTable == null || CastlesOnTable[ikk] == null)
                            continue;
                        if (CastlesOnTable[ikk].LoseOcuuredatChiled < -1)
                        {
                            OutPut.Append("\r\nCheckedMate SELF Boundry Conditon in Leafs found at  " + ThinkingQuantumChess.FoundFirstSelfMating.ToString());
                            IS = true;
                        }
                    }
                    //minister
                    for (int ikk = MinisterMidle; ikk < MinisterHigh; ikk++)
                    {
                        if (MinisterOnTable == null || MinisterOnTable[ikk] == null)
                            continue;
                        if (MinisterOnTable[ikk].LoseOcuuredatChiled < -1)
                        {
                            OutPut.Append("\r\nCheckedMate SELF Boundry Conditon in Leafs found at  " + ThinkingQuantumChess.FoundFirstSelfMating.ToString());
                            IS = true;
                        }
                    }
                    //king
                    for (int ikk = KingMidle; ikk < KingHigh; ikk++)
                    {
                        if (KingOnTable == null || KingOnTable[ikk] == null)
                            continue;
                        if (KingOnTable[ikk].LoseOcuuredatChiled < -1)
                        {
                            OutPut.Append("\r\nCheckedMate SELF Boundry Conditon in Leafs found at  " + ThinkingQuantumChess.FoundFirstSelfMating.ToString());
                            IS = true;
                        }
                    }
                    //when victory count satisfied
                    if ((ThinkingQuantumChess.FoundFirstMating > (MaxAStarGreedy))) //|| (SetDeptIgnore))
                    {
                        OutPut.Append("\r\nCheckedMate Boundry Conditon in Leafs found at  " + ThinkingQuantumChess.FoundFirstMating.ToString());
                        IS = true;
                    }

                }
                //when nu,bers of computational leafs satisfied 
                if (((ThinkingQuantumChess.NumbersOfAllNode - AllDraw.NumberOfLeafComputation) > 100) && AllDraw.NumberOfLeafComputation != -1)
                    IS = true;

                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullBoundryConditions:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return IS;
            }
        }
        //AStarGreedy First Initiat ThinkingQuantum Main Method.
        void AStarGreedyThinkingQuantum(int Order, int DummyOrder, int DummyCurrentOrder, int iAStarGreedy, int i, int j, int ii, int jj, int[,] Table, Color a, bool TB, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object o = new Object();
            lock (o)
            {

                //If Order is Gray.
                if (Order == 1)
                {
                    int i1 = i, j1 = j;
                    int[,] Tab = CloneATable(Table);
                    int DummyOrder1 = DummyOrder, DummyCurrentOrder1 = DummyCurrentOrder, iAStarGreedy1 = iAStarGreedy, ii1 = ii, jj1 = jj, Ord1 = OrderP;
                    bool TB1 = TB;
                    Color aa = a;

                    var output = Task.Factory.StartNew(() =>
                    Parallel.Invoke(() =>
                    {
                        //For All Gray Soldier Objects.
                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedytSodlerGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }
                    }
                    ,
                    () =>
                    {
                        //For All Gray Elephant Objects.
                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedytElephantGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }
                    }
                    , () =>
                    {
                        //For All Gray Hourse Objects.
                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedythHourseGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }
                    }
                    ,
                    () =>
                    {
                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedythCastleGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }
                    }
                    , () =>
                    {

                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedythMinisterGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }

                    }
                    , () =>
                    {
                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedythKingGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }
                    })
                    );
                }
                else//Brown Order Considarations.
                {
                    int i1 = i, j1 = j;
                    int[,] Tab = CloneATable(Table);
                    int DummyOrder1 = DummyOrder, DummyCurrentOrder1 = DummyCurrentOrder, iAStarGreedy1 = iAStarGreedy, ii1 = ii, jj1 = jj, Ord1 = OrderP;
                    bool TB1 = TB;
                    Color aa = a;
                    //If Order is Gray.

                    var output = Task.Factory.StartNew(() =>
                      Parallel.Invoke(() =>
                      {
                          //For All Gray Soldier Objects.
                          Object O = new Object();
                          lock (O)
                          {
                              this.InitiateAStarGreedythSoldierBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                          }
                      }
                      ,
                      () =>
                      {
                          //For All Gray Elephant Objects.
                          Object O = new Object();
                          lock (O)
                          {
                              this.InitiateAStarGreedythElephantBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                          }
                      }
                      , () =>
                      {
                          //For All Gray Hourse Objects.
                          Object O = new Object();
                          lock (O)
                          {
                              this.InitiateAStarGreedythHourseBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                          }
                      }
                      ,
                      () =>
                      {
                          Object O = new Object();
                          lock (O)
                          {
                              this.InitiateAStarGreedythCastleBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                          }
                      }
                      , () =>
                      {

                          Object O = new Object();
                          lock (O)
                          {
                              this.InitiateAStarGreedythMinisterBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                          }

                      }
                      , () =>
                      {
                          Object O = new Object();
                          lock (O)
                          {
                              this.InitiateAStarGreedythKingBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                          }
                      })
                     );
                    output.Wait();
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("AStarGreedyThinkingQuantum:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //initiation setdrawfounding tow stage computational method 
        public bool InitiateAStarGreedytCreationThinkingQuantum(int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, bool TB, bool FOUND, int LeafAStarGreedy//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref int Less
)
        {
             //long Time = TimeElapced.TimeNow();Spaces++;
            Object o = new Object();
            lock (o)
            {
                if (ThinkingQuantumAllowed == null)
                    ThinkingQuantumAllowed = new bool[12];
                for (int iii = 0; iii < 12; iii++)
                    ThinkingQuantumAllowed[iii] = true;

                int DummyOrder = new int();
                DummyOrder = Order;
                int DummyCurrentOrder = new int();
                DummyCurrentOrder = ChessRules.CurrentOrder;
#pragma warning disable CS0219 // The variable 'ik' is ASsigned but its value is never used
                int i = 0, ik = 0;
#pragma warning restore CS0219 // The variable 'ik' is ASsigned but its value is never used
                var j = 0;

                int[,] Table = new int[8, 8];
                for (var iii = 0; iii < 8; iii++)
                    for (var jjj = 0; jjj < 8; jjj++)
                        Table[iii, jjj] = Tab[iii, jjj];

                //If Order is Gray.
                if (Order == 1)
                {
                    int i1 = i, j1 = j;
                    int[,] Tabl = CloneATable(Table);
                    int DummyOrder1 = DummyOrder, DummyCurrentOrder1 = DummyCurrentOrder, iAStarGreedy1 = iAStarGreedy, ii1 = ii, jj1 = jj, Ord1 = OrderP;
                    bool TB1 = TB;
                    Color aa = a;


                    var output = Task.Factory.StartNew(() =>
                    Parallel.Invoke(() =>
                    {
                        //For All Gray Soldier Objects.
                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedytSodlerGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tabl, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }
                    }
                    ,
                    () =>
                    {
                        //For All Gray Elephant Objects.
                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedytElephantGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tabl, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }
                    }
                    , () =>
                    {
                        //For All Gray Hourse Objects.
                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedythHourseGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tabl, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }
                    }
                    ,
                    () =>
                    {
                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedythCastleGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tabl, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }
                    }
                    , () =>
                    {

                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedythMinisterGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tabl, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }

                    }
                    , () =>
                    {
                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedythKingGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tabl, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }
                    })
                    );
                    output.Wait();
                }
                else//Brown Order Considarations.
                {
                    int i1 = i, j1 = j;
                    int[,] Tabl = CloneATable(Table);
                    int DummyOrder1 = DummyOrder, DummyCurrentOrder1 = DummyCurrentOrder, iAStarGreedy1 = iAStarGreedy, ii1 = ii, jj1 = jj, Ord1 = OrderP;
                    bool TB1 = TB;
                    Color aa = a;
                    //If Order is Gray.


                    var output = Task.Factory.StartNew(() =>
                    Parallel.Invoke(() =>
                    {
                        //For All Gray Soldier Objects.
                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedythSoldierBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tabl, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }
                    }
                    ,
                    () =>
                    {
                        //For All Gray Elephant Objects.
                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedythElephantBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tabl, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }
                    }
                    , () =>
                    {
                        //For All Gray Hourse Objects.
                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedythHourseBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tabl, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }
                    }
                    ,
                    () =>
                    {
                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedythCastleBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tabl, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }
                    }
                    , () =>
                    {

                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedythMinisterBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tabl, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }

                    }
                    , () =>
                    {
                        Object O = new Object();
                        lock (O)
                        {
                            this.InitiateAStarGreedythKingBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tabl, Ord1, TB1, FOUND, LeafAStarGreedy);
                        }
                    })
                );
                    output.Wait();

                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedytCreationThinkingQuantum:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return true;
        }
        //computational initiation
        public AllDraw InitiateAStarGreedyt(int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, bool TB, bool FOUND, int LeafAStarGreedy//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref int Less
            )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            OrderP = Order;
            SetObjectNumbers(Tab);

            int[,] Table = new int[8, 8];
            for (var iii = 0; iii < 8; iii++)
                for (var jjj = 0; jjj < 8; jjj++)
                    Table[iii, jjj] = Tab[iii, jjj];

            Object oo = new Object();
            lock (oo)
            {
                ThinkingQuantumChess.BeginThread = 0;
                ThinkingQuantumChess.EndThread = 0;
            }
            //Initiate of global Variables Byte Local Variables.
            int DummyOrder = new int();
            DummyOrder = Order;
            int DummyCurrentOrder = new int();
            DummyCurrentOrder = ChessRules.CurrentOrder;
#pragma warning disable CS0219 // The variable 'i' is ASsigned but its value is never used
            int i = 0, ik = 0;
#pragma warning restore CS0219 // The variable 'i' is ASsigned but its value is never used
            int[,] TablInit = new int[8, 8];
            if (Order == 1)
                a = Color.Gray;
            else
                a = Color.Brown;
            var j = 0;

            //Fairness conditions for perposive AStar greedy search.
            Object Omm = new Object();
            lock (Omm)
            {
                Object OOOO = new Object();
                lock (OOOO)
                {
                    iAStarGreedy--;

                    //when search finished stop and return
                    if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                        return null;

                }
                CurrentAStarGredyMax = AStarGreedyiLevelMax - iAStarGreedy;
            }
            bool Do = false;
            if (iAStarGreedy >= 0 && iAStarGreedy < MaxDuringLevelThinkingQuantumCreation)
            {
                MaxDuringLevelThinkingQuantumCreation = iAStarGreedy;
                Object O = new Object();
                DepthIterative++;
                lock (O)
                {
                    OutPut.Append("\r\nMinimum Level During ThinkingQuantum Tree Creation is " + MaxDuringLevelThinkingQuantumCreation.ToString() + "at Iterative " + DepthIterative.ToString());
                }
            }


            if (tH == null)
                tH = new List<Task>();


            if (!FOUND)
            {
                //Initiate Of Local Variables.
                Object o = new Object();
                lock (o)
                {


                    var array1 = Task.Factory.StartNew(() => InitiateAStarGreedytCreationThinkingQuantum(iAStarGreedy, ii, jj, a, Tab, Order, TB, FOUND, LeafAStarGreedy));
                    array1.Wait();

                }

                /*

                if (!FOUND)
                {
                    //Initiate Of Local Variables.


                    Object o = new Object();
                    lock (o)
                    {

                        //If Order is Gray.
                        if (Order== 1)
                        {
                            int i1 = i, j1 = j;
                            int[,] Tabl = CloneATable(Table);
                            int DummyOrder1 = DummyOrder, DummyCurrentOrder1 = DummyCurrentOrder, iAStarGreedy1 = iAStarGreedy, ii1 = ii, jj1 = jj, Ord1 = OrderP;
                            bool TB1 = TB;
                            Color aa = a;


                            //Parallel.Invoke(() =>
                            {
                                //For All Gray Soldier Objects.
                                Object O = new Object();
                                lock (O)
                                {
                                    this.InitiateAStarGreedytSodlerGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                                }
                            }
                            //,
                           // () =>
                            {
                                //For All Gray Elephant Objects.
                                Object O = new Object();
                                lock (O)
                                {
                                    this.InitiateAStarGreedytElephantGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                                }
                            }
                            //, () =>
                            {
                                //For All Gray Hourse Objects.
                                Object O = new Object();
                                lock (O)
                                {
                                    this.InitiateAStarGreedythHourseGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                                }
                            }
                           // ,
                           // () =>
                            {
                                Object O = new Object();
                                lock (O)
                                {
                                    this.InitiateAStarGreedythCastleGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                                }
                            }
                           // , () =>
                            {

                                Object O = new Object();
                                lock (O)
                                {
                                    this.InitiateAStarGreedythMinisterGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                                }

                            }
                            //, () =>
                            {
                                Object O = new Object();
                                lock (O)
                                {
                                    this.InitiateAStarGreedythKingGray(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                                }
                            }
                           // );
                        }
                        else//Brown Order Considarations.
                        {
                            int i1 = i, j1 = j;
                            int[,] Tabl = CloneATable(Table);
                            int DummyOrder1 = DummyOrder, DummyCurrentOrder1 = DummyCurrentOrder, iAStarGreedy1 = iAStarGreedy, ii1 = ii, jj1 = jj, Ord1 = OrderP;
                            bool TB1 = TB;
                            Color aa = a;
                            //If Order is Gray.


                            //Parallel.Invoke(() =>
                            {
                                //For All Gray Soldier Objects.
                                Object O = new Object();
                                lock (O)
                                {
                                    this.InitiateAStarGreedythSoldierBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                                }
                            }
                           // ,
                           // () =>
                            {
                                //For All Gray Elephant Objects.
                                Object O = new Object();
                               lock (O)
                                {
                                    this.InitiateAStarGreedythElephantBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                                }
                            }
                            //, () =>
                            {
                                //For All Gray Hourse Objects.
                                Object O = new Object();
                                lock (O)
                                {
                                    this.InitiateAStarGreedythHourseBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                                }
                            }
                           // ,
                            //() =>
                            {
                                Object O = new Object();
                                lock (O)
                                {
                                    this.InitiateAStarGreedythCastleBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                                }
                            }
                            //, () =>
                            {

                                Object O = new Object();
                                lock (O)
                                {
                                    this.InitiateAStarGreedythMinisterBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                                }

                            }
                            //, () =>
                            {
                                Object O = new Object();
                                lock (O)
                                {
                                    this.InitiateAStarGreedythKingBrown(i1, j1, Tabl, DummyOrder1, DummyCurrentOrder1, iAStarGreedy1, ii1, jj1, aa, Tab, Ord1, TB1, FOUND, LeafAStarGreedy);
                                }
                            }
                           // );
                        }
                    }
                }
                */

            }
            Order = DummyOrder;
            ChessRules.CurrentOrder = DummyCurrentOrder;

            var array = Task.Factory.StartNew(() => Serve(Order));
            array.Wait();

            if (FOUND)
            {
                Object O = new Object();
                lock (O)
                {
                    Tabl = CloneATable(Table);
                    var array1 = Task.Factory.StartNew(() => FoundOfLeafDepenOfKindFullGame(Tabl, Order, iAStarGreedy, ii, jj, ik, j, FOUND, LeafAStarGreedy));
                    array1.Wait();
                    /*tFoundOfLeafDepenOfKindFullGame = new Task(new Action(() => FoundOfLeafDepenOfKindFullGame(Tabl, Order, iAStarGreedy, ii, jj, ik, j, FOUND, LeafAStarGreedy)));
                    tFoundOfLeafDepenOfKindFullGame.Start();
                    T.Add(tFoundOfLeafDepenOfKindFullGame);*/
                }
            }
            else
            {
                if (!Deeperthandeeper || ThinkingQuantumChess.FullGameAllow)
                {
                    Object O = new Object();
                    lock (O)
                    {
                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        int Ord = Order, iAStarGreedy1 = iAStarGreedy, ii1 = ii, jj1 = jj, ik1 = ik, j1 = j;
                        
                        //Parallel.Invoke(() =>
                        {
                            var array1 = Task.Factory.StartNew(() => Do = this.FullGameThinkingQuantumTree(Ord, iAStarGreedy1, ii1, jj1, ik1, j1, false, LeafAStarGreedy));
                            //tH.Add(array1);
                            //array1.Wait();
                            if (tH.Count > 0)
                                Parallel.ForEach(tH, items => Task.WaitAll(items));
                            else
                                array1.Wait();
                            /*tFullGameThinkingQuantumTree = new Task(new Action(() => Do = this.FullGameThinkingQuantumTree(Ord, iAStarGreedy1, ii1, jj1, ik1, j1, false, LeafAStarGreedy)));
                         tFullGameThinkingQuantumTree.Start();
                         T.Add(tFullGameThinkingQuantumTree);*/


                        }//);
                    }
                }

            }

            Object Om = new Object();
            lock (Om)
            {
                if (!Do)
                    if (iAStarGreedy < MinThinkingQuantumTreeDepth)
                        MinThinkingQuantumTreeDepth = iAStarGreedy;
            }



            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedyt:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            //Parallel.ForEach(T, items => Task.WaitAll(items));
            return this;

        }
        //computational second object
        public AllDraw InitiateAStarGreedytObject(int iAStarGreedy, int ii, int jj, Color a, int[,] Tab, int Order, bool TB, bool FOUND, int LeafAStarGreedy//, ref Refrigtz.Timer timer, ref Refrigtz.Timer Timerint, ref int Less
            )
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Do = false;
            {

                OrderP = Order;
                SetObjectNumbers(Tab);

                int[,] Table = new int[8, 8];
                for (var iii = 0; iii < 8; iii++)
                    for (var jjj = 0; jjj < 8; jjj++)
                        Table[iii, jjj] = Tab[iii, jjj];
                Object oo = new Object();
                lock (oo)
                {
                    ThinkingQuantumChess.BeginThread = 0;
                    ThinkingQuantumChess.EndThread = 0;
                }
                //Initiate of global Variables Byte Local Variables.
                int DummyOrder = new int();
                DummyOrder = Order;
                int DummyCurrentOrder = new int();
                DummyCurrentOrder = ChessRules.CurrentOrder;
                List<Task> ThB = new List<Task>();

                int i = 0, ik = 0;
                int[,] TablInit = new int[8, 8];
                if (Order == 1)
                    a = Color.Gray;
                else
                    a = Color.Brown;
                var j = 0;
                //if (iAStarGreedy>=0)
                //return null;
                Object OOOO = new Object();
                lock (OOOO)
                {
                    //if (iAStarGreedy < 0)
                    {
                        //when search finished stop and return
                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                            return null;


                    }

                }

                CurrentAStarGredyMax = AStarGreedyiLevelMax - iAStarGreedy;
                iAStarGreedy--;

                if (iAStarGreedy >= 0 && iAStarGreedy < MaxDuringLevelThinkingQuantumCreation)
                {
                    MaxDuringLevelThinkingQuantumCreation = iAStarGreedy;
                    Object O = new Object();
                    DepthIterative++;
                    lock (O)
                    {
                        OutPut.Append("\r\nMinimum Level During ThinkingQuantum Tree Creation is " + MaxDuringLevelThinkingQuantumCreation.ToString() + "at Iterative " + DepthIterative.ToString());
                    }


                }




                if (!FOUND)
                {
                    Object o = new Object();
                    lock (o)
                    {
                        if (Order == 1)
                            this.InitiateAStarGreedytObjectGray(i, j, CloneATable(Table), DummyOrder, DummyCurrentOrder, iAStarGreedy, ii, jj, a, Tab, Order, TB, FOUND, LeafAStarGreedy);
                        else
                            this.InitiateAStarGreedytObjectBrown(i, j, CloneATable(Table), DummyOrder, DummyCurrentOrder, iAStarGreedy, ii, jj, a, Tab, Order, TB, FOUND, LeafAStarGreedy);
                    }
                }

                if (FOUND)
                {
                    Object O = new Object();
                    lock (O)
                    {
                        Tabl = CloneATable(Table);
                        FoundOfLeafDepenOfKindFullGame(Tabl, Order, iAStarGreedy, ii, jj, ik, j, FOUND, LeafAStarGreedy);
                    }
                }
                else
                {
                    Object O = new Object();
                    lock (O)
                    {
                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;
                        int Ord = Order, iAStarGreedy1 = iAStarGreedy, ii1 = ii, jj1 = jj, ik1 = ik, j1 = j;
                        //int Ord = Order, iAStarGreedy1 = iAStarGreedy, ii1 = ii, jj1 = jj, ik1 = ik, j1 = j;
                        
                        //Parallel.Invoke(() =>
                        {
                            Do |= this.FullGameThinkingQuantumTree(Ord, iAStarGreedy1, ii1, jj1, ik1, j1, false, LeafAStarGreedy);
                        }//);
                    }

                }
                Object Om = new Object();
                lock (Om)
                {
                    if (!Do)
                        if (iAStarGreedy < MinThinkingQuantumTreeDepth)
                            MinThinkingQuantumTreeDepth = iAStarGreedy;
                }
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("InitiateAStarGreedytObject:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return this;
            }
        }
        //determistic of checked blitz game
        bool KingDan(int[,] Tab, int Order)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool IsDang = false;
            QuantumRefrigiz.ChessRules A = new QuantumRefrigiz.ChessRules(0, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, Order);
            IsDang = A.ObjectDangourKingMove(Order, Tab);
            if (Order == 1 && (IsDang))
            {
                if (A.CheckBrownObjectDangour && ((!A.CheckGrayObjectDangour)))
                    IsDang = false;
            }
            if (Order == -1 && (IsDang))
            {
                if (A.CheckGrayObjectDangour && ((!A.CheckBrownObjectDangour)))
                    IsDang = false;
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("KingDan:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return IsDang;

        }
        //always by calling empty deeper
        void ClearAStarGreadyWhenListsAreEmpy(int Kind, int i)
        {
            //soldier
            if (Kind == 1 && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count > 0)
                SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Clear();
            else//elephant
if (Kind == 2 && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count > 0)
                ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Clear();
            else//hourse
                if (Kind == 3 && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count > 0)
                HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Clear();
            else//Castle
                if (Kind == 4 && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy != null && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count > 0)
                CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Clear();
            else//minister
                if (Kind == 5 && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count > 0)
                MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Clear();

            else//king
                if (Kind == 6 && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count > 0)
                KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Clear();

        }
        //deterministic of calculated computational deeper
        bool IsThereCalculatedAStarGreedyNode()
        {
            bool Is = false;
            //soldier
            for (int i = 0; i < SodierHigh; i++)
            {
                if (SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder != null)
                {
                    if (SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count > 0)
                    {
                        Is = true;
                        break;
                    }
                    else
                        ClearAStarGreadyWhenListsAreEmpy(1, i);

                }
            }
            if (!Is)
            {
                //elephant
                for (int i = 0; i < ElefantHigh; i++)
                {
                    if (ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant != null)
                    {
                        if (ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count > 0)
                        {
                            Is = true;
                            break;
                        }
                        else
                            ClearAStarGreadyWhenListsAreEmpy(2, i);

                    }
                }
            }
            if (!Is)
            {
                //hourse
                for (int i = 0; i < HourseHight; i++)
                {
                    if (HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse != null)
                    {
                        if (HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count > 0)
                        {
                            Is = true;
                            break;
                        }
                        else
                            ClearAStarGreadyWhenListsAreEmpy(3, i);

                    }
                }
            }
            if (!Is)
            {
                //Castle
                for (int i = 0; i < CastleHigh; i++)
                {
                    if (CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle != null)
                    {
                        if (CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count > 0)
                        {
                            Is = true;
                            break;
                        }
                        else
                            ClearAStarGreadyWhenListsAreEmpy(4, i);

                    }
                }
            }
            if (!Is)
            {
                //minister
                for (int i = 0; i < MinisterHigh; i++)
                {
                    if (MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister != null)
                    {
                        if (MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count > 0)
                        {
                            Is = true;
                            break;
                        }
                        else
                            ClearAStarGreadyWhenListsAreEmpy(5, i);


                    }
                }
            }
            if (!Is)
            {
                //king
                for (int i = 0; i < KingHigh; i++)
                {
                    if (KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing != null)
                    {
                        if (KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count > 0)
                        {
                            Is = true;
                            break;
                        }
                        else
                            ClearAStarGreadyWhenListsAreEmpy(6, i);


                    }
                }
            }
            return Is;
        }
        //when there is index notified deeper computational node
        bool IsThereCalculatedAStarGreedyNode(int i)
        {
            bool Is = false;
            //soldier
            if (SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder != null)
            {
                if (SolderesOnTable[i].SoldierThinkingQuantum[0].TableListSolder.Count > 0)
                {
                    Is = true;

                }
                else
                    ClearAStarGreadyWhenListsAreEmpy(1, i);


            }
            if (!Is)
            {
                //elephant
                if (ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant != null)
                {
                    if (ElephantOnTable[i].ElefantThinkingQuantum[0].TableListElefant.Count > 0)
                    {
                        Is = true;

                    }
                    else
                        ClearAStarGreadyWhenListsAreEmpy(2, i);

                }

            }
            if (!Is)
            {
                //hourse
                if (HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse != null)
                {
                    if (HoursesOnTable[i].HourseThinkingQuantum[0].TableListHourse.Count > 0)
                    {
                        Is = true;

                    }
                    else
                        ClearAStarGreadyWhenListsAreEmpy(3, i);


                }

            }
            if (!Is)
            {
                //Castle
                if (CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle != null)
                {
                    if (CastlesOnTable[i].CastleThinkingQuantum[0].TableListCastle.Count > 0)
                    {
                        Is = true;

                    }
                    else
                        ClearAStarGreadyWhenListsAreEmpy(4, i);


                }

            }
            if (!Is)
            {
                //minister
                if (MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister != null)
                {
                    if (MinisterOnTable[i].MinisterThinkingQuantum[0].TableListMinister.Count > 0)
                    {
                        Is = true;

                    }
                    else
                        ClearAStarGreadyWhenListsAreEmpy(5, i);


                }

            }
            if (!Is)
            {
                //king
                if (KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].TableListKing != null)
                {
                    if (KingOnTable[i].KingThinkingQuantum[0].TableListKing.Count > 0)
                    {
                        Is = true;

                    }
                    else
                        ClearAStarGreadyWhenListsAreEmpy(6, i);


                }

            }
            return Is;
        }
        //when there is all deeper computational nodes return true else return false
        bool IsThereNotAllOfEmptyOrNonCalculatedAStarGreedyNode(int Order, int Kind, int i)
        {
            bool Is = true;
            //soldier
            if (Kind == 1)
            {
                if (SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null)
                {
                    for (int j = 0; j < SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; j++)
                        Is = Is && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].IsThereCalculatedAStarGreedyNode();
                }
            }
            else//elephant
                if (Kind == 2)
            {
                if (ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null)
                {
                    for (int j = 0; j < ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; j++)
                        Is = Is && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].IsThereCalculatedAStarGreedyNode();
                }
            }
            else//hourse
                if (Kind == 3)
            {
                if (HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null)
                {
                    for (int j = 0; j < HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; j++)
                        Is = Is && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].IsThereCalculatedAStarGreedyNode();

                }
            }
            else//Castle
                if (Kind == 4)
            {
                if (CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy != null)
                {
                    for (int j = 0; j < CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; j++)
                        Is = Is && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].IsThereCalculatedAStarGreedyNode();
                }
            }
            else//minister
                if (Kind == 5)
            {
                if (MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null)
                {
                    for (int j = 0; j < MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; j++)
                        Is = Is && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].IsThereCalculatedAStarGreedyNode();
                }
            }
            else//king
            if (Kind == 6)
            {
                if (KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null)
                {
                    for (int j = 0; j < KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; j++)
                        Is = Is && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].IsThereCalculatedAStarGreedyNode();
                }
            }
            return Is;
        }
        //when there is at leASt one non compuational deeper determined NON existence of deeper computational indexed deeper node 
        bool IsThereEmptyOrNonCalculatedAStarGreedyNode(int Order, int Kind, int i, int j)
        {
            bool Is = false;

            if (!IsThereNotAllOfEmptyOrNonCalculatedAStarGreedyNode(Order, Kind, i))
            {
                //soldier
                if (Kind == 1)
                {
                    if (SolderesOnTable != null && SolderesOnTable[i] != null && SolderesOnTable[i].SoldierThinkingQuantum != null && SolderesOnTable[i].SoldierThinkingQuantum[0] != null && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy != null && SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count > j)
                        Is = SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].IsThereCalculatedAStarGreedyNode();
                }
                else//elephant
                    if (Kind == 2)
                {
                    if (ElephantOnTable != null && ElephantOnTable[i] != null && ElephantOnTable[i].ElefantThinkingQuantum != null && ElephantOnTable[i].ElefantThinkingQuantum[0] != null && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy != null && ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count > j)
                        Is = ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].IsThereCalculatedAStarGreedyNode();
                }
                else//hourse
                    if (Kind == 3)
                {
                    if (HoursesOnTable != null && HoursesOnTable[i] != null && HoursesOnTable[i].HourseThinkingQuantum != null && HoursesOnTable[i].HourseThinkingQuantum[0] != null && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy != null && HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count > j)
                        Is = HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].IsThereCalculatedAStarGreedyNode();

                }
                else//Castle
                    if (Kind == 4)
                {
                    if (CastlesOnTable != null && CastlesOnTable[i] != null && CastlesOnTable[i].CastleThinkingQuantum != null && CastlesOnTable[i].CastleThinkingQuantum[0] != null && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy != null && CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count > j)
                        Is = CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].IsThereCalculatedAStarGreedyNode();

                }
                else//minister
                    if (Kind == 5)
                {
                    if (MinisterOnTable != null && MinisterOnTable[i] != null && MinisterOnTable[i].MinisterThinkingQuantum != null && MinisterOnTable[i].MinisterThinkingQuantum[0] != null && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy != null && MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count > j)
                        Is = MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].IsThereCalculatedAStarGreedyNode();

                }
                else//king
                if (Kind == 6)
                {
                    if (KingOnTable != null && KingOnTable[i] != null && KingOnTable[i].KingThinkingQuantum != null && KingOnTable[i].KingThinkingQuantum[0] != null && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy != null && KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count > j)
                        Is = KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].IsThereCalculatedAStarGreedyNode();

                }
            }
            return (!Is);
        }
        //blitz for determination about best movment of every objects
        void BlitzGameThinkingQuantumTreeSolderGray(ref int PreviousLessS, ref int[] Index, ref int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //Soldeir
            for (ik = 0; ik < SodierMidle; ik++)
            {
                if (SolderesOnTable == null || SolderesOnTable[ik] == null || SolderesOnTable[ik].SoldierThinkingQuantum == null || SolderesOnTable[ik].SoldierThinkingQuantum[0] == null || SolderesOnTable[ik].SoldierThinkingQuantum[0].HeuristicListSolder == null
                    )
                    continue;
                //when there is computational lists
                for (j = 0; j < SolderesOnTable[ik].SoldierThinkingQuantum[0].HeuristicListSolder.Count; j++)
                {
                    //when node is serving node continue
                    if (SolderesOnTable[ik].SoldierThinkingQuantum[0].IsSupHu[j]
                      )
                        continue;

                    Object O = new Object();
                    lock (O)
                    {
                        //when node is empty deeper and there is not computatiional node continue
                        if (!IsThereEmptyOrNonCalculatedAStarGreedyNode(Order, 1, ik, j))
                            continue;
                        //when node have kings dangoures ignore and continue.
                        if (CheckeHuristci(SolderesOnTable[ik].SoldierThinkingQuantum[0].TableListSolder[j], Order, ik, j, 0))
                            continue;
                        //when is self
                        if (AllDraw.OrderPlate == Order)
                        {
                            //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                            if (SolderesOnTable[ik].SoldierThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) < PreviousLessS || (SolderesOnTable[ik].SoldierThinkingQuantum[0].PenaltyRegardListSolder[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))
                            {

                            }

                            else
                            {
                                PreviousLessS = SolderesOnTable[ik].SoldierThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                                Index[0] = ik;
                                jIndex[0] = j;
                            }
                        }
                        else
                        {
                            //when in learning autamata is penalty or Heuristic specified is greater than specific dynamic programming var
                            if (SolderesOnTable[ik].SoldierThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) > PreviousLessS || (SolderesOnTable[ik].SoldierThinkingQuantum[0].PenaltyRegardListSolder[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))
                            {

                            }

                            else
                            {
                                PreviousLessS = SolderesOnTable[ik].SoldierThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                                Index[0] = ik;
                                jIndex[0] = j;
                            }
                        }

                    }
                }

                //Elephant
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameThinkingQuantumTreeSolderGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //blitz for determination about best movment of every objects
        void BlitzGameThinkingQuantumTreeElephantGray(ref int PreviousLessE, ref int[] Index, ref int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //Elephant
            for (ik = 0; ik < ElefantMidle; ik++)
            {
                if (ElephantOnTable == null || ElephantOnTable[ik] == null || ElephantOnTable[ik].ElefantThinkingQuantum == null || ElephantOnTable[ik].ElefantThinkingQuantum[0] == null || ElephantOnTable[ik].ElefantThinkingQuantum[0].HeuristicListElefant == null
                    )
                    continue;
                //when there is computational lists
                for (j = 0; j < ElephantOnTable[ik].ElefantThinkingQuantum[0].HeuristicListElefant.Count; j++)
                {
                    //when node is serving node continue
                    if (ElephantOnTable[ik].ElefantThinkingQuantum[0].IsSupHu[j]
               )
                        continue;
                    Object O = new Object();
                    lock (O)
                    {
                        //when node is empty deeper and there is not computatiional node continue
                        if (!IsThereEmptyOrNonCalculatedAStarGreedyNode(Order, 2, ik, j))
                            continue;

                        //when node have kings dangoures ignore and continue.
                        if (CheckeHuristci(ElephantOnTable[ik].ElefantThinkingQuantum[0].TableListElefant[j], Order, ik, j, 0))
                            continue;


                        //when is self
                        if (AllDraw.OrderPlate == Order)
                        {
                            //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                            if (ElephantOnTable[ik].ElefantThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) < PreviousLessE || (ElephantOnTable[ik].ElefantThinkingQuantum[0].PenaltyRegardListElefant[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))
                            {
                            }

                            else
                            {
                                PreviousLessE = ElephantOnTable[ik].ElefantThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                                Index[1] = ik;
                                jIndex[1] = j;
                            }
                        }
                        else
                        {
                            //when in learning autamata is penalty or Heuristic specified is greater than specific dynamic programming var
                            if (ElephantOnTable[ik].ElefantThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) > PreviousLessE || (ElephantOnTable[ik].ElefantThinkingQuantum[0].PenaltyRegardListElefant[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))
                            {
                            }

                            else
                            {
                                PreviousLessE = ElephantOnTable[ik].ElefantThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                                Index[1] = ik;
                                jIndex[1] = j;
                            }
                        }

                    }
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameThinkingQuantumTreeElephantGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //blitz for determination about best movment of every objects
        void BlitzGameThinkingQuantumTreeHourseGray(ref int PreviousLessH, ref int[] Index, ref int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //Hourse.
            for (ik = 0; ik < HourseMidle; ik++)
            {
                if (HoursesOnTable == null || HoursesOnTable[ik] == null || HoursesOnTable[ik].HourseThinkingQuantum == null || HoursesOnTable[ik].HourseThinkingQuantum[0] == null || HoursesOnTable[ik].HourseThinkingQuantum[0].HeuristicListHourse == null
                    )
                    continue;
                //when there is computational lists
                for (j = 0; j < HoursesOnTable[ik].HourseThinkingQuantum[0].HeuristicListHourse.Count; j++)
                {
                    //when node is serving node continue
                    if (HoursesOnTable[ik].HourseThinkingQuantum[0].IsSupHu[j]
                  )
                        continue;
                    Object O = new Object();
                    lock (O)
                    {
                        //when node is empty deeper and there is not computatiional node continue
                        if (!IsThereEmptyOrNonCalculatedAStarGreedyNode(Order, 3, ik, j))
                            continue;

                        //when node have kings dangoures ignore and continue.
                        if (CheckeHuristci(HoursesOnTable[ik].HourseThinkingQuantum[0].TableListHourse[j], Order, ik, j, 0))
                            continue;

                        //when is self
                        if (AllDraw.OrderPlate == Order)
                        {
                            //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                            if (HoursesOnTable[ik].HourseThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) < PreviousLessH || (HoursesOnTable[ik].HourseThinkingQuantum[0].PenaltyRegardListHourse[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))
                            {
                            }

                            else
                            {
                                PreviousLessH = HoursesOnTable[ik].HourseThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                                Index[2] = ik;
                                jIndex[2] = j;
                            }
                        }
                        else
                        {

                            //when in learning autamata is penalty or Heuristic specified is greater than specific dynamic programming var
                            if (HoursesOnTable[ik].HourseThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) > PreviousLessH || (HoursesOnTable[ik].HourseThinkingQuantum[0].PenaltyRegardListHourse[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))
                            {
                            }

                            else
                            {
                                PreviousLessH = HoursesOnTable[ik].HourseThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                                Index[2] = ik;
                                jIndex[2] = j;
                            }
                        }

                    }
                }

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameThinkingQuantumTreeHourseGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //blitz for determination about best movment of every objects
        void BlitzGameThinkingQuantumTreeCastleGray(ref int PreviousLessB, ref int[] Index, ref int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //Castle.
            for (ik = 0; ik < CastleMidle; ik++)
            {
                if (CastlesOnTable == null || CastlesOnTable[ik] == null || CastlesOnTable[ik].CastleThinkingQuantum == null || CastlesOnTable[ik].CastleThinkingQuantum[0] == null || CastlesOnTable[ik].CastleThinkingQuantum[0].HeuristicListCastle == null
                    )
                    continue;
                //when there is computational lists
                for (j = 0; j < CastlesOnTable[ik].CastleThinkingQuantum[0].HeuristicListCastle.Count; j++)
                {
                    //when node is serving node continue
                    if (CastlesOnTable[ik].CastleThinkingQuantum[0].IsSupHu[j]
                 )
                        continue;
                    Object O = new Object();
                    lock (O)
                    {
                        //when node is empty deeper and there is not computatiional node continue
                        if (!IsThereEmptyOrNonCalculatedAStarGreedyNode(Order, 4, ik, j))
                            continue;

                        //when node have kings dangoures ignore and continue.
                        if (CheckeHuristci(CastlesOnTable[ik].CastleThinkingQuantum[0].TableListCastle[j], Order, ik, j, 0))
                            continue;

                        //when is self
                        if (AllDraw.OrderPlate == Order)
                        {
                            //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                            if (CastlesOnTable[ik].CastleThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) < PreviousLessB || (CastlesOnTable[ik].CastleThinkingQuantum[0].PenaltyRegardListCastle[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))
                            {
                            }

                            else
                            {
                                PreviousLessB = CastlesOnTable[ik].CastleThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                                Index[3] = ik;
                                jIndex[3] = j;
                            }
                        }
                        else
                        {
                            //when in learning autamata is penalty or Heuristic specified is greater than specific dynamic programming var
                            if (CastlesOnTable[ik].CastleThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) > PreviousLessB || (CastlesOnTable[ik].CastleThinkingQuantum[0].PenaltyRegardListCastle[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))
                            {

                            }

                            else
                            {
                                PreviousLessB = CastlesOnTable[ik].CastleThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                                Index[3] = ik;
                                jIndex[3] = j;
                            }
                        }
                    }
                }

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameThinkingQuantumTreeCastleGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //blitz for determination about best movment of every objects
        void BlitzGameThinkingQuantumTreeMinisterGray(ref int PreviousLessM, ref int[] Index, ref int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //Minister.
            for (ik = 0; ik < MinisterMidle; ik++)
            {
                if (MinisterOnTable == null || MinisterOnTable[ik] == null || MinisterOnTable[ik].MinisterThinkingQuantum == null || MinisterOnTable[ik].MinisterThinkingQuantum[0] == null || MinisterOnTable[ik].MinisterThinkingQuantum[0].HeuristicListMinister == null
                    )
                    continue;
                //when there is computational lists
                for (j = 0; j < MinisterOnTable[ik].MinisterThinkingQuantum[0].HeuristicListMinister.Count; j++)
                {
                    //when node is serving node continue
                    if (MinisterOnTable[ik].MinisterThinkingQuantum[0].IsSupHu[j]
                      )
                        continue;

                    //when node is empty deeper and there is not computatiional node continue
                    if (!IsThereEmptyOrNonCalculatedAStarGreedyNode(Order, 5, ik, j))
                        continue;


                    //when node have kings dangoures ignore and continue.
                    if (CheckeHuristci(MinisterOnTable[ik].MinisterThinkingQuantum[0].TableListMinister[j], Order, ik, j, 0))
                        continue;


                    Object O = new Object();
                    lock (O)
                    {

                        //when is self
                        if (AllDraw.OrderPlate == Order)
                        {
                            //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                            if (MinisterOnTable[ik].MinisterThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) < PreviousLessM || (MinisterOnTable[ik].MinisterThinkingQuantum[0].PenaltyRegardListMinister[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))
                            {
                            }

                            else
                            {
                                Index[4] = ik;
                                jIndex[4] = j;
                                PreviousLessM = MinisterOnTable[ik].MinisterThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                            }
                        }
                        else
                        {
                            //when in learning autamata is penalty or Heuristic specified is greater than specific dynamic programming var
                            if (MinisterOnTable[ik].MinisterThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) > PreviousLessM || (MinisterOnTable[ik].MinisterThinkingQuantum[0].PenaltyRegardListMinister[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))
                            {
                            }

                            else
                            {
                                Index[4] = ik;
                                jIndex[4] = j;
                                PreviousLessM = MinisterOnTable[ik].MinisterThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                            }
                        }

                    }
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameThinkingQuantumTreeMinisterGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //blitz for determination about best movment of every objects
        void BlitzGameThinkingQuantumTreeKingGray(ref int PreviousLessK, ref int[] Index, ref int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //King.
            for (ik = 0; ik < KingMidle; ik++)
            {
                if (KingOnTable == null || KingOnTable[ik] == null || KingOnTable[ik].KingThinkingQuantum == null || KingOnTable[ik].KingThinkingQuantum[0] == null || KingOnTable[ik].KingThinkingQuantum[0].HeuristicListKing == null
                    )
                    continue;
                //when there is computational lists
                for (j = 0; j < KingOnTable[ik].KingThinkingQuantum[0].HeuristicListKing.Count; j++)
                {
                    //when node is serving node continue
                    if (KingOnTable[ik].KingThinkingQuantum[0].IsSupHu[j]
                      )
                        continue;

                    Object O = new Object();
                    lock (O)
                    {
                        //when node is empty deeper and there is not computatiional node continue
                        if (!IsThereEmptyOrNonCalculatedAStarGreedyNode(Order, 6, ik, j))
                            continue;

                        //when node have kings dangoures ignore and continue.
                        if (CheckeHuristci(KingOnTable[ik].KingThinkingQuantum[0].TableListKing[j], Order, ik, j, 0))
                            continue;

                        //when is self
                        if (AllDraw.OrderPlate == Order)
                        {
                            //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                            if (KingOnTable[ik].KingThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) < PreviousLessK || (KingOnTable[ik].KingThinkingQuantum[0].PenaltyRegardListKing[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))
                            {
                            }

                            else
                            {
                                Index[5] = ik;
                                jIndex[5] = j;
                                PreviousLessK = KingOnTable[ik].KingThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                            }
                        }
                        else
                        {
                            //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                            if (KingOnTable[ik].KingThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) > PreviousLessK || (KingOnTable[ik].KingThinkingQuantum[0].PenaltyRegardListKing[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))
                            {
                            }

                            else
                            {
                                Index[5] = ik;
                                jIndex[5] = j;
                                PreviousLessK = KingOnTable[ik].KingThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                            }
                        }

                    }
                }

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameThinkingQuantumTreeKingGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //blitz for determination about best movment of every objects
        void BlitzGameTreeCreationThinkingQuantumTreeSolder(Color a, int[] Index, int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            List<Task> tHA = new List<Task>();
            Object O1 = new Object();
            lock (O1)
            {

                //when do permite
                if (Index[0] != -1)
                {
                    if (SolderesOnTable[Index[0]].SoldierThinkingQuantum[0].AStarGreedy.Count == 0)
                        SolderesOnTable[Index[0]].SoldierThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    SolderesOnTable[Index[0]].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[Index[0]].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    SolderesOnTable[Index[0]].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[Index[0]].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(SolderesOnTable[Index[0]].SoldierThinkingQuantum[0].TableListSolder[jIndex[0]]);
                    SolderesOnTable[Index[0]].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[Index[0]].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    SolderesOnTable[Index[0]].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[Index[0]].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, SolderesOnTable[Index[0]].SoldierThinkingQuantum[0].RowColumnSoldier[jIndex[0]][0], SolderesOnTable[Index[0]].SoldierThinkingQuantum[0].RowColumnSoldier[jIndex[0]][1], a, SolderesOnTable[Index[0]].SoldierThinkingQuantum[0].TableListSolder[jIndex[0]], Order, false, FOUND, LeafAStarGreedy);

                }
            }

            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameTreeCreationThinkingQuantumTreeSolder:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //blitz for determination about best movment of every objects
        void BlitzGameTreeCreationThinkingQuantumTreeElephant(Color a, int[] Index, int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            List<Task> tHA = new List<Task>();
            Object O1 = new Object();
            lock (O1)
            {
                //when do permite
                if (Index[1] != -1)
                {
                    if (ElephantOnTable[Index[1]].ElefantThinkingQuantum[0].AStarGreedy.Count == 0)
                        ElephantOnTable[Index[1]].ElefantThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    ElephantOnTable[Index[1]].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[Index[1]].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    ElephantOnTable[Index[1]].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[Index[1]].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(ElephantOnTable[Index[1]].ElefantThinkingQuantum[0].TableListElefant[jIndex[1]]);
                    ElephantOnTable[Index[1]].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[Index[1]].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    ElephantOnTable[Index[1]].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[Index[1]].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, ElephantOnTable[Index[1]].ElefantThinkingQuantum[0].RowColumnElefant[jIndex[1]][0], ElephantOnTable[Index[1]].ElefantThinkingQuantum[0].RowColumnElefant[jIndex[1]][1], a, ElephantOnTable[Index[1]].ElefantThinkingQuantum[0].TableListElefant[jIndex[1]], Order, false, FOUND, LeafAStarGreedy);

                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameTreeCreationThinkingQuantumTreeElephant:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //blitz for determination about best movment of every objects
        void BlitzGameTreeCreationThinkingQuantumTreeHourse(Color a, int[] Index, int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            List<Task> tHA = new List<Task>();
            Object O1 = new Object();
            lock (O1)
            {
                //when do permite
                if (Index[2] != -1)
                {
                    if (HoursesOnTable[Index[2]].HourseThinkingQuantum[0].AStarGreedy.Count == 0)
                        HoursesOnTable[Index[2]].HourseThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    HoursesOnTable[Index[2]].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[Index[2]].HourseThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    HoursesOnTable[Index[2]].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[Index[2]].HourseThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(HoursesOnTable[Index[2]].HourseThinkingQuantum[0].TableListHourse[jIndex[2]]);
                    HoursesOnTable[Index[2]].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[Index[2]].HourseThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    HoursesOnTable[Index[2]].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[Index[2]].HourseThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, HoursesOnTable[Index[2]].HourseThinkingQuantum[0].RowColumnHourse[jIndex[2]][0], HoursesOnTable[Index[2]].HourseThinkingQuantum[0].RowColumnHourse[jIndex[2]][1], a, HoursesOnTable[Index[2]].HourseThinkingQuantum[0].TableListHourse[jIndex[2]], Order, false, FOUND, LeafAStarGreedy);

                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameTreeCreationThinkingQuantumTreeHourse:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //blitz for determination about best movment of every objects
        void BlitzGameTreeCreationThinkingQuantumTreeCastle(Color a, int[] Index, int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            List<Task> tHA = new List<Task>();
            Object O1 = new Object();
            lock (O1)
            {
                //when do permite
                if (Index[3] != -1)
                {
                    if (CastlesOnTable[Index[3]].CastleThinkingQuantum[0].AStarGreedy.Count == 0)
                        CastlesOnTable[Index[3]].CastleThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    CastlesOnTable[Index[3]].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[Index[3]].CastleThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    CastlesOnTable[Index[3]].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[Index[3]].CastleThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(CastlesOnTable[Index[3]].CastleThinkingQuantum[0].TableListCastle[jIndex[3]]);
                    CastlesOnTable[Index[3]].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[Index[3]].CastleThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    CastlesOnTable[Index[3]].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[Index[3]].CastleThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, CastlesOnTable[Index[3]].CastleThinkingQuantum[0].RowColumnCastle[jIndex[3]][0], CastlesOnTable[Index[3]].CastleThinkingQuantum[0].RowColumnCastle[jIndex[3]][1], a, CastlesOnTable[Index[3]].CastleThinkingQuantum[0].TableListCastle[jIndex[3]], Order, false, FOUND, LeafAStarGreedy);

                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameTreeCreationThinkingQuantumTreeCastle:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //blitz for determination about best movment of every objects
        void BlitzGameTreeCreationThinkingQuantumTreeMinister(Color a, int[] Index, int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            List<Task> tHA = new List<Task>();
            Object O1 = new Object();
            lock (O1)
            {
                //when do permite
                if (Index[4] != -1)
                {
                    if (MinisterOnTable[Index[4]].MinisterThinkingQuantum[0].AStarGreedy.Count == 0)
                        MinisterOnTable[Index[4]].MinisterThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    MinisterOnTable[Index[4]].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[Index[4]].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    MinisterOnTable[Index[4]].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[Index[4]].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(MinisterOnTable[Index[4]].MinisterThinkingQuantum[0].TableListMinister[jIndex[4]]);
                    MinisterOnTable[Index[4]].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[Index[4]].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    MinisterOnTable[Index[4]].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[Index[4]].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, MinisterOnTable[Index[4]].MinisterThinkingQuantum[0].RowColumnMinister[jIndex[4]][0], MinisterOnTable[Index[4]].MinisterThinkingQuantum[0].RowColumnMinister[jIndex[4]][1], a, MinisterOnTable[Index[4]].MinisterThinkingQuantum[0].TableListMinister[jIndex[4]], Order, false, FOUND, LeafAStarGreedy);

                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameTreeCreationThinkingQuantumTreeMinister:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //blitz for determination about best movment of every objects
        void BlitzGameTreeCreationThinkingQuantumTreeKing(Color a, int[] Index, int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O1 = new Object();
            lock (O1)
            {
                //when do permite
                if (Index[5] != -1)
                {
                    if (KingOnTable[Index[5]].KingThinkingQuantum[0].AStarGreedy.Count == 0)
                        KingOnTable[Index[5]].KingThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    KingOnTable[Index[5]].KingThinkingQuantum[0].AStarGreedy[KingOnTable[Index[5]].KingThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    KingOnTable[Index[5]].KingThinkingQuantum[0].AStarGreedy[KingOnTable[Index[5]].KingThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(KingOnTable[Index[5]].KingThinkingQuantum[0].TableListKing[jIndex[5]]);
                    KingOnTable[Index[5]].KingThinkingQuantum[0].AStarGreedy[KingOnTable[Index[5]].KingThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    KingOnTable[Index[5]].KingThinkingQuantum[0].AStarGreedy[KingOnTable[Index[5]].KingThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, KingOnTable[Index[5]].KingThinkingQuantum[0].RowColumnKing[jIndex[5]][0], KingOnTable[Index[5]].KingThinkingQuantum[0].RowColumnKing[jIndex[5]][1], a, KingOnTable[Index[5]].KingThinkingQuantum[0].TableListKing[jIndex[5]], Order, false, FOUND, LeafAStarGreedy);

                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameTreeCreationThinkingQuantumTreeKing:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //blitz for determination about best movment of every objects
        void BlitzGameThinkingQuantumTreeSolderBrown(ref int PreviousLessS, ref int[] Index, ref int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            for (ik = SodierMidle; ik < SodierHigh; ik++)
            {
                if (SolderesOnTable == null || SolderesOnTable[ik] == null || SolderesOnTable[ik].SoldierThinkingQuantum == null || SolderesOnTable[ik].SoldierThinkingQuantum[0] == null || SolderesOnTable[ik].SoldierThinkingQuantum[0].HeuristicListSolder == null
                    )
                    continue;
                //Soldier.
                //when there is computational lists
                for (j = 0; j < SolderesOnTable[ik].SoldierThinkingQuantum[0].HeuristicListSolder.Count; j++)
                {
                    //when node is empty deeper and there is not computatiional node continue
                    if (!IsThereEmptyOrNonCalculatedAStarGreedyNode(Order, 1, ik, j))
                        continue;

                    //when node is serving node continue
                    if (SolderesOnTable[ik].SoldierThinkingQuantum[0].IsSupHu[j]
                   )
                        continue;

                    //when node have kings dangoures ignore and continue.
                    if (CheckeHuristci(SolderesOnTable[ik].SoldierThinkingQuantum[0].TableListSolder[j], Order, ik, j, 0))
                        continue;


                    //when is self
                    if (AllDraw.OrderPlate == Order)
                    {

                        //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                        if (SolderesOnTable[ik].SoldierThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) < PreviousLessS || (SolderesOnTable[ik].SoldierThinkingQuantum[0].PenaltyRegardListSolder[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))
                        {
                        }

                        else
                        {
                            Index[0] = ik;
                            jIndex[0] = j;
                            PreviousLessS = SolderesOnTable[ik].SoldierThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                        }
                    }
                    else
                    {
                        //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                        if (SolderesOnTable[ik].SoldierThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) > PreviousLessS || (SolderesOnTable[ik].SoldierThinkingQuantum[0].PenaltyRegardListSolder[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))
                        {
                        }

                        else
                        {
                            Index[0] = ik;
                            jIndex[0] = j;
                            PreviousLessS = SolderesOnTable[ik].SoldierThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                        }
                    }
                }

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameThinkingQuantumTreeSolderBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //blitz for determination about best movment of every objects
        void BlitzGameThinkingQuantumTreeElephantBrown(ref int PreviousLessE, ref int[] Index, ref int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //Elephant
            for (ik = ElefantMidle; ik < ElefantHigh; ik++)
            {
                if (ElephantOnTable == null || ElephantOnTable[ik] == null || ElephantOnTable[ik].ElefantThinkingQuantum == null || ElephantOnTable[ik].ElefantThinkingQuantum[0] == null || ElephantOnTable[ik].ElefantThinkingQuantum[0].HeuristicListElefant == null
                    )
                    continue;
                //when there is computational lists
                for (j = 0; j < ElephantOnTable[ik].ElefantThinkingQuantum[0].HeuristicListElefant.Count; j++)
                {
                    //when node is empty deeper and there is not computatiional node continue
                    if (!IsThereEmptyOrNonCalculatedAStarGreedyNode(Order, 2, ik, j))
                        continue;

                    //when node is serving node continue
                    if (ElephantOnTable[ik].ElefantThinkingQuantum[0].IsSupHu[j]
                 )
                        continue;

                    //when node have kings dangoures ignore and continue.
                    if (CheckeHuristci(ElephantOnTable[ik].ElefantThinkingQuantum[0].TableListElefant[j], Order, ik, j, 0))
                        continue;

                    //when is self
                    if (AllDraw.OrderPlate == Order)
                    {

                        //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                        if (ElephantOnTable[ik].ElefantThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) < PreviousLessE || (ElephantOnTable[ik].ElefantThinkingQuantum[0].PenaltyRegardListElefant[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))

                        {
                        }

                        else
                        {
                            Index[1] = ik;
                            jIndex[1] = j;
                            PreviousLessE = ElephantOnTable[ik].ElefantThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                        }
                    }
                    else
                    {
                        //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                        if (ElephantOnTable[ik].ElefantThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) > PreviousLessE || (ElephantOnTable[ik].ElefantThinkingQuantum[0].PenaltyRegardListElefant[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))

                        {
                        }

                        else
                        {
                            Index[1] = ik;
                            jIndex[1] = j;
                            PreviousLessE = ElephantOnTable[ik].ElefantThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                        }
                    }


                }

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameThinkingQuantumTreeElephantBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //blitz for determination about best movment of every objects
        void BlitzGameThinkingQuantumTreeHourseBrown(ref int PreviousLessH, ref int[] Index, ref int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //Hourse.
            for (ik = HourseMidle; ik < HourseHight; ik++)
            {
                if (HoursesOnTable == null || HoursesOnTable[ik] == null || HoursesOnTable[ik].HourseThinkingQuantum == null || HoursesOnTable[ik].HourseThinkingQuantum[0] == null || HoursesOnTable[ik].HourseThinkingQuantum[0].HeuristicListHourse == null
                    )
                    continue;
                //when there is computational lists
                for (j = 0; j < HoursesOnTable[ik].HourseThinkingQuantum[0].HeuristicListHourse.Count; j++)
                {
                    //when node is empty deeper and there is not computatiional node continue
                    if (!IsThereEmptyOrNonCalculatedAStarGreedyNode(Order, 3, ik, j))
                        continue;

                    //when node is serving node continue
                    if (HoursesOnTable[ik].HourseThinkingQuantum[0].IsSupHu[j]
                    )
                        continue;
                    //when node have kings dangoures ignore and continue.
                    if (CheckeHuristci(HoursesOnTable[ik].HourseThinkingQuantum[0].TableListHourse[j], Order, ik, j, 0))
                        continue;

                    //when is self
                    if (AllDraw.OrderPlate == Order)
                    {

                        //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                        if (HoursesOnTable[ik].HourseThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) < PreviousLessH || (HoursesOnTable[ik].HourseThinkingQuantum[0].PenaltyRegardListHourse[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))

                        {
                        }

                        else
                        {
                            Index[2] = ik;
                            jIndex[2] = j;
                            PreviousLessH = HoursesOnTable[ik].HourseThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                        }

                    }
                    else
                    {
                        //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                        if (HoursesOnTable[ik].HourseThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) > PreviousLessH || (HoursesOnTable[ik].HourseThinkingQuantum[0].PenaltyRegardListHourse[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))

                        {
                        }

                        else
                        {
                            Index[2] = ik;
                            jIndex[2] = j;
                            PreviousLessH = HoursesOnTable[ik].HourseThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                        }
                    }

                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameThinkingQuantumTreeHourseBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //main blitz for determination about best movment of every objects
        public int FullGameMakimgBlitz(ref int[] Index, ref int[] jIndex, int Order, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            int Kind = -1;
            int PS = Int32.MinValue, PE = Int32.MinValue, PH = Int32.MinValue, PB = Int32.MinValue, PM = Int32.MinValue, PK = Int32.MinValue;
            if (Order != AllDraw.OrderPlate)
            {
                PS = Int32.MaxValue;
                PE = Int32.MaxValue;
                PH = Int32.MaxValue;
                PB = Int32.MaxValue;
                PM = Int32.MaxValue;
                PK = Int32.MaxValue;

            }

            int[] index = { -1, -1, -1, -1, -1, -1 };
            int[] jindex = { -1, -1, -1, -1, -1, -1 };
            if (Order == 1)
            {
                Object O = new Object();
                lock (O)
                {
                    BlitzGameThinkingQuantumTreeSolderGray(ref PS, ref index, ref jindex, Order, 0, 0, 0, false, LeafAStarGreedy);
                    BlitzGameThinkingQuantumTreeElephantGray(ref PE, ref index, ref jindex, Order, 0, 0, 0, false, LeafAStarGreedy);
                    BlitzGameThinkingQuantumTreeHourseGray(ref PH, ref index, ref jindex, Order, 0, 0, 0, false, LeafAStarGreedy);
                    BlitzGameThinkingQuantumTreeCastleGray(ref PB, ref index, ref jindex, Order, 0, 0, 0, false, LeafAStarGreedy);
                    BlitzGameThinkingQuantumTreeMinisterGray(ref PM, ref index, ref jindex, Order, 0, 0, 0, false, LeafAStarGreedy);
                    BlitzGameThinkingQuantumTreeKingGray(ref PK, ref index, ref jindex, Order, 0, 0, 0, false, LeafAStarGreedy);
                }

            }
            else
            {
                Object O = new Object();
                lock (O)
                {
                    BlitzGameThinkingQuantumTreeSolderBrown(ref PS, ref index, ref jindex, Order, 0, 0, 0, false, LeafAStarGreedy);
                    BlitzGameThinkingQuantumTreeElephantBrown(ref PE, ref index, ref jindex, Order, 0, 0, 0, false, LeafAStarGreedy);
                    BlitzGameThinkingQuantumTreeHourseBrown(ref PH, ref index, ref jindex, Order, 0, 0, 0, false, LeafAStarGreedy);
                    BlitzGameThinkingQuantumTreeCastleBrown(ref PB, ref index, ref jindex, Order, 0, 0, 0, false, LeafAStarGreedy);
                    BlitzGameThinkingQuantumTreeMinisterBrown(ref PM, ref index, ref jindex, Order, 0, 0, 0, false, LeafAStarGreedy);
                    BlitzGameThinkingQuantumTreeKingBrown(ref PK, ref index, ref jindex, Order, 0, 0, 0, false, LeafAStarGreedy);
                }
            }
            int JI = -1;
            Object O1 = new Object();
            lock (O1)
            {

                if (Order == OrderPlate)
                    JI = MaxOfSixHeuristic(PS, PE, PH, PB, PM, PK);
                else
                    JI = MinOfSixHeuristic(PS, PE, PH, PB, PM, PK);
            }
            if (JI != -1)
            {
                Kind = JI;
                for (var i = 0; i < 6; i++)
                {
                    Object O = new Object();
                    lock (O)
                    {
                        Index[i] = index[i];
                        jIndex[i] = jindex[i];
                    }
                }

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameMakimgBlitz:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return System.Math.Abs(Kind);
        }
        //blitz for determination about best movment of every objects
        void BlitzGameThinkingQuantumTreeCastleBrown(ref int PreviousLessB, ref int[] Index, ref int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //Castles.
            for (ik = CastleMidle; ik < CastleHigh; ik++)
            {
                if (CastlesOnTable == null || CastlesOnTable[ik] == null || CastlesOnTable[ik].CastleThinkingQuantum == null || CastlesOnTable[ik].CastleThinkingQuantum[0] == null || CastlesOnTable[ik].CastleThinkingQuantum[0].HeuristicListCastle == null
                    )
                    continue;
                //when there is computational lists
                for (j = 0; j < CastlesOnTable[ik].CastleThinkingQuantum[0].HeuristicListCastle.Count; j++)
                {
                    //when node is empty deeper and there is not computatiional node continue
                    if (!IsThereEmptyOrNonCalculatedAStarGreedyNode(Order, 4, ik, j))
                        continue;

                    //when node is serving node continue
                    if (CastlesOnTable[ik].CastleThinkingQuantum[0].IsSupHu[j]
                    )
                        continue;

                    //when node have kings dangoures ignore and continue.
                    if (CheckeHuristci(CastlesOnTable[ik].CastleThinkingQuantum[0].TableListCastle[j], Order, ik, j, 0))
                        continue;


                    //when is self
                    if (AllDraw.OrderPlate == Order)
                    {

                        //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                        if (CastlesOnTable[ik].CastleThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) < PreviousLessB || (CastlesOnTable[ik].CastleThinkingQuantum[0].PenaltyRegardListCastle[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))

                        {
                        }


                        else
                        {
                            Index[3] = ik;
                            jIndex[3] = j;
                            PreviousLessB = CastlesOnTable[ik].CastleThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                        }

                    }
                    else
                    {
                        //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                        if (CastlesOnTable[ik].CastleThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) > PreviousLessB || (CastlesOnTable[ik].CastleThinkingQuantum[0].PenaltyRegardListCastle[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))

                        {

                        }


                        else
                        {
                            Index[3] = ik;
                            jIndex[3] = j;
                            PreviousLessB = CastlesOnTable[ik].CastleThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                        }
                    }

                }

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameThinkingQuantumTreeCastleBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //blitz for determination about best movment of every objects
        void BlitzGameThinkingQuantumTreeMinisterBrown(ref int PreviousLessM, ref int[] Index, ref int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //Minister.
            for (ik = MinisterMidle; ik < MinisterHigh; ik++)
            {
                if (MinisterOnTable == null || MinisterOnTable[ik] == null || MinisterOnTable[ik].MinisterThinkingQuantum == null || MinisterOnTable[ik].MinisterThinkingQuantum[0] == null || MinisterOnTable[ik].MinisterThinkingQuantum[0].HeuristicListMinister == null
                    )
                    continue;
                //when there is computational lists
                for (j = 0; j < MinisterOnTable[ik].MinisterThinkingQuantum[0].HeuristicListMinister.Count; j++)
                {
                    //when node is empty deeper and there is not computatiional node continue
                    if (!IsThereEmptyOrNonCalculatedAStarGreedyNode(Order, 5, ik, j))
                        continue;

                    //when node is serving node continue
                    if (MinisterOnTable[ik].MinisterThinkingQuantum[0].IsSupHu[j]
                      )
                        continue;

                    //when node have kings dangoures ignore and continue.
                    if (CheckeHuristci(MinisterOnTable[ik].MinisterThinkingQuantum[0].TableListMinister[j], Order, ik, j, 0))
                        continue;

                    //when is self
                    if (AllDraw.OrderPlate == Order)
                    {

                        //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                        if (MinisterOnTable[ik].MinisterThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) < PreviousLessM || (MinisterOnTable[ik].MinisterThinkingQuantum[0].PenaltyRegardListMinister[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))

                        {
                        }
                        else
                        //if (KingDan(MinisterOnTable[ik].MinisterThinkingQuantum[0].TableListMinister[j], Order))
                        {
                            Index[4] = ik;
                            jIndex[4] = j;
                            PreviousLessM = MinisterOnTable[ik].MinisterThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                        }
                    }
                    else
                    {
                        //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                        if (MinisterOnTable[ik].MinisterThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) > PreviousLessM || (MinisterOnTable[ik].MinisterThinkingQuantum[0].PenaltyRegardListMinister[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))
                        {
                        }
                        else
                        //if (KingDan(MinisterOnTable[ik].MinisterThinkingQuantum[0].TableListMinister[j], Order))
                        {
                            Index[4] = ik;
                            jIndex[4] = j;
                            PreviousLessM = MinisterOnTable[ik].MinisterThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                        }
                    }
                }

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameThinkingQuantumTreeMinisterBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //blitz for determination about best movment of every objects
        void BlitzGameThinkingQuantumTreeKingBrown(ref int PreviousLessK, ref int[] Index, ref int[] jIndex, int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //King.
            for (ik = KingMidle; ik < KingHigh; ik++)
            {
                if (KingOnTable == null || KingOnTable[ik] == null || KingOnTable[ik].KingThinkingQuantum == null || KingOnTable[ik].KingThinkingQuantum[0] == null || KingOnTable[ik].KingThinkingQuantum[0].HeuristicListKing == null
                    )
                    continue;
                //when there is computational lists
                for (j = 0; j < KingOnTable[ik].KingThinkingQuantum[0].HeuristicListKing.Count; j++)
                {
                    //when node is empty deeper and there is not computatiional node continue
                    if (!IsThereEmptyOrNonCalculatedAStarGreedyNode(Order, 6, ik, j))
                        continue;

                    //when node is serving node continue
                    if (KingOnTable[ik].KingThinkingQuantum[0].IsSupHu[j]
                     )
                        continue;

                    //when node have kings dangoures ignore and continue.
                    if (CheckeHuristci(KingOnTable[ik].KingThinkingQuantum[0].TableListKing[j], Order, ik, j, 0))
                        continue;

                    //when is self
                    if (AllDraw.OrderPlate == Order)
                    {

                        //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                        if (KingOnTable[ik].KingThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) < PreviousLessK || (KingOnTable[ik].KingThinkingQuantum[0].PenaltyRegardListKing[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))
                        {
                        }

                        else
                        {
                            Index[5] = ik;
                            jIndex[5] = j;
                            PreviousLessK = KingOnTable[ik].KingThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                        }
                    }
                    else
                    {
                        //when in learning autamata is penalty or Heuristic specified is less than specific dynamic programming var
                        if (KingOnTable[ik].KingThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled) > PreviousLessK || (KingOnTable[ik].KingThinkingQuantum[0].PenaltyRegardListKing[j].IsPenaltyAction() == 0 && UsePenaltyRegardMechnisamT))
                        {
                        }

                        else
                        {
                            Index[5] = ik;
                            jIndex[5] = j;
                            PreviousLessK = KingOnTable[ik].KingThinkingQuantum[0].ReturnHeuristic(ik, j, Order, false, ref HaveKilled);
                        }
                    }


                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameThinkingQuantumTreeKingBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }

        //blitz for determination about best movment of every objects
        void BlitzGameThinkingQuantumTree(int Order, int iAStarGreedy, int ik, int j, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //Initiatye Variables.
            int DummyOrder = Order;
            int DummyCurrentOrder = ChessRules.CurrentOrder;

            Color a;
            if (Order == 1)
                a = Color.Gray;
            else
                a = Color.Brown;
            //Order *= -1;
            //ChessRules.CurrentOrder *= -1;
            int[] Index = new int[6];

            int[] jIndex = new int[6];
            int PreviousLessS = Int32.MinValue, PreviousLessE = Int32.MinValue, PreviousLessH = Int32.MinValue, PreviousLessB = Int32.MinValue, PreviousLessM = Int32.MinValue, PreviousLessK = Int32.MinValue;
            if (Order != OrderPlate)
            {
                PreviousLessS = Int32.MaxValue;
                PreviousLessE = Int32.MaxValue;
                PreviousLessH = Int32.MaxValue;
                PreviousLessB = Int32.MaxValue;
                PreviousLessM = Int32.MaxValue;
                PreviousLessK = Int32.MaxValue;

            }
            //For Gray Order calculating foreach Objects Maximum total Heuristic Count Incl;usively.
            if (Order == 1)
            {
                Object O1 = new Object();
                lock (O1)
                {
                    Index[0] = -1;
                    BlitzGameThinkingQuantumTreeSolderGray(ref PreviousLessS, ref Index, ref jIndex, Order, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);
                    Index[1] = -1;
                    BlitzGameThinkingQuantumTreeElephantGray(ref PreviousLessE, ref Index, ref jIndex, Order, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);
                    Index[2] = -1;
                    BlitzGameThinkingQuantumTreeHourseGray(ref PreviousLessH, ref Index, ref jIndex, Order, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);
                    Index[3] = -1;
                    BlitzGameThinkingQuantumTreeCastleGray(ref PreviousLessB, ref Index, ref jIndex, Order, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);
                    Index[4] = -1;
                    BlitzGameThinkingQuantumTreeMinisterGray(ref PreviousLessM, ref Index, ref jIndex, Order, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);
                    Index[5] = -1;
                    BlitzGameThinkingQuantumTreeKingGray(ref PreviousLessK, ref Index, ref jIndex, Order, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);
                }
                int JI = -1;
                Object O2 = new Object();
                lock (O2)
                {

                    JI = MaxOfSixHeuristic(PreviousLessS, PreviousLessE, PreviousLessH, PreviousLessB, PreviousLessM, PreviousLessK);
                }

                Object O3 = new Object();
                lock (O3)
                {
                    if (JI != -1)
                    {
                        if (JI == 0)
                            BlitzGameTreeCreationThinkingQuantumTreeSolder(a, Index, jIndex, Order * -1, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);

                        //Initiatye Variables.
                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;


                        if (Order == 1)
                            a = Color.Gray;
                        else
                            a = Color.Brown;
                        //Order *= -1;
                        //ChessRules.CurrentOrder *= -1;
                        if (JI == 1)

                            BlitzGameTreeCreationThinkingQuantumTreeElephant(a, Index, jIndex, Order * -1, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);

                        //Initiatye Variables.
                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;


                        if (Order == 1)
                            a = Color.Gray;
                        else
                            a = Color.Brown;
                        //Order *= -1;
                        //ChessRules.CurrentOrder *= -1;
                        if (JI == 2)

                            BlitzGameTreeCreationThinkingQuantumTreeHourse(a, Index, jIndex, Order * -1, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);

                        //Initiatye Variables.
                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;


                        if (Order == 1)
                            a = Color.Gray;
                        else
                            a = Color.Brown;
                        //Order *= -1;
                        //ChessRules.CurrentOrder *= -1;
                        if (JI == 3)
                            BlitzGameTreeCreationThinkingQuantumTreeCastle(a, Index, jIndex, Order * -1, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);

                        //Initiatye Variables.
                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;


                        if (Order == 1)
                            a = Color.Gray;
                        else
                            a = Color.Brown;
                        //Order *= -1;
                        //ChessRules.CurrentOrder *= -1;
                        if (JI == 4)
                            BlitzGameTreeCreationThinkingQuantumTreeMinister(a, Index, jIndex, Order * -1, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);

                        //Initiatye Variables.
                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;


                        if (Order == 1)
                            a = Color.Gray;
                        else
                            a = Color.Brown;
                        //Order *= -1;
                        //ChessRules.CurrentOrder *= -1;
                        if (JI == 5)
                            BlitzGameTreeCreationThinkingQuantumTreeKing(a, Index, jIndex, Order * -1, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);

                    }
                }
            }
            //For Brown Order Blitz Game Calculate Maximum Heuristic Inclusive AStarGreedy First Game Search.
            else
            {
                Object O1 = new Object();
                lock (O1)
                {
                    Index[0] = -1;
                    BlitzGameThinkingQuantumTreeSolderBrown(ref PreviousLessS, ref Index, ref jIndex, Order, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);
                    Index[1] = -1;
                    BlitzGameThinkingQuantumTreeElephantBrown(ref PreviousLessE, ref Index, ref jIndex, Order, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);
                    Index[2] = -1;
                    BlitzGameThinkingQuantumTreeHourseBrown(ref PreviousLessH, ref Index, ref jIndex, Order, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);
                    Index[3] = -1;
                    BlitzGameThinkingQuantumTreeCastleBrown(ref PreviousLessB, ref Index, ref jIndex, Order, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);
                    Index[4] = -1;
                    BlitzGameThinkingQuantumTreeMinisterBrown(ref PreviousLessM, ref Index, ref jIndex, Order, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);
                    Index[5] = -1;
                    BlitzGameThinkingQuantumTreeKingBrown(ref PreviousLessK, ref Index, ref jIndex, Order, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);
                }
                int JI = -1;
                Object O2 = new Object();
                lock (O2)
                {
                    JI = MaxOfSixHeuristic(PreviousLessS, PreviousLessE, PreviousLessH, PreviousLessB, PreviousLessM, PreviousLessK);
                }
                Object O3 = new Object();
                lock (O3)
                {
                    if (JI != -1)
                    {
                        BlitzGameTreeCreationThinkingQuantumTreeSolder(a, Index, jIndex, Order * -1, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);

                        //Initiatye Variables.
                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;


                        if (Order == 1)
                            a = Color.Gray;
                        else
                            a = Color.Brown;

                        BlitzGameTreeCreationThinkingQuantumTreeElephant(a, Index, jIndex, Order * -1, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);

                        //Initiatye Variables.
                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;


                        if (Order == 1)
                            a = Color.Gray;
                        else
                            a = Color.Brown;

                        if (JI == 2)

                            BlitzGameTreeCreationThinkingQuantumTreeHourse(a, Index, jIndex, Order * -1, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);

                        //Initiatye Variables.
                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;


                        if (Order == 1)
                            a = Color.Gray;
                        else
                            a = Color.Brown;

                        if (JI == 3)
                            BlitzGameTreeCreationThinkingQuantumTreeCastle(a, Index, jIndex, Order * -1, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);

                        //Initiatye Variables.
                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;


                        if (Order == 1)
                            a = Color.Gray;
                        else
                            a = Color.Brown;
                        //Order *= -1;
                        //ChessRules.CurrentOrder *= -1;
                        if (JI == 4)
                            BlitzGameTreeCreationThinkingQuantumTreeMinister(a, Index, jIndex, Order * -1, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);

                        //Initiatye Variables.
                        Order = DummyOrder;
                        ChessRules.CurrentOrder = DummyCurrentOrder;


                        if (Order == 1)
                            a = Color.Gray;
                        else
                            a = Color.Brown;

                        if (JI == 5)
                            BlitzGameTreeCreationThinkingQuantumTreeKing(a, Index, jIndex, Order * -1, iAStarGreedy, ik, j, FOUND, LeafAStarGreedy);


                    }
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzGameThinkingQuantumTree:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //calculate statistic move
        String Alphabet(int RowRealesed)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            String A = "";
            if (RowRealesed == 0)
                A = "a";
            else
                if (RowRealesed == 1)
                A = "b";
            else
                    if (RowRealesed == 2)
                A = "c";
            else
                        if (RowRealesed == 3)
                A = "d";
            else
                            if (RowRealesed == 4)
                A = "e";
            else
                                if (RowRealesed == 5)
                A = "f";
            else
                                    if (RowRealesed == 6)
                A = "g";
            else
                                        if (RowRealesed == 7)
                A = "h";
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("Alphabet:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return A;




        }
        //calculate statistic move
        String Number(int ColumnRealeASed)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            String A = "";
            if (ColumnRealeASed == 7)
                A = "0";
            else
                if (ColumnRealeASed == 6)
                A = "1";
            else
                    if (ColumnRealeASed == 5)
                A = "2";
            else
                        if (ColumnRealeASed == 4)
                A = "3";
            else
                            if (ColumnRealeASed == 3)
                A = "4";
            else
                                if (ColumnRealeASed == 2)
                A = "5";
            else
                                    if (ColumnRealeASed == 1)
                A = "6";
            else
                                        if (ColumnRealeASed == 0)
                A = "7";
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("Number:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return A;




        }
        //number of bounry object
        int SumOfObjects(AllDraw A, int Order)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            int Sum = 0;
            if (A == null)
                return Sum;
            if (Order == 1)
            {
                for (var i = 0; i < A.SodierMidle; i++)
                {
                    if (A.SolderesOnTable != null && A.SolderesOnTable[i] != null)
                        Sum += A.SolderesOnTable[i].WinOcuuredatChiled;
                }
                for (var i = 0; i < A.ElefantMidle; i++)
                {
                    if (A.ElephantOnTable != null && A.ElephantOnTable[i] != null)
                        Sum += A.ElephantOnTable[i].WinOcuuredatChiled;
                }
                for (var i = 0; i < A.HourseMidle; i++)
                {
                    if (A.HoursesOnTable != null && A.HoursesOnTable[i] != null)
                        Sum += A.HoursesOnTable[i].WinOcuuredatChiled;
                }
                for (var i = 0; i < A.CastleMidle; i++)
                {
                    if (A.CastlesOnTable != null && A.CastlesOnTable[i] != null)
                        Sum += A.CastlesOnTable[i].WinOcuuredatChiled;
                }
                for (var i = 0; i < A.MinisterMidle; i++)
                {
                    if (A.MinisterOnTable != null && A.MinisterOnTable[i] != null)
                        Sum += A.MinisterOnTable[i].WinOcuuredatChiled;
                }
                for (var i = 0; i < A.KingMidle; i++)
                {
                    if (A.KingOnTable != null && A.KingOnTable[i] != null)
                        Sum += A.KingOnTable[i].WinOcuuredatChiled;
                }

            }
            else
            {
                for (var i = A.SodierMidle; i < A.SodierHigh; i++)
                {
                    if (A.SolderesOnTable != null && A.SolderesOnTable[i] != null)
                        Sum += A.SolderesOnTable[i].WinOcuuredatChiled;
                }
                for (var i = A.ElefantMidle; i < A.ElefantHigh; i++)
                {
                    if (A.ElephantOnTable != null && A.ElephantOnTable[i] != null)
                        Sum += A.ElephantOnTable[i].WinOcuuredatChiled;
                }
                for (var i = A.HourseMidle; i < A.HourseHight; i++)
                {
                    if (A.HoursesOnTable != null && A.HoursesOnTable[i] != null)
                        Sum += A.HoursesOnTable[i].WinOcuuredatChiled;
                }
                for (var i = A.CastleMidle; i < A.CastleHigh; i++)
                {
                    if (A.CastlesOnTable != null && A.CastlesOnTable[i] != null)
                        Sum += A.CastlesOnTable[i].WinOcuuredatChiled;
                }

                for (var i = A.MinisterMidle; i < A.MinisterHigh; i++)
                {
                    if (A.MinisterOnTable != null && A.MinisterOnTable[i] != null)
                        Sum += A.MinisterOnTable[i].WinOcuuredatChiled;
                }
                for (var i = A.KingMidle; i < A.KingHigh; i++)
                {
                    if (A.KingOnTable != null && A.KingOnTable[i] != null)
                        Sum += A.KingOnTable[i].WinOcuuredatChiled;
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("SumOfObjects:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Sum;
        }
        //victome transfer leafs to rooots chiled
        int SumMinusOfObjects(AllDraw A, int Order)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            int Sum = 0;
            if (A == null)
                return Sum;
            if (Order == 1)
            {
                for (var i = 0; i < A.SodierMidle; i++)
                {
                    if (A.SolderesOnTable != null && A.SolderesOnTable[i] != null)
                        Sum += A.SolderesOnTable[i].LoseOcuuredatChiled;
                }
                for (var i = 0; i < A.ElefantMidle; i++)
                {
                    if (A.ElephantOnTable != null && A.ElephantOnTable[i] != null)
                        Sum += A.ElephantOnTable[i].LoseOcuuredatChiled;
                }
                for (var i = 0; i < A.HourseMidle; i++)
                {
                    if (A.HoursesOnTable != null && A.HoursesOnTable[i] != null)
                        Sum += A.HoursesOnTable[i].LoseOcuuredatChiled;
                }
                for (var i = 0; i < A.CastleMidle; i++)
                {
                    if (A.CastlesOnTable != null && A.CastlesOnTable[i] != null)
                        Sum += A.CastlesOnTable[i].LoseOcuuredatChiled;
                }
                for (var i = 0; i < A.MinisterMidle; i++)
                {
                    if (A.MinisterOnTable != null && A.MinisterOnTable[i] != null)
                        Sum += A.MinisterOnTable[i].LoseOcuuredatChiled;
                }
                for (var i = 0; i < A.KingMidle; i++)
                {
                    if (A.KingOnTable != null && A.KingOnTable[i] != null)
                        Sum += A.KingOnTable[i].LoseOcuuredatChiled;
                }

            }
            else
            {
                for (var i = A.SodierMidle; i < A.SodierHigh; i++)
                {
                    if (A.SolderesOnTable != null && A.SolderesOnTable[i] != null)
                        Sum += A.SolderesOnTable[i].LoseOcuuredatChiled;
                }
                for (var i = A.ElefantMidle; i < A.ElefantHigh; i++)
                {
                    if (A.ElephantOnTable != null && A.ElephantOnTable[i] != null)
                        Sum += A.ElephantOnTable[i].LoseOcuuredatChiled;
                }
                for (var i = A.HourseMidle; i < A.HourseHight; i++)
                {
                    if (A.HoursesOnTable != null && A.HoursesOnTable[i] != null)
                        Sum += A.HoursesOnTable[i].LoseOcuuredatChiled;
                }
                for (var i = A.CastleMidle; i < A.CastleHigh; i++)
                {
                    if (A.CastlesOnTable != null && A.CastlesOnTable[i] != null)
                        Sum += A.CastlesOnTable[i].LoseOcuuredatChiled;
                }

                for (var i = A.MinisterMidle; i < A.MinisterHigh; i++)
                {
                    if (A.MinisterOnTable != null && A.MinisterOnTable[i] != null)
                        Sum += A.MinisterOnTable[i].LoseOcuuredatChiled;
                }
                for (var i = A.KingMidle; i < A.KingHigh; i++)
                {
                    if (A.KingOnTable != null && A.KingOnTable[i] != null)
                        Sum += A.KingOnTable[i].LoseOcuuredatChiled;
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("SumMinusOfObjects:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Sum;
        }
        bool ReturnFullGameThinkingTreeIligalSemaphore(int ik, int kind)
        {
            if (kind == 1)
            {
                if (SolderesOnTable[ik].SoldierThinkingQuantum[0].TableListSolder.Count == 0)
                    return true;
            }
            else//elephant
              if (kind == 2)
            {
                if (ElephantOnTable[ik].ElefantThinkingQuantum[0].TableListElefant.Count == 0)
                    return true;
            }
            else if (kind == 3)//hourse
            {
                if (HoursesOnTable[ik].HourseThinkingQuantum[0].TableListHourse.Count == 0)
                    return true;
            }
            else if (kind == 4)//Castle
            {
                if (CastlesOnTable[ik].CastleThinkingQuantum[0].TableListCastle.Count == 0)
                    return true;
            }
            else
                if (kind == 5)//minister
            {
                if (MinisterOnTable[ik].MinisterThinkingQuantum[0].TableListMinister.Count == 0)
                    return true;
            }
            else if (kind == 6)//king
            {
                if (KingOnTable[ik].KingThinkingQuantum[0].TableListKing.Count == 0)
                    return true;
            }
            return false;
        }

        //Semaphore determination about ThinkingQuantum operational completed.
        bool ReturnFullGameThinkingQuantumTreeSemaphore(int ik, int kind)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //soldier
            if (kind == 1)
            {
                if (SolderesOnTable[ik].SoldierThinkingQuantum[0].ThinkingQuantumBegin && (!SolderesOnTable[ik].SoldierThinkingQuantum[0].ThinkingQuantumFinished))
                    return true;
            }
            else//elephant
                if (kind == 2)
            {
                if (ElephantOnTable[ik].ElefantThinkingQuantum[0].ThinkingQuantumBegin && (!ElephantOnTable[ik].ElefantThinkingQuantum[0].ThinkingQuantumFinished))
                    return true;
            }
            else if (kind == 3)//hourse
            {
                if (HoursesOnTable[ik].HourseThinkingQuantum[0].ThinkingQuantumBegin && (!HoursesOnTable[ik].HourseThinkingQuantum[0].ThinkingQuantumFinished))
                    return true;
            }
            else if (kind == 4)//Castle
            {
                if (CastlesOnTable[ik].CastleThinkingQuantum[0].ThinkingQuantumBegin && (!CastlesOnTable[ik].CastleThinkingQuantum[0].ThinkingQuantumFinished))
                    return true;
            }
            else
                if (kind == 5)//minister
            {
                if (MinisterOnTable[ik].MinisterThinkingQuantum[0].ThinkingQuantumBegin && (!MinisterOnTable[ik].MinisterThinkingQuantum[0].ThinkingQuantumFinished))
                    return true;
            }
            else if (kind == 6)//king
            {
                if (KingOnTable[ik].KingThinkingQuantum[0].ThinkingQuantumBegin && (!KingOnTable[ik].KingThinkingQuantum[0].ThinkingQuantumFinished))
                    return true;
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("ReturnFullGameThinkingQuantumTreeSemaphore:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return false;
        }
        //determination about learning autamata semaphores permit of operational computational 
        bool ReturnConsiderationOfPermitForValidationOfLearningInFullGameThinkingQuantumTree(int ik, int kind, bool Penalty, int j)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //when is learning autamata
            if (Penalty)
            {
                //soldier
                if (kind == 1)
                {
                    if (SolderesOnTable[ik].SoldierThinkingQuantum[0].PenaltyRegardListSolder[j].IsPenaltyAction() != 0 || (!UsePenaltyRegardMechnisamT))
                        return true;
                }
                else//elephant
                                if (kind == 2)
                {
                    if (ElephantOnTable[ik].ElefantThinkingQuantum[0].PenaltyRegardListElefant[j].IsPenaltyAction() != 0 || (!UsePenaltyRegardMechnisamT))
                        return true;
                }
                else if (kind == 3)//hourse
                {
                    if (HoursesOnTable[ik].HourseThinkingQuantum[0].PenaltyRegardListHourse[j].IsPenaltyAction() != 0 || (!UsePenaltyRegardMechnisamT))
                        return true;
                }
                else if (kind == 4)//Castle
                {
                    if (CastlesOnTable[ik].CastleThinkingQuantum[0].PenaltyRegardListCastle[j].IsPenaltyAction() != 0 || (!UsePenaltyRegardMechnisamT))
                        return true;
                }
                else
                    if (kind == 5)//minister
                {
                    if (MinisterOnTable[ik].MinisterThinkingQuantum[0].PenaltyRegardListMinister[j].IsPenaltyAction() != 0 || (!UsePenaltyRegardMechnisamT))
                        return true;
                }
                else if (kind == 6)//king
                {
                    if (KingOnTable[ik].KingThinkingQuantum[0].PenaltyRegardListKing[j].IsPenaltyAction() != 0 || (!UsePenaltyRegardMechnisamT))
                        return true;
                }
            }
            else//brown
            {
                if (kind == 1)//soldier
                {
                    if (SolderesOnTable[ik].SoldierThinkingQuantum[0].PenaltyRegardListSolder[j].IsRewardAction() != 1 || (!UsePenaltyRegardMechnisamT))
                        return true;
                }
                else
                         if (kind == 2)//elephant
                {
                    if (ElephantOnTable[ik].ElefantThinkingQuantum[0].PenaltyRegardListElefant[j].IsRewardAction() != 1 || (!UsePenaltyRegardMechnisamT))
                        return true;
                }
                else if (kind == 3)//hourse
                {
                    if (HoursesOnTable[ik].HourseThinkingQuantum[0].PenaltyRegardListHourse[j].IsRewardAction() != 1 || (!UsePenaltyRegardMechnisamT))
                        return true;
                }
                else if (kind == 4)//Castle
                {
                    if (CastlesOnTable[ik].CastleThinkingQuantum[0].PenaltyRegardListCastle[j].IsRewardAction() != 1 || (!UsePenaltyRegardMechnisamT))
                        return true;
                }
                else
                    if (kind == 5)//minister
                {
                    if (MinisterOnTable[ik].MinisterThinkingQuantum[0].PenaltyRegardListMinister[j].IsRewardAction() != 1 || (!UsePenaltyRegardMechnisamT))
                        return true;
                }
                else if (kind == 6)//king
                {
                    if (KingOnTable[ik].KingThinkingQuantum[0].PenaltyRegardListKing[j].IsRewardAction() != 1 || (!UsePenaltyRegardMechnisamT))
                        return true;
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("ReturnConsiderationOfPermitForValidationOfLearningInFullGameThinkingQuantumTree:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return false;
        }
        //determiniation about deeper increamental of a part
        void BlitzNotValidFullGameThinkingQuantumTreePartOne(int ik, int Order, int kind)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //soldier
            if (kind == 1)
            {
                //when valid 
                if (SolderesOnTable[ik].SoldierThinkingQuantum[0].TableListSolder.Count > SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy == null)
                        SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 2)///elephant
            {
                //when valid 
                if (ElephantOnTable[ik].ElefantThinkingQuantum[0].TableListElefant.Count > ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy == null)
                        ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 3)//hourse
            {
                //when valid 
                if (HoursesOnTable[ik].HourseThinkingQuantum[0].TableListHourse.Count > HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy == null)
                        HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 4)//Castle
            {
                //when valid 
                if (CastlesOnTable[ik].CastleThinkingQuantum[0].TableListCastle.Count > CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy == null)
                        CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 5)//minister
            {
                //when valid 
                if (MinisterOnTable[ik].MinisterThinkingQuantum[0].TableListMinister.Count > MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy == null)
                        MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 6)//king
            {
                //when valid 
                if (KingOnTable[ik].KingThinkingQuantum[0].TableListKing.Count > KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy == null)
                        KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy[KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzNotValidFullGameThinkingQuantumTreePartOne:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //determiniation about deeper increamental of a part
        void BlitzNotValidFullGameThinkingQuantumTreePartTow(int ik, int Order, int kind)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            if (kind == 1)//soldier
            {
                //when valid 
                if (SolderesOnTable[ik].SoldierThinkingQuantum[0].TableListSolder.Count > SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy == null)
                        SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 2)//elephant
            {
                //when valid 
                if (ElephantOnTable[ik].ElefantThinkingQuantum[0].TableListElefant.Count > ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy == null)
                        ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 3)//hourse
            {
                //when valid 
                if (HoursesOnTable[ik].HourseThinkingQuantum[0].TableListHourse.Count > HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy == null)
                        HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 4)//Castle
            {
                //when valid 
                if (CastlesOnTable[ik].CastleThinkingQuantum[0].TableListCastle.Count > CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy == null)
                        CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 5)//minister
            {
                //when valid 
                if (MinisterOnTable[ik].MinisterThinkingQuantum[0].TableListMinister.Count > MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy == null)
                        MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 6)//king
            {
                //when valid 
                if (KingOnTable[ik].KingThinkingQuantum[0].TableListKing.Count > KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy == null)
                        KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy[KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }    //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzNotValidFullGameThinkingQuantumTreePartTow:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //determiniation about deeper increamental of a part
        void BlitzNotValidFullGameThinkingQuantumTreePartThree(int ik, int Order, int kind)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //long Time = TimeElapced.TimeNow();Spaces++;
            //soldier
            if (kind == 1)
            {
                //when valid 
                if (SolderesOnTable[ik].SoldierThinkingQuantum[0].TableListSolder.Count > SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy == null)
                        SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 2)//elephant
            {
                //when valid 
                if (ElephantOnTable[ik].ElefantThinkingQuantum[0].TableListElefant.Count > ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy == null)
                        ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 3)//hourse
            {
                //when valid 
                if (HoursesOnTable[ik].HourseThinkingQuantum[0].TableListHourse.Count > HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy == null)
                        HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 4)//Castle
            {
                //when valid 
                if (CastlesOnTable[ik].CastleThinkingQuantum[0].TableListCastle.Count > CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy == null)
                        CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 5)//minister
            {
                //when valid 
                if (MinisterOnTable[ik].MinisterThinkingQuantum[0].TableListMinister.Count > MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy == null)
                        MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 6)//king
            {
                //when valid 
                if (KingOnTable[ik].KingThinkingQuantum[0].TableListKing.Count > KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy == null)
                        KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy[KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("BlitzNotValidFullGameThinkingQuantumTreePartThree:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //operantinal of creation of current deeper node and set string making
        void FullGameThinkingQuantumTreeInitialization(int ik, int j, int Order, int kind)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //soldier
            if (kind == 1)
            {
                //when valid do create of deeper node and string making
                if (SolderesOnTable[ik].SoldierThinkingQuantum[0].TableListSolder.Count > SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy == null)
                        SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(CloneATable(SolderesOnTable[ik].SoldierThinkingQuantum[0].TableListSolder[j]));
                    SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumnFinishedWait();
                    SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 2)//elephant 
            {
                //when valid do create of deeper node and string making
                if (ElephantOnTable[ik].ElefantThinkingQuantum[0].TableListElefant.Count > ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy == null)
                        ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(CloneATable(ElephantOnTable[ik].ElefantThinkingQuantum[0].TableListElefant[j]));
                    ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumnFinishedWait();
                    ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 3)//hourse
            {
                //when valid do create of deeper node and string making
                if (HoursesOnTable[ik].HourseThinkingQuantum[0].TableListHourse.Count > HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy == null)
                        HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(CloneATable(HoursesOnTable[ik].HourseThinkingQuantum[0].TableListHourse[j]));
                    HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumnFinishedWait();
                    HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 4)//Castle
            {
                //when valid do create of deeper node and string making
                if (CastlesOnTable[ik].CastleThinkingQuantum[0].TableListCastle.Count > CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy == null)
                        CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(CloneATable(CastlesOnTable[ik].CastleThinkingQuantum[0].TableListCastle[j]));
                    CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumnFinishedWait();
                    CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 5)//minister
            {
                //when valid do create of deeper node and string making
                if (MinisterOnTable[ik].MinisterThinkingQuantum[0].TableListMinister.Count > MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy == null)
                        MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(CloneATable(MinisterOnTable[ik].MinisterThinkingQuantum[0].TableListMinister[j]));
                    MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumnFinishedWait();
                    MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            else if (kind == 6)//king
            {
                //when valid do create of deeper node and string making
                if (KingOnTable[ik].KingThinkingQuantum[0].TableListKing.Count > KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count)
                {
                    if (KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy == null)
                        KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy = new List<AllDraw>();
                    KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Add(new AllDraw(Order * -1, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged));
                    KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy[KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Clear();
                    KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy[KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count - 1].TableList.Add(CloneATable(KingOnTable[ik].KingThinkingQuantum[0].TableListKing[j]));
                    KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy[KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumn(0);
                    KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy[KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count - 1].SetRowColumnFinishedWait();
                    KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy[KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeInitialization:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //main operation of full game deeper created compuational to deeper need.
        void OpOfFullGameThinkingQuantumTree(int ik, int j, int Order, int iAStarGreedy, int ii, int jj, Color a, int kind, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //soldier
            if (kind == 1)
            {
                //when verfied is not valied return
                if (!IsNotAStarGreedyConanaied(ik, j, 1))
                    return;

                //minitor
                OutPutAction = " " + Alphabet(SolderesOnTable[ik].SoldierThinkingQuantum[0].Row) + Number(SolderesOnTable[ik].SoldierThinkingQuantum[0].Column) + Alphabet(SolderesOnTable[ik].SoldierThinkingQuantum[0].RowColumnSoldier[j][0]) + Number(SolderesOnTable[ik].SoldierThinkingQuantum[0].RowColumnSoldier[j][1]);
                if (Order == 1)
                    OutPut.Append("\r\nPerception Soldier AStarGreedy By Bob at Level " + iAStarGreedy.ToString() + " By " + PerceptionCount.ToString() + "th Perception String " + OutPutAction);
                else
                    OutPut.Append("\r\nPerception Soldier AStarGreedy By Alice at Level " + iAStarGreedy.ToString() + " By " + PerceptionCount.ToString() + "th Perception String " + OutPutAction);

                //operational 
                PerceptionCount++;
                var iii = SolderesOnTable[ik].SoldierThinkingQuantum[0].RowColumnSoldier[j][0];
                var jjj = SolderesOnTable[ik].SoldierThinkingQuantum[0].RowColumnSoldier[j][1];
                Color aa = a;
                int[,] Tab = CloneATable(SolderesOnTable[ik].SoldierThinkingQuantum[0].TableListSolder[j]);
                int Ord = Order;
                SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                var array1 = Task.Factory.StartNew(() => SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy[SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, ii, jj, a, CloneATable(SolderesOnTable[ik].SoldierThinkingQuantum[0].TableListSolder[j]), Ord * -1, false, FOUND, LeafAStarGreedy));
                TH.Add(array1);
            }
            else if (kind == 2)//elephant 
            {
                //when verfied is not valied return
                if (!IsNotAStarGreedyConanaied(ik, j, 2))
                    return;

                //minitor
                OutPutAction = " " + Alphabet(ElephantOnTable[ik].ElefantThinkingQuantum[0].Row) + Number(ElephantOnTable[ik].ElefantThinkingQuantum[0].Column) + Alphabet(ElephantOnTable[ik].ElefantThinkingQuantum[0].RowColumnElefant[j][0]) + Number(ElephantOnTable[ik].ElefantThinkingQuantum[0].RowColumnElefant[j][1]);
                if (Order == 1)
                    OutPut.Append("\r\nPerception Elephant AStarGreedy By Bob at Level " + iAStarGreedy.ToString() + " By " + PerceptionCount.ToString() + "th Perception String " + OutPutAction);
                else
                    OutPut.Append("\r\nPerception Elephant AStarGreedy By Alice at Level " + iAStarGreedy.ToString() + " By " + PerceptionCount.ToString() + "th Perception String " + OutPutAction);

                //operational 
                PerceptionCount++;
                var iii = ElephantOnTable[ik].ElefantThinkingQuantum[0].RowColumnElefant[j][0];
                var jjj = ElephantOnTable[ik].ElefantThinkingQuantum[0].RowColumnElefant[j][1];
                Color aa = a;
                int[,] Tab = CloneATable(ElephantOnTable[ik].ElefantThinkingQuantum[0].TableListElefant[j]);
                int Ord = Order;
                ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;

                var array1 = Task.Factory.StartNew(() => ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy[ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, iii, jjj, aa, Tab, Ord * -1, false, FOUND, LeafAStarGreedy));
                TH.Add(array1);

            }
            else if (kind == 3)//hourse
            {
                //when verfied is not valied return
                if (!IsNotAStarGreedyConanaied(ik, j, 3))
                    return;

                //minitor
                OutPutAction = " " + Alphabet(HoursesOnTable[ik].HourseThinkingQuantum[0].Row) + Number(HoursesOnTable[ik].HourseThinkingQuantum[0].Column) + Alphabet(HoursesOnTable[ik].HourseThinkingQuantum[0].RowColumnHourse[j][0]) + Number(HoursesOnTable[ik].HourseThinkingQuantum[0].RowColumnHourse[j][1]);
                if (Order == 1)
                    OutPut.Append("\r\nPerception Hourse AStarGreedy By Bob at Level " + iAStarGreedy.ToString() + " By " + PerceptionCount.ToString() + "th Perception String " + OutPutAction);
                else
                    OutPut.Append("\r\nPerception Hourse AStarGreedy By Alice at Level " + iAStarGreedy.ToString() + " By " + PerceptionCount.ToString() + "th Perception String " + OutPutAction);

                //operational 
                PerceptionCount++;
                var iii = HoursesOnTable[ik].HourseThinkingQuantum[0].RowColumnHourse[j][0];
                var jjj = HoursesOnTable[ik].HourseThinkingQuantum[0].RowColumnHourse[j][1];
                Color aa = a;
                int[,] Tab = CloneATable(HoursesOnTable[ik].HourseThinkingQuantum[0].TableListHourse[j]);
                int Ord = Order;
                HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                var array1 = Task.Factory.StartNew(() => HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, iii, jjj, aa, Tab, Ord * -1, false, FOUND, LeafAStarGreedy));
                TH.Add(array1);


            }
            else if (kind == 4)//Castle
            {
                //when verfied is not valied return
                if (!IsNotAStarGreedyConanaied(ik, j, 4))
                    return;

                //minitor
                OutPutAction = " " + Alphabet(CastlesOnTable[ik].CastleThinkingQuantum[0].Row) + Number(CastlesOnTable[ik].CastleThinkingQuantum[0].Column) + Alphabet(CastlesOnTable[ik].CastleThinkingQuantum[0].RowColumnCastle[j][0]) + Number(CastlesOnTable[ik].CastleThinkingQuantum[0].RowColumnCastle[j][1]);
                if (Order == 1)
                    OutPut.Append("\r\nPerception Castle AStarGreedy By Bob at Level " + iAStarGreedy.ToString() + " By " + PerceptionCount.ToString() + "th Perception String " + OutPutAction);
                else
                    OutPut.Append("\r\nPerception Castle AStarGreedy By Alice at Level " + iAStarGreedy.ToString() + " By " + PerceptionCount.ToString() + "th Perception String " + OutPutAction);

                //operational 
                PerceptionCount++;
                var iii = CastlesOnTable[ik].CastleThinkingQuantum[0].RowColumnCastle[j][0];
                var jjj = CastlesOnTable[ik].CastleThinkingQuantum[0].RowColumnCastle[j][1];
                Color aa = a;
                int[,] Tab = CloneATable(CastlesOnTable[ik].CastleThinkingQuantum[0].TableListCastle[j]);
                int Ord = Order;
                CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;
                var array1 = Task.Factory.StartNew(() => CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, iii, jjj, aa, Tab, Ord * -1, false, FOUND, LeafAStarGreedy));
                TH.Add(array1);

            }
            else if (kind == 5)//minister
            {
                //when verfied is not valied return
                if (!IsNotAStarGreedyConanaied(ik, j, 5))
                    return;

                //minitor
                OutPutAction = " " + Alphabet(MinisterOnTable[ik].MinisterThinkingQuantum[0].Row) + Number(MinisterOnTable[ik].MinisterThinkingQuantum[0].Column) + Alphabet(MinisterOnTable[ik].MinisterThinkingQuantum[0].RowColumnMinister[j][0]) + Number(MinisterOnTable[ik].MinisterThinkingQuantum[0].RowColumnMinister[j][1]);
                if (Order == 1)
                    OutPut.Append("\r\nPerception Minister AStarGreedy By Bob at Level " + iAStarGreedy.ToString() + " By " + PerceptionCount.ToString() + "th Perception String " + OutPutAction);
                else
                    OutPut.Append("\r\nPerception Minister AStarGreedy By Alice at Level " + iAStarGreedy.ToString() + " By " + PerceptionCount.ToString() + "th Perception String " + OutPutAction);

                //operational 
                PerceptionCount++;
                var iii = MinisterOnTable[ik].MinisterThinkingQuantum[0].RowColumnMinister[j][0];
                var jjj = MinisterOnTable[ik].MinisterThinkingQuantum[0].RowColumnMinister[j][1];
                Color aa = a;
                int[,] Tab = CloneATable(MinisterOnTable[ik].MinisterThinkingQuantum[0].TableListMinister[j]);
                int Ord = Order;
                MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;

                var array1 = Task.Factory.StartNew(() => MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, iii, jjj, aa, Tab, Ord * -1, false, FOUND, LeafAStarGreedy));
                TH.Add(array1);

            }
            else if (kind == 6)//king
            {
                //when verfied is not valied return
                if (!IsNotAStarGreedyConanaied(ik, j, 6))
                    return;

                //minitor
                OutPutAction = " " + Alphabet(KingOnTable[ik].KingThinkingQuantum[0].Row) + Number(KingOnTable[ik].KingThinkingQuantum[0].Column) + Alphabet(KingOnTable[ik].KingThinkingQuantum[0].RowColumnKing[j][0]) + Number(KingOnTable[ik].KingThinkingQuantum[0].RowColumnKing[j][1]);
                if (Order == 1)
                    OutPut.Append("\r\nPerception King AStarGreedy By Bob at Level " + iAStarGreedy.ToString() + " By " + PerceptionCount.ToString() + "th Perception String " + OutPutAction);
                else
                    OutPut.Append("\r\nPerception King AStarGreedy By Alice at Level " + iAStarGreedy.ToString() + " By " + PerceptionCount.ToString() + "th Perception String " + OutPutAction);

                //operational 
                PerceptionCount++;
                var iii = KingOnTable[ik].KingThinkingQuantum[0].RowColumnKing[j][0];
                var jjj = KingOnTable[ik].KingThinkingQuantum[0].RowColumnKing[j][1];
                Color aa = a;
                int[,] Tab = CloneATable(KingOnTable[ik].KingThinkingQuantum[0].TableListKing[j]);
                int Ord = Order;
                KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy[KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count - 1].AStarGreedyString = this;

                var array1 = Task.Factory.StartNew(() => KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy[KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, iii, jjj, aa, Tab, Ord * -1, false, FOUND, LeafAStarGreedy));

                TH.Add(array1);


            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("OpOfFullGameThinkingQuantumTree:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //decicion for deeper satisfied boundry condition of full game methods group
        void ReturnFullGameThinkingQuantumTreeSemaphoreAS(int Order, int iAStarGreedy, int ik, int Kind)
        {
            Object OO1 = new Object();
            lock (OO1)
            {
                TaskBegin++;
                //main decistion
                while (ReturnFullGameThinkingQuantumTreeSemaphore(ik, Kind))
                {
                    
                    //when search finished stop and return
                    if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                        break;

                }


            }
        }
        //deeper for soldier
        bool FullGameThinkingQuantumTreeSoldier(int ik, Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {
                if (ReturnFullGameThinkingTreeIligalSemaphore(ik, 1))
                    return false;
                //semaphore
                var array = Task.Factory.StartNew(() => ReturnFullGameThinkingQuantumTreeSemaphoreAS(Order, iAStarGreedy, ik, 1));
                array.Wait();

                Object OOOO = new Object();
                lock (OOOO)
                {

                    //when search finished stop and return
                    if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                        return false;

                }

                //Parallel.For(0, SolderesOnTable[ik].SoldierThinkingQuantum[0].TableListSolder.Count, j =>
                //operational computation secxistence
                for (var j = 0; j < SolderesOnTable[ik].SoldierThinkingQuantum[0].TableListSolder.Count; j++)
                {
                    Object OOOOO = new Object();
                    lock (OOOOO)
                    {

                        if (IsSupHuTrue(ik, j, 0, 1))
                            continue;
                        //when search finished stop and return
                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                            return false;

                    }
                    Object ooo = new Object();
                    lock (ooo)
                    {
                        //when node have kings dangoures ignore and continue.
                        if (CheckeHuristci(SolderesOnTable[ik].SoldierThinkingQuantum[0].TableListSolder[j], Order, ik, j, 0))
                            continue;
                        //sereved continuce
                        if (SolderesOnTable[ik].SoldierThinkingQuantum[0].IsSupHu[j])
                            continue;
                        //self do
                        if (AllDraw.OrderPlate == Order)
                        {
                            //when certification for continued of code satisfied
                            if (ReturnConsiderationOfPermitForValidationOfLearningInFullGameThinkingQuantumTree(ik, 1, true, j)
                            )
                            {
                                //when blitz game (limited game)
                                if (AllDraw.Blitz)
                                {
                                    //when do permite
                                    if (Index[0] != -1)
                                    {
                                        //object kind semaphore
                                        if (ik != Index[0])
                                        {
                                            //satisfied of created deeper one
                                            BlitzNotValidFullGameThinkingQuantumTreePartOne(ik, Order, 1);
                                            continue;
                                        }
                                        else//computational lists semaphore
                                        if (j != jindex[0])
                                        {
                                            //satisfied of created deeper tow
                                            BlitzNotValidFullGameThinkingQuantumTreePartTow(ik, Order, 1);
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(ik, Order, 1);
                                        continue;
                                    }
                                }
                                Object O3 = new Object();
                                lock (O3)
                                {
                                    //initiate for satisfied full game primary conditions
                                    FullGameThinkingQuantumTreeInitialization(ik, j, Order, 1);
                                }
                                //when deeper is valid
                                if (SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count > 0)
                                {
                                    Object O = new Object();

                                    lock (O)
                                    {
                                        //do deeper
                                        OpOfFullGameThinkingQuantumTree(ik, j, Order, iAStarGreedy, ii, jj, a, 1, FOUND, LeafAStarGreedy);

                                        Do = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            //when certification for continued of code satisfied
                            if (ReturnConsiderationOfPermitForValidationOfLearningInFullGameThinkingQuantumTree(ik, 1, false, j)

                            )
                            {

                                //when do permite
                                if (Index[0] != -1)
                                {
                                    //object kind semaphore
                                    if (ik != Index[0])
                                    {
                                        //satisfied of created deeper one
                                        BlitzNotValidFullGameThinkingQuantumTreePartOne(ik, Order, 1);
                                        continue;
                                    }
                                    else
                                        if (j != jindex[0])
                                    {
                                        //satisfied of created deeper tow
                                        BlitzNotValidFullGameThinkingQuantumTreePartTow(ik, Order, 1);
                                        continue;
                                    }
                                }
                                else
                                {
                                    //satisfied of created deeper three
                                    BlitzNotValidFullGameThinkingQuantumTreePartThree(ik, Order, 1);
                                    continue;
                                }
                                Object O3 = new Object();
                                lock (O3)
                                {
                                    //initiate for satisfied full game primary conditions
                                    FullGameThinkingQuantumTreeInitialization(ik, j, Order, 1);
                                }
                                //when deeper is valid
                                if (SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count > 0)
                                {
                                    Object O = new Object();

                                    lock (O)
                                    {
                                        //do deeper
                                        OpOfFullGameThinkingQuantumTree(ik, j, Order, iAStarGreedy, ii, jj, a, 1, FOUND, LeafAStarGreedy);

                                        Do = true;
                                    }
                                }


                            }
                        }

                    }
                }//);

                Object O2 = new Object();
                lock (O2)
                {
                    TaskEnd++;
                }
            }
            //non learning autamata victory leafs
            for (int h = 0; h < SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count && SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy != null; h++)
                SolderesOnTable[ik].WinOcuuredatChiled += SumOfObjects(SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy[h], Order);
            //non learning autamata victom leafs
            for (int h = 0; h < SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy.Count && SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy != null; h++)
                SolderesOnTable[ik].LoseOcuuredatChiled += SumMinusOfObjects(SolderesOnTable[ik].SoldierThinkingQuantum[0].AStarGreedy[h], Order);
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeSoldier:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
            //Elephant
        }
        //collection objects calling full game specific game 
        bool FullGameThinkingQuantumTreeSoldierGray(Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {
                ThinkingQuantumAllowed[0] = true;


                Parallel.For(0, SodierMidle, ik =>
                //for (var ik = 0; ik < SodierMidle; ik++)
                {
                    if (SolderesOnTable != null && SolderesOnTable[ik] != null && SolderesOnTable[ik].SoldierThinkingQuantum != null && SolderesOnTable[ik].SoldierThinkingQuantum[0] != null
                        )
                    {
                        Object O = new Object();
                        lock (O)
                        {
                            Do = FullGameThinkingQuantumTreeSoldier(ik, a, Order, iAStarGreedy, ii, jj, ik1, j1, FOUND, LeafAStarGreedy);
                        }
                    }
                });
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeSoldierGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        bool FullGameThinkingQuantumTreeElephant(int ik, Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {
                if (ReturnFullGameThinkingTreeIligalSemaphore(ik, 2))
                    return false;

                //semaphore
                var array = Task.Factory.StartNew(() => ReturnFullGameThinkingQuantumTreeSemaphoreAS(Order, iAStarGreedy, ik, 2));
                array.Wait();

                Object OOOO = new Object();
                lock (OOOO)
                {


                    //when search finished stop and return
                    if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                        return false;



                }

                ////Parallel.For(0, ElephantOnTable[ik].ElefantThinkingQuantum[0].TableListElefant.Count, j =>
                //operational computation secxistence
                for (var j = 0; j < ElephantOnTable[ik].ElefantThinkingQuantum[0].TableListElefant.Count; j++)
                {
                    Object OOOOO = new Object();
                    lock (OOOOO)
                    {

                        if (IsSupHuTrue(ik, j, 0, 2))
                            continue;
                        //when search finished stop and return
                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                            return false;

                    }
                    Object ooo = new Object();
                    lock (ooo)
                    {
                        //when node have kings dangoures ignore and continue.
                        if (CheckeHuristci(ElephantOnTable[ik].ElefantThinkingQuantum[0].TableListElefant[j], Order, ik, j, 0))
                            continue;

                        //sereved continuce
                        if (ElephantOnTable[ik].ElefantThinkingQuantum[0].IsSupHu[j])
                            continue;

                        //self do
                        if (AllDraw.OrderPlate == Order)
                        {
                            //when certification for continued of code satisfied
                            if (ReturnConsiderationOfPermitForValidationOfLearningInFullGameThinkingQuantumTree(ik, 2, true, j)
                            )
                            {

                                //when blitz game (limited game)
                                if (AllDraw.Blitz)
                                {
                                    //when do permite
                                    if (Index[1] != -1)
                                    {

                                        //object kind semaphore
                                        if (ik != Index[1])
                                        {
                                            //satisfied of created deeper one
                                            BlitzNotValidFullGameThinkingQuantumTreePartOne(ik, Order, 2);
                                            continue;
                                        }
                                        else
                                            if (j != jindex[1])
                                        {
                                            //satisfied of created deeper tow
                                            BlitzNotValidFullGameThinkingQuantumTreePartTow(ik, Order, 2);
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(ik, Order, 2);
                                        continue;
                                    }
                                }
                                Object O3 = new Object();
                                lock (O3)
                                {
                                    //initiate for satisfied full game primary conditions
                                    FullGameThinkingQuantumTreeInitialization(ik, j, Order, 2);

                                    //when deeper is valid
                                    if (ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count > 0)
                                    {
                                        Object O = new Object();
                                        lock (O)
                                        {
                                            //do deeper
                                            OpOfFullGameThinkingQuantumTree(ik, j, Order, iAStarGreedy, ii, jj, a, 2, FOUND, LeafAStarGreedy);
                                            Do = true;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            //when certification for continued of code satisfied
                            if (ReturnConsiderationOfPermitForValidationOfLearningInFullGameThinkingQuantumTree(ik, 2, false, j)

                            )
                            {

                                //when blitz game (limited game)
                                if (AllDraw.Blitz)
                                {
                                    //when do permite
                                    if (Index[1] != -1)
                                    {

                                        //object kind semaphore
                                        if (ik != Index[1])
                                        {
                                            //satisfied of created deeper one
                                            BlitzNotValidFullGameThinkingQuantumTreePartOne(ik, Order, 2);
                                            continue;
                                        }
                                        else
                                            if (j != jindex[1])
                                        {
                                            //satisfied of created deeper tow
                                            BlitzNotValidFullGameThinkingQuantumTreePartTow(ik, Order, 2);
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(ik, Order, 2);
                                        continue;
                                    }
                                }
                                Object O3 = new Object();
                                lock (O3)
                                {
                                    //initiate for satisfied full game primary conditions
                                    FullGameThinkingQuantumTreeInitialization(ik, j, Order, 2);

                                    //when deeper is valid
                                    if (ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count > 0)
                                    {
                                        Object O = new Object();
                                        lock (O)
                                        {
                                            //do deeper
                                            OpOfFullGameThinkingQuantumTree(ik, j, Order, iAStarGreedy, ii, jj, a, 2, FOUND, LeafAStarGreedy);
                                            Do = true;
                                        }
                                    }

                                }
                            }
                        }

                    }
                }//);


                Object O2 = new Object();
                lock (O2)
                {
                    TaskEnd++;
                }
            }
            //non learning autamata victory leafs
            for (int h = 0; h < ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count && ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy != null; h++)
                ElephantOnTable[ik].WinOcuuredatChiled += SumOfObjects(ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy[h], Order);
            //non learning autamata victom leafs
            for (int h = 0; h < ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy.Count && ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy != null; h++)
                ElephantOnTable[ik].LoseOcuuredatChiled += SumMinusOfObjects(ElephantOnTable[ik].ElefantThinkingQuantum[0].AStarGreedy[h], Order);
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeElephant:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        //collection objects calling full game specific game 
        bool FullGameThinkingQuantumTreeElephantGray(Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {
                ThinkingQuantumAllowed[1] = true;

                //Elephant

                Parallel.For(0, ElefantMidle, ik =>
                //for (var ik = 0; ik < ElefantMidle; ik++)
                {
                    if (ElephantOnTable != null && ElephantOnTable[ik] != null && ElephantOnTable[ik].ElefantThinkingQuantum != null && ElephantOnTable[ik].ElefantThinkingQuantum[0] != null
                        )
                    {
                        Object O = new Object();
                        lock (O)
                        {
                            Do = FullGameThinkingQuantumTreeElephant(ik, a, Order, iAStarGreedy, ii, jj, ik1, j1, FOUND, LeafAStarGreedy);
                        }
                    }
                });
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeElephantGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        bool FullGameThinkingQuantumTreeHourse(int ik, Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;

            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {
                if (ReturnFullGameThinkingTreeIligalSemaphore(ik, 3))
                    return false;

                //semaphore
                var array = Task.Factory.StartNew(() => ReturnFullGameThinkingQuantumTreeSemaphoreAS(Order, iAStarGreedy, ik, 3));
                array.Wait();


                Object OOOO = new Object();
                lock (OOOO)
                {


                    //when search finished stop and return
                    if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                        return false;


                }

                ////Parallel.For(0, HoursesOnTable[ik].HourseThinkingQuantum[0].TableListHourse.Count, j =>
                //operational computation secxistence
                for (var j = 0; j < HoursesOnTable[ik].HourseThinkingQuantum[0].TableListHourse.Count; j++)
                {
                    Object OOOOO = new Object();
                    lock (OOOOO)
                    {
                        if (IsSupHuTrue(ik, j, 0, 3))
                            continue;


                        //when search finished stop and return
                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                            return false;

                    }
                    Object ooo = new Object();
                    lock (ooo)
                    {
                        //when node have kings dangoures ignore and continue.
                        if (CheckeHuristci(HoursesOnTable[ik].HourseThinkingQuantum[0].TableListHourse[j], Order, ik, j, 0))
                            continue;

                        //sereved continuce
                        if (HoursesOnTable[ik].HourseThinkingQuantum[0].IsSupHu[j])
                            continue;


                        //self do
                        if (AllDraw.OrderPlate == Order)
                        {
                            //when certification for continued of code satisfied
                            if (ReturnConsiderationOfPermitForValidationOfLearningInFullGameThinkingQuantumTree(ik, 3, true, j)
                            )
                            {

                                //when blitz game (limited game)
                                if (AllDraw.Blitz)
                                {
                                    //when do permite
                                    if (Index[2] != -1)
                                    {

                                        //object kind semaphore
                                        if (ik != Index[2])
                                        {
                                            //satisfied of created deeper one
                                            BlitzNotValidFullGameThinkingQuantumTreePartOne(ik, Order, 3);
                                            continue;
                                        }
                                        else
                                            if (j != jindex[2])
                                        {
                                            //satisfied of created deeper tow
                                            BlitzNotValidFullGameThinkingQuantumTreePartTow(ik, Order, 3);
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(ik, Order, 3);
                                        continue;
                                    }
                                }

                                Object O3 = new Object();
                                lock (O3)
                                {
                                    FullGameThinkingQuantumTreeInitialization(ik, j, Order, 3);
                                }
                                //HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, ii, jj, a, HoursesOnTable[ik].HourseThinkingQuantum[0].TableListHourse[j], Order, false,ref HaveKilled);
                                //ParameterizedThreadStart start = new ParameterizedThreadStart(HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt);
                                if (HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count > 0)
                                {
                                    Object O = new Object();
                                    lock (O)
                                    {
                                        //do deeper
                                        OpOfFullGameThinkingQuantumTree(ik, j, Order, iAStarGreedy, ii, jj, a, 3, FOUND, LeafAStarGreedy);
                                        Do = true;
                                    }
                                }

                            }
                            else
                            {
                                //when certification for continued of code satisfied
                                if (ReturnConsiderationOfPermitForValidationOfLearningInFullGameThinkingQuantumTree(ik, 3, false, j)

                                )
                                {

                                    //when blitz game (limited game)
                                    if (AllDraw.Blitz)
                                    {
                                        //when do permite
                                        if (Index[2] != -1)
                                        {

                                            //object kind semaphore
                                            if (ik != Index[2])
                                            {
                                                //satisfied of created deeper one
                                                BlitzNotValidFullGameThinkingQuantumTreePartOne(ik, Order, 3);
                                                continue;
                                            }
                                            else
                                                if (j != jindex[2])
                                            {
                                                //satisfied of created deeper tow
                                                BlitzNotValidFullGameThinkingQuantumTreePartTow(ik, Order, 3);
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //satisfied of created deeper three
                                            BlitzNotValidFullGameThinkingQuantumTreePartThree(ik, Order, 3);
                                            continue;
                                        }
                                    }

                                    Object O3 = new Object();
                                    lock (O3)
                                    {
                                        //initiate for satisfied full game primary conditions
                                        FullGameThinkingQuantumTreeInitialization(ik, j, Order, 3);
                                    }
                                    //HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, ii, jj, a, HoursesOnTable[ik].HourseThinkingQuantum[0].TableListHourse[j], Order, false,ref HaveKilled);
                                    //ParameterizedThreadStart start = new ParameterizedThreadStart(HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy[HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt);
                                    //when deeper is valid
                                    if (HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count > 0)
                                    {
                                        Object O = new Object();
                                        lock (O)
                                        {
                                            //do deeper
                                            OpOfFullGameThinkingQuantumTree(ik, j, Order, iAStarGreedy, ii, jj, a, 3, FOUND, LeafAStarGreedy);
                                            Do = true;
                                        }
                                    }

                                }
                            }
                        }

                    }
                }//);


                Object O2 = new Object();
                lock (O2)
                {
                    TaskEnd++;
                }
            }
            //non learning autamata victory leafs
            for (int h = 0; h < HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count && HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy != null; h++)
                HoursesOnTable[ik].WinOcuuredatChiled += SumOfObjects(HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy[h], Order);
            //non learning autamata victom leafs
            for (int h = 0; h < HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy.Count && HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy != null; h++)
                HoursesOnTable[ik].LoseOcuuredatChiled += SumMinusOfObjects(HoursesOnTable[ik].HourseThinkingQuantum[0].AStarGreedy[h], Order);
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeHourse:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        //collection objects calling full game specific game 
        bool FullGameThinkingQuantumTreeHourseGray(Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {
                ThinkingQuantumAllowed[2] = true;

                //Hourse.

                Parallel.For(0, HourseMidle, ik =>
                //for (var ik = 0; ik < HourseMidle; ik++)
                {
                    if (HoursesOnTable != null && HoursesOnTable[ik] != null && HoursesOnTable[ik].HourseThinkingQuantum != null && HoursesOnTable[ik].HourseThinkingQuantum[0] != null
                        )
                    {
                        Object O = new Object();
                        lock (O)
                        {
                            Do = FullGameThinkingQuantumTreeHourse(ik, a, Order, iAStarGreedy, ii, jj, ik1, j1, FOUND, LeafAStarGreedy);
                        }
                    }
                });
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeHourseGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        bool FullGameThinkingQuantumTreeCastle(int ik, Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;

            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {
                if (ReturnFullGameThinkingTreeIligalSemaphore(ik, 4))
                    return false;


                //semaphore
                var array = Task.Factory.StartNew(() => ReturnFullGameThinkingQuantumTreeSemaphoreAS(Order, iAStarGreedy, ik, 4));
                array.Wait();

                Object OOOO = new Object();
                lock (OOOO)
                {


                    //when search finished stop and return
                    if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                        return false;


                }

                ////Parallel.For(0, CastlesOnTable[ik].CastleThinkingQuantum[0].TableListCastle.Count, j =>
                //operational computation secxistence
                for (var j = 0; j < CastlesOnTable[ik].CastleThinkingQuantum[0].TableListCastle.Count; j++)
                {
                    Object OOOOO = new Object();
                    lock (OOOOO)
                    {

                        if (IsSupHuTrue(ik, j, 0, 4))
                            continue;
                        //when search finished stop and return
                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                            return false;

                    }
                    //when node have kings dangoures ignore and continue.
                    if (CheckeHuristci(CastlesOnTable[ik].CastleThinkingQuantum[0].TableListCastle[j], Order, ik, j, 0))
                        continue;

                    //sereved continuce
                    if (CastlesOnTable[ik].CastleThinkingQuantum[0].IsSupHu[j])
                        continue;
                    Object ooo = new Object();
                    lock (ooo)
                    {

                        //self do
                        if (AllDraw.OrderPlate == Order)
                        {
                            //when certification for continued of code satisfied
                            if (ReturnConsiderationOfPermitForValidationOfLearningInFullGameThinkingQuantumTree(ik, 4, true, j)
                            )
                            {

                                //when blitz game (limited game)
                                if (AllDraw.Blitz)
                                {
                                    //when do permite
                                    if (Index[3] != -1)
                                    {
                                        //object kind semaphore
                                        if (ik != Index[3])
                                        {
                                            //satisfied of created deeper one
                                            BlitzNotValidFullGameThinkingQuantumTreePartOne(ik, Order, 4);
                                            continue;
                                        }
                                        else
                                            if (j != jindex[0])
                                        {
                                            //satisfied of created deeper tow
                                            BlitzNotValidFullGameThinkingQuantumTreePartTow(ik, Order, 4);
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(ik, Order, 4);
                                        continue;
                                    }
                                }
                                Object O3 = new Object();
                                lock (O3)
                                {
                                    //initiate for satisfied full game primary conditions
                                    FullGameThinkingQuantumTreeInitialization(ik, j, Order, 4);
                                }
                                //CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, ii, jj, a, CastlesOnTable[ik].CastleThinkingQuantum[0].TableListCastle[j], Order, false,ref HaveKilled);
                                //ParameterizedThreadStart start = new ParameterizedThreadStart(CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt);
                                //when deeper is valid
                                if (CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count > 0)
                                {
                                    Object O = new Object();
                                    lock (O)
                                    {
                                        //do deeper
                                        OpOfFullGameThinkingQuantumTree(ik, j, Order, iAStarGreedy, ii, jj, a, 4, FOUND, LeafAStarGreedy);
                                        Do = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            //when certification for continued of code satisfied
                            if (ReturnConsiderationOfPermitForValidationOfLearningInFullGameThinkingQuantumTree(ik, 4, false, j)

                            )
                            {

                                //when blitz game (limited game)
                                if (AllDraw.Blitz)
                                {
                                    //when do permite
                                    if (Index[3] != -1)
                                    {
                                        //object kind semaphore
                                        if (ik != Index[3])
                                        {
                                            //satisfied of created deeper one
                                            BlitzNotValidFullGameThinkingQuantumTreePartOne(ik, Order, 4);
                                            continue;
                                        }
                                        else
                                            if (j != jindex[0])
                                        {
                                            //satisfied of created deeper tow
                                            BlitzNotValidFullGameThinkingQuantumTreePartTow(ik, Order, 4);
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(ik, Order, 4);
                                        continue;
                                    }
                                }
                                Object O3 = new Object();
                                lock (O3)
                                {
                                    //initiate for satisfied full game primary conditions
                                    FullGameThinkingQuantumTreeInitialization(ik, j, Order, 4);
                                }
                                //CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, ii, jj, a, CastlesOnTable[ik].CastleThinkingQuantum[0].TableListCastle[j], Order, false,ref HaveKilled);
                                //ParameterizedThreadStart start = new ParameterizedThreadStart(CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy[CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt);
                                //when deeper is valid
                                if (CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count > 0)
                                {
                                    Object O = new Object();
                                    lock (O)
                                    {
                                        //do deeper
                                        OpOfFullGameThinkingQuantumTree(ik, j, Order, iAStarGreedy, ii, jj, a, 4, FOUND, LeafAStarGreedy);
                                        Do = true;
                                    }
                                }

                            }
                        }

                    }
                }//);
                /*if (tHA.Count > 1)
                {
                    var array = Task.Factory.StartNew(() => Parallel.ForEach(tHA, items => Task.WaitAll(items)));
                    //array.Start();
                    Task.WaitAll(array);
                }*/
                Object O2 = new Object();
                lock (O2)
                {
                    TaskEnd++;
                }
            }
            //non learning autamata victory leafs
            for (int h = 0; h < CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count && CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy != null; h++)
                CastlesOnTable[ik].WinOcuuredatChiled += SumOfObjects(CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy[h], Order);
            for (int h = 0; h < CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy.Count && CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy != null; h++)
                CastlesOnTable[ik].LoseOcuuredatChiled += SumMinusOfObjects(CastlesOnTable[ik].CastleThinkingQuantum[0].AStarGreedy[h], Order);
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeCastle:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        //collection objects calling full game specific game 
        bool FullGameThinkingQuantumTreeCastleGray(Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {
                ThinkingQuantumAllowed[3] = true;

                //Castle.

                Parallel.For(0, CastleMidle, ik =>
                //for (var ik = 0; ik < CastleMidle; ik++)
                {
                    if (CastlesOnTable != null && CastlesOnTable[ik] != null && CastlesOnTable[ik].CastleThinkingQuantum != null && CastlesOnTable[ik].CastleThinkingQuantum[0] != null
                        )
                    {
                        Object O = new Object();
                        lock (O)
                        {
                            Do = FullGameThinkingQuantumTreeCastle(ik, a, Order, iAStarGreedy, ii, jj, ik1, j1, FOUND, LeafAStarGreedy);
                        }
                    }
                });
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeCastleGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        bool FullGameThinkingQuantumTreeMinister(int ik, Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {
                if (ReturnFullGameThinkingTreeIligalSemaphore(ik, 5))
                    return false;

                //semaphore
                var array = Task.Factory.StartNew(() => ReturnFullGameThinkingQuantumTreeSemaphoreAS(Order, iAStarGreedy, ik, 5));
                array.Wait();


                Object OOOO = new Object();
                lock (OOOO)
                {


                    //when search finished stop and return
                    if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                        return false;



                }

                ////Parallel.For(0, MinisterOnTable[ik].MinisterThinkingQuantum[0].TableListMinister.Count, j =>
                //operational computation secxistence
                for (var j = 0; j < MinisterOnTable[ik].MinisterThinkingQuantum[0].TableListMinister.Count; j++)
                {
                    Object OOOOO = new Object();
                    lock (OOOOO)
                    {

                        if (IsSupHuTrue(ik, j, 0, 5))
                            continue;
                        //when search finished stop and return
                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                            return false;

                    }
                    Object ooo = new Object();
                    lock (ooo)
                    {
                        //when node have kings dangoures ignore and continue.
                        if (CheckeHuristci(MinisterOnTable[ik].MinisterThinkingQuantum[0].TableListMinister[j], Order, ik, j, 0))
                            continue;

                        //sereved continuce
                        if (MinisterOnTable[ik].MinisterThinkingQuantum[0].IsSupHu[j])
                            continue;




                        //self do
                        if (AllDraw.OrderPlate == Order)
                        {
                            //when certification for continued of code satisfied
                            if (ReturnConsiderationOfPermitForValidationOfLearningInFullGameThinkingQuantumTree(ik, 5, true, j)
                            )
                            {

                                //when blitz game (limited game)
                                if (AllDraw.Blitz)
                                {
                                    //when do permite
                                    if (Index[4] != -1)
                                    {
                                        //object kind semaphore
                                        if (ik != Index[4])
                                        {
                                            //satisfied of created deeper one
                                            BlitzNotValidFullGameThinkingQuantumTreePartOne(ik, Order, 5);
                                            continue;
                                        }
                                        else
                                             if (j != jindex[4])

                                        {
                                            //satisfied of created deeper tow
                                            BlitzNotValidFullGameThinkingQuantumTreePartTow(ik, Order, 5);
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(ik, Order, 5);
                                        continue;
                                    }
                                }
                                Object O3 = new Object();
                                lock (O3)
                                {
                                    //initiate for satisfied full game primary conditions
                                    FullGameThinkingQuantumTreeInitialization(ik, j, Order, 5);
                                }
                                //MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, ii, jj, a, MinisterOnTable[ik].MinisterThinkingQuantum[0].TableListMinister[j], Order, false,ref HaveKilled);
                                //ParameterizedThreadStart start = new ParameterizedThreadStart(MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt);
                                //when deeper is valid
                                if (MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count > 0)
                                {
                                    Object O = new Object();
                                    lock (O)
                                    {
                                        //do deeper
                                        OpOfFullGameThinkingQuantumTree(ik, j, Order, iAStarGreedy, ii, jj, a, 5, FOUND, LeafAStarGreedy);
                                        Do = true;

                                    }

                                }
                            }
                        }
                        else
                        {
                            //when certification for continued of code satisfied
                            if (ReturnConsiderationOfPermitForValidationOfLearningInFullGameThinkingQuantumTree(ik, 5, false, j)

                            )
                            {

                                //when blitz game (limited game)
                                if (AllDraw.Blitz)
                                {
                                    //when do permite
                                    if (Index[4] != -1)
                                    {
                                        //object kind semaphore
                                        if (ik != Index[4])
                                        {
                                            //satisfied of created deeper one
                                            BlitzNotValidFullGameThinkingQuantumTreePartOne(ik, Order, 5);
                                            continue;
                                        }
                                        else
                                             if (j != jindex[4])

                                        {
                                            //satisfied of created deeper tow
                                            BlitzNotValidFullGameThinkingQuantumTreePartTow(ik, Order, 5);
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(ik, Order, 5);
                                        continue;
                                    }
                                }
                                Object O3 = new Object();
                                lock (O3)
                                {
                                    //initiate for satisfied full game primary conditions
                                    FullGameThinkingQuantumTreeInitialization(ik, j, Order, 5);
                                }
                                //MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, ii, jj, a, MinisterOnTable[ik].MinisterThinkingQuantum[0].TableListMinister[j], Order, false,ref HaveKilled);
                                //ParameterizedThreadStart start = new ParameterizedThreadStart(MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy[MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt);
                                if (MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count > 0)
                                {
                                    Object O = new Object();
                                    lock (O)
                                    {
                                        //do deeper
                                        OpOfFullGameThinkingQuantumTree(ik, j, Order, iAStarGreedy, ii, jj, a, 5, FOUND, LeafAStarGreedy);
                                        Do = true;

                                    }

                                }

                            }
                        }

                    }
                }//);


                Object O2 = new Object();
                lock (O2)
                {
                    TaskEnd++;
                }
            }
            //non learning autamata victory leafs
            for (int h = 0; h < MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count && MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy != null; h++)
                MinisterOnTable[ik].WinOcuuredatChiled += SumOfObjects(MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy[h], Order);
            //non learning autamata victom leafs
            for (int h = 0; h < MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy.Count && MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy != null; h++)
                MinisterOnTable[ik].LoseOcuuredatChiled += SumMinusOfObjects(MinisterOnTable[ik].MinisterThinkingQuantum[0].AStarGreedy[h], Order);
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeMinister:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        //collection objects calling full game specific game 
        bool FullGameThinkingQuantumTreeMinisterGray(Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {
                ThinkingQuantumAllowed[4] = true;

                //Minister.

                Parallel.For(0, MinisterMidle, ik =>
                //for (var ik = 0; ik < MinisterMidle; ik++)
                {
                    if (MinisterOnTable != null && MinisterOnTable[ik] != null && MinisterOnTable[ik].MinisterThinkingQuantum != null && MinisterOnTable[ik].MinisterThinkingQuantum[0] != null
                        )
                    {
                        Object O = new Object();
                        lock (O)
                        {
                            Do = FullGameThinkingQuantumTreeMinister(ik, a, Order, iAStarGreedy, ii, jj, ik1, j1, FOUND, LeafAStarGreedy);
                        }
                    }
                });
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeMinisterGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        bool FullGameThinkingQuantumTreeKing(int ik, Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {
                if (ReturnFullGameThinkingTreeIligalSemaphore(ik, 6))
                    return false;

                //semaphore
                var array = Task.Factory.StartNew(() => ReturnFullGameThinkingQuantumTreeSemaphoreAS(Order, iAStarGreedy, ik, 6));
                array.Wait();


                Object OOOO = new Object();
                lock (OOOO)
                {


                    //when search finished stop and return
                    if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                        return false;




                }

                if (KingOnTable[ik].KingThinkingQuantum[0].TableListKing.Count == 0)
                    return Do;
                // //Parallel.For(0, KingOnTable[ik].KingThinkingQuantum[0].TableListKing.Count, j =>
                //operational computation secxistence
                for (var j = 0; j < KingOnTable[ik].KingThinkingQuantum[0].TableListKing.Count; j++)
                {
                    Object OOOOO = new Object();
                    lock (OOOOO)
                    {
                        if (IsSupHuTrue(ik, j, 0, 6))
                            continue;

                        //when search finished stop and return
                        if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                            return false;

                    }
                    Object ooo = new Object();
                    lock (ooo)
                    {
                        //when node have kings dangoures ignore and continue.
                        if (CheckeHuristci(KingOnTable[ik].KingThinkingQuantum[0].TableListKing[j], Order, ik, j, 0))
                            continue;

                        //sereved continuce
                        if (KingOnTable[ik].KingThinkingQuantum[0].IsSupHu[j])
                            continue;

                        //when is self
                        if (AllDraw.OrderPlate == Order)
                        {
                            //when certification for continued of code satisfied
                            if (ReturnConsiderationOfPermitForValidationOfLearningInFullGameThinkingQuantumTree(ik, 6, true, j)
                            )
                            {
                                //when blitz game (limited game)
                                if (AllDraw.Blitz)
                                {

                                    //when do permite
                                    if (Index[5] != -1)
                                    {
                                        //object kind semaphore
                                        if (ik != Index[5])
                                        {
                                            //satisfied of created deeper one
                                            BlitzNotValidFullGameThinkingQuantumTreePartOne(ik, Order, 6);
                                            continue;
                                        }
                                        else
                                             if (j != jindex[5])
                                        {
                                            //satisfied of created deeper tow
                                            BlitzNotValidFullGameThinkingQuantumTreePartTow(ik, Order, 6);
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(ik, Order, 6);
                                        continue;
                                    }

                                }
                                Object O3 = new Object();
                                lock (O3)
                                {
                                    //initiate for satisfied full game primary conditions
                                    FullGameThinkingQuantumTreeInitialization(ik, j, Order, 6);
                                }
                                //KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy[KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, ii, jj, a, KingOnTable[ik].KingThinkingQuantum[0].TableListKing[j], Order, false,ref HaveKilled);
                                //ParameterizedThreadStart start = new ParameterizedThreadStart(KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy[KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt);
                                //when deeper is valid
                                if (KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count > 0)
                                {
                                    Object O = new Object();
                                    lock (O)
                                    {
                                        //do deeper
                                        OpOfFullGameThinkingQuantumTree(ik, j, Order, iAStarGreedy, ii, jj, a, 6, FOUND, LeafAStarGreedy);
                                        Do = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            //when certification for continued of code satisfied
                            if (ReturnConsiderationOfPermitForValidationOfLearningInFullGameThinkingQuantumTree(ik, 6, false, j)

                            )
                            {
                                //when blitz game (limited game)
                                if (AllDraw.Blitz)
                                {
                                    //when do permite
                                    if (Index[5] != -1)
                                    {
                                        //object kind semaphore
                                        if (ik != Index[5])
                                        {
                                            //satisfied of created deeper one
                                            BlitzNotValidFullGameThinkingQuantumTreePartOne(ik, Order, 6);
                                            continue;
                                        }
                                        else
                                             if (j != jindex[5])
                                        {
                                            //satisfied of created deeper tow
                                            BlitzNotValidFullGameThinkingQuantumTreePartTow(ik, Order, 6);
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //satisfied of created deeper three
                                        BlitzNotValidFullGameThinkingQuantumTreePartThree(ik, Order, 6);
                                        continue;
                                    }

                                }
                                Object O3 = new Object();
                                lock (O3)
                                {
                                    //initiate for satisfied full game primary conditions
                                    FullGameThinkingQuantumTreeInitialization(ik, j, Order, 6);
                                }
                                //KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy[KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt(iAStarGreedy, ii, jj, a, KingOnTable[ik].KingThinkingQuantum[0].TableListKing[j], Order, false,ref HaveKilled);
                                //ParameterizedThreadStart start = new ParameterizedThreadStart(KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy[KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count - 1].InitiateAStarGreedyt);
                                if (KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count > 0)
                                {
                                    Object O = new Object();
                                    lock (O)
                                    {
                                        OpOfFullGameThinkingQuantumTree(ik, j, Order, iAStarGreedy, ii, jj, a, 6, FOUND, LeafAStarGreedy);
                                        Do = true;
                                    }
                                }
                            }
                        }

                    }
                }//);


                Object O2 = new Object();
                lock (O2)
                {
                    TaskEnd++;
                }
            }
            //non learning autamata victory leafs
            for (int h = 0; h < KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count && KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy != null; h++)
                KingOnTable[ik].WinOcuuredatChiled += SumOfObjects(KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy[h], Order);
            //non learning autamata victom leafs
            for (int h = 0; h < KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy.Count && KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy != null; h++)
                KingOnTable[ik].LoseOcuuredatChiled += SumMinusOfObjects(KingOnTable[ik].KingThinkingQuantum[0].AStarGreedy[h], Order);
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeKing:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        //collection objects calling full game specific game 
        bool FullGameThinkingQuantumTreeKingGray(Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {
                //int ik;
                //King.
                ThinkingQuantumAllowed[5] = true;

                Parallel.For(0, KingMidle, ik =>
                //for (var ik = 0; ik < KingMidle; ik++)
                {
                    if (KingOnTable != null && KingOnTable[ik] != null && KingOnTable[ik].KingThinkingQuantum != null && KingOnTable[ik].KingThinkingQuantum[0] != null
                        )
                    {
                        Object O = new Object();
                        lock (O)
                        {
                            Do = FullGameThinkingQuantumTreeKing(ik, a, Order, iAStarGreedy, ii, jj, ik1, j1, FOUND, LeafAStarGreedy);
                        }
                    }
                });
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeKingGray:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        //collection objects calling full game specific game 
        bool FullGameThinkingQuantumTreeSoldierBrown(Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {

                ThinkingQuantumAllowed[6] = true;

                Parallel.For(SodierMidle, SodierHigh, ik =>
                //for (var ik = SodierMidle; ik < SodierHigh; ik++)
                {
                    if (SolderesOnTable != null && SolderesOnTable[ik] != null && SolderesOnTable[ik].SoldierThinkingQuantum != null && SolderesOnTable[ik].SoldierThinkingQuantum[0] != null
                        )
                    {
                        //Soldier.
                        Object O = new Object();
                        lock (O)
                        {
                            Do = FullGameThinkingQuantumTreeSoldier(ik, a, Order, iAStarGreedy, ii, jj, ik1, j1, FOUND, LeafAStarGreedy);
                        }
                    }
                });
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeSoldierBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        //collection objects calling full game specific game 
        bool FullGameThinkingQuantumTreeElephantBrown(Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {
                ThinkingQuantumAllowed[7] = true;

                //Elephant

                Parallel.For(ElefantMidle, ElefantHigh, ik =>
                //for (var ik = ElefantMidle; ik < ElefantHigh; ik++)
                {
                    if (ElephantOnTable != null && ElephantOnTable[ik] != null && ElephantOnTable[ik].ElefantThinkingQuantum != null && ElephantOnTable[ik].ElefantThinkingQuantum[0] != null
                        )
                    {
                        Object O = new Object();
                        lock (O)
                        {
                            Do = FullGameThinkingQuantumTreeElephant(ik, a, Order, iAStarGreedy, ii, jj, ik1, j1, FOUND, LeafAStarGreedy);
                        }
                    }
                });
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeElephantBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        //collection objects calling full game specific game 
        bool FullGameThinkingQuantumTreeHourseBrown(Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {
                ThinkingQuantumAllowed[8] = true;

                //Hourse.

                Parallel.For(HourseMidle, HourseHight, ik =>
                //for (var ik = HourseMidle; ik < HourseHight; ik++)
                {
                    if (HoursesOnTable != null && HoursesOnTable[ik] != null && HoursesOnTable[ik].HourseThinkingQuantum != null && HoursesOnTable[ik].HourseThinkingQuantum[0] != null
                        )
                    {
                        Object O = new Object();
                        lock (O)
                        {
                            Do = FullGameThinkingQuantumTreeHourse(ik, a, Order, iAStarGreedy, ii, jj, ik1, j1, FOUND, LeafAStarGreedy);
                        }
                    }
                });
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeHourseBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        //collection objects calling full game specific game 
        bool FullGameThinkingQuantumTreeCastleBrown(Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {
                ThinkingQuantumAllowed[9] = true;

                //Castles.

                Parallel.For(CastleMidle, CastleHigh, ik =>
                //for (var ik = CastleMidle; ik < CastleHigh; ik++)
                {
                    if (CastlesOnTable != null && CastlesOnTable[ik] != null && CastlesOnTable[ik].CastleThinkingQuantum != null && CastlesOnTable[ik].CastleThinkingQuantum[0] != null
                        )
                    {
                        Object O = new Object();
                        lock (O)
                        {
                            Do = FullGameThinkingQuantumTreeCastle(ik, a, Order, iAStarGreedy, ii, jj, ik1, j1, FOUND, LeafAStarGreedy);
                        }
                    }
                });
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeCastleBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        //collection objects calling full game specific game 
        bool FullGameThinkingQuantumTreeMinisterBrown(Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {
                ThinkingQuantumAllowed[10] = true;

                //Minister.

                Parallel.For(MinisterMidle, MinisterHigh, ik =>
                //for (var ik = MinisterMidle; ik < MinisterHigh; ik++)
                {
                    if (MinisterOnTable != null && MinisterOnTable[ik] != null && MinisterOnTable[ik].MinisterThinkingQuantum != null && MinisterOnTable[ik].MinisterThinkingQuantum[0] != null
                        )
                    {
                        Object O = new Object();
                        lock (O)
                        {
                            Do = FullGameThinkingQuantumTreeMinister(ik, a, Order, iAStarGreedy, ii, jj, ik1, j1, FOUND, LeafAStarGreedy);
                        }
                    }
                });
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeMinisterBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        //collection objects calling full game specific game 
        bool FullGameThinkingQuantumTreeKingBrown(Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Do = false;
            Object O1 = new Object();
            lock (O1)
            {
                ThinkingQuantumAllowed[11] = true;

                //King.

                Parallel.For(KingMidle, KingHigh, ik =>
                //for (var ik = KingMidle; ik < KingHigh; ik++)
                {

                    if (KingOnTable != null && KingOnTable[ik] != null && KingOnTable[ik].KingThinkingQuantum != null && KingOnTable[ik].KingThinkingQuantum[0] != null
                        )
                    {
                        Object O = new Object();
                        lock (O)
                        {
                            Do = FullGameThinkingQuantumTreeKing(ik, a, Order, iAStarGreedy, ii, jj, ik1, j1, FOUND, LeafAStarGreedy);
                        }
                    }

                });
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeKingBrown:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        //full game main method for deeper decicion and making
        public bool FullGameThinkingQuantumTreeGray(Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            Object OOOOO = new Object();
            lock (OOOOO)
            {
                bool Do = false;
                int DummyOrder = Order;
                int DummyCurrentOrder = ChessRules.CurrentOrder;

                var output = Task.Factory.StartNew(() =>
                {
                    Parallel.Invoke(() =>

                    {
                        Object O1 = new Object();
                        lock (O1)
                        {
                            if (Order == 1)
                                a = Color.Gray;
                            else
                                a = Color.Brown;
                            int ii1 = ii, jj1 = jj, ik11 = ik1, j11 = j1;
                            int Ord1 = OrderP;
                            Color a1 = a;
                            int iAStarGreedy1 = iAStarGreedy;
                            Do |= this.FullGameThinkingQuantumTreeSoldierGray(a1, Ord1, iAStarGreedy1, ii1, jj1, ik11, j11, FOUND, LeafAStarGreedy);
                            //var array1 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeSoldierGray(a1, Ord1, iAStarGreedy1, ii1, jj1, ik11, j11, FOUND));
                            //array1.Start();
                            //Object tttt1 = new Object(); lock (tttt1) { TH.Add(array1); }

                            Order = DummyOrder;
                            ChessRules.CurrentOrder = DummyCurrentOrder;
                        }
                    }, () =>
                    {
                        Object O1 = new Object();
                        lock (O1)
                        {
                            if (Order == 1)
                                a = Color.Gray;
                            else
                                a = Color.Brown;
                            //Order *= -1;
                            //ChessRules.CurrentOrder *= -1;

                            int ii2 = ii, jj2 = jj, ik12 = ik1, j12 = j1;
                            int Ord2 = Order;
                            Color a2 = a;
                            int iAStarGreedy2 = iAStarGreedy;
                            Do |= this.FullGameThinkingQuantumTreeElephantGray(a2, Ord2, iAStarGreedy2, ii2, jj2, ik12, j12, FOUND, LeafAStarGreedy);
                            //var array2 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeElephantGray(a2, Ord2, iAStarGreedy2, ii2, jj2, ik12, j12, FOUND));
                            //array2.Start();
                            //Object tttt2 = new Object(); lock (tttt2) { TH.Add(array2); }

                            //Initiatye Variables.
                            Order = DummyOrder;
                            ChessRules.CurrentOrder = DummyCurrentOrder;
                        }

                    }, () =>
                    {
                        Object O1 = new Object();
                        lock (O1)
                        {
                            if (Order == 1)
                                a = Color.Gray;
                            else
                                a = Color.Brown;
                            //Order *= -1;
                            //ChessRules.CurrentOrder *= -1;

                            int ii3 = ii, jj3 = jj, ik13 = ik1, j13 = j1;
                            int Ord3 = Order;
                            Color a3 = a;
                            int iAStarGreedy3 = iAStarGreedy;
                            Do |= this.FullGameThinkingQuantumTreeHourseGray(a3, Ord3, iAStarGreedy3, ii3, jj3, ik13, j13, FOUND, LeafAStarGreedy);
                            //var array3 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeHourseGray(a3, Ord3, iAStarGreedy3, ii3, jj3, ik13, j13, FOUND));
                            ///array3.Start();
                            //Object tttt3 = new Object(); lock (tttt3) { TH.Add(array3); }

                            //Initiatye Variables.
                            Order = DummyOrder;
                            ChessRules.CurrentOrder = DummyCurrentOrder;
                        }
                    }, () =>
                    {
                        Object O1 = new Object();
                        lock (O1)
                        {
                            if (Order == 1)
                                a = Color.Gray;
                            else
                                a = Color.Brown;
                            //Order *= -1;
                            //ChessRules.CurrentOrder *= -1;

                            int ii4 = ii, jj4 = jj, ik14 = ik1, j14 = j1;
                            int Ord4 = Order;
                            Color a4 = a;
                            int iAStarGreedy4 = iAStarGreedy;
                            Do |= this.FullGameThinkingQuantumTreeCastleGray(a4, Ord4, iAStarGreedy4, ii4, jj4, ik14, j14, FOUND, LeafAStarGreedy);
                            //var array4 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeCastleGray(a4, Ord4, iAStarGreedy4, ii4, jj4, ik14, j14, FOUND));
                            //array4.Start();
                            //Object tttt4 = new Object(); lock (tttt4) { TH.Add(array4); }

                            //Initiatye Variables.
                            Order = DummyOrder;
                            ChessRules.CurrentOrder = DummyCurrentOrder;
                        }
                    }, () =>
                    {
                        Object O1 = new Object();
                        lock (O1)
                        {
                            if (Order == 1)
                                a = Color.Gray;
                            else
                                a = Color.Brown;
                            //Order *= -1;
                            //ChessRules.CurrentOrder *= -1;
                            int ii5 = ii, jj5 = jj, ik15 = ik1, j15 = j1;
                            int Ord5 = Order;
                            Color a5 = a;
                            int iAStarGreedy5 = iAStarGreedy;
                            Do |= this.FullGameThinkingQuantumTreeMinisterGray(a5, Ord5, iAStarGreedy5, ii5, jj5, ik15, j15, FOUND, LeafAStarGreedy);
                            //var array5 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeMinisterGray(a5, Ord5, iAStarGreedy5, ii5, jj5, ik15, j15, FOUND));
                            //array5.Start();
                            //Object tttt5 = new Object(); lock (tttt5) { TH.Add(array5); }

                            //Initiatye Variables.
                            Order = DummyOrder;
                            ChessRules.CurrentOrder = DummyCurrentOrder;
                        }
                    }, () =>
                    {
                        Object O1 = new Object();
                        lock (O1)
                        {
                            if (Order == 1)
                                a = Color.Gray;
                            else
                                a = Color.Brown;
                            //Order *= -1;
                            //ChessRules.CurrentOrder *= -1;
                            int ii6 = ii, jj6 = jj, ik16 = ik1, j16 = j1;
                            int Ord6 = Order;
                            Color a6 = a;
                            int iAStarGreedy6 = iAStarGreedy;
                            Do |= this.FullGameThinkingQuantumTreeKingGray(a6, Ord6, iAStarGreedy6, ii6, jj6, ik16, j16, FOUND, LeafAStarGreedy);
                            //var array6 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeKingGray(a6, Ord6, iAStarGreedy6, ii6, jj6, ik16, j16, FOUND));
                            //array6.Start();
                            //Object tttt6 = new Object(); lock (tttt6) { TH.Add(array6); }
                            Order = DummyOrder;
                            ChessRules.CurrentOrder = DummyCurrentOrder;
                        }
                    });
                });

                Parallel.ForEach(TH, items => Task.WaitAll(items));
                output.Wait();
                return Do;
            }
        }
        public bool FullGameThinkingQuantumTreeBrown(Color a, int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            Object OOOOO = new Object();
            lock (OOOOO)
            {
                bool Do = false;
                int DummyOrder = Order;
                int DummyCurrentOrder = ChessRules.CurrentOrder;

                var output = Task.Factory.StartNew(() =>
                {
                    Parallel.Invoke(() =>
                    {
                        Object O1 = new Object();
                        lock (O1)
                        {
                            if (Order == 1)
                                a = Color.Gray;
                            else
                                a = Color.Brown;
                            int ii1 = ii, jj1 = jj, ik11 = ik1, j11 = j1;
                            int Ord1 = OrderP;
                            Color a1 = a;
                            int iAStarGreedy1 = iAStarGreedy;
                            Do |= this.FullGameThinkingQuantumTreeSoldierBrown(a1, Ord1, iAStarGreedy1, ii1, jj1, ik11, j11, FOUND, LeafAStarGreedy);
                            //var array1 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeSoldierBrown(a1, Ord1, iAStarGreedy1, ii1, jj1, ik11, j11, FOUND));
                            //array1.Start();
                            //Object tttt1 = new Object(); lock (tttt1) { TH.Add(array1); }

                            Order = DummyOrder;
                            ChessRules.CurrentOrder = DummyCurrentOrder;
                        }
                    }, () =>
                    {
                        Object O1 = new Object();
                        lock (O1)
                        {
                            if (Order == 1)
                                a = Color.Gray;
                            else
                                a = Color.Brown;
                            //Order *= -1;
                            //ChessRules.CurrentOrder *= -1;

                            int ii2 = ii, jj2 = jj, ik12 = ik1, j12 = j1;
                            int Ord2 = Order;
                            Color a2 = a;
                            int iAStarGreedy2 = iAStarGreedy;
                            Do |= this.FullGameThinkingQuantumTreeElephantBrown(a2, Ord2, iAStarGreedy2, ii2, jj2, ik12, j12, FOUND, LeafAStarGreedy);
                            //var array2 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeElephantBrown(a2, Ord2, iAStarGreedy2, ii2, jj2, ik12, j12, FOUND));
                            //array2.Start();
                            //Object tttt2 = new Object(); lock (tttt2) { TH.Add(array2); }

                            //Initiatye Variables.
                            Order = DummyOrder;
                            ChessRules.CurrentOrder = DummyCurrentOrder;
                        }
                    }, () =>
                    {
                        Object O1 = new Object();
                        lock (O1)
                        {
                            if (Order == 1)
                                a = Color.Gray;
                            else
                                a = Color.Brown;
                            //Order *= -1;
                            //ChessRules.CurrentOrder *= -1;

                            int ii3 = ii, jj3 = jj, ik13 = ik1, j13 = j1;
                            int Ord3 = Order;
                            Color a3 = a;
                            int iAStarGreedy3 = iAStarGreedy;
                            Do |= this.FullGameThinkingQuantumTreeHourseBrown(a3, Ord3, iAStarGreedy3, ii3, jj3, ik13, j13, FOUND, LeafAStarGreedy);
                            //var array3 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeHourseBrown(a3, Ord3, iAStarGreedy3, ii3, jj3, ik13, j13, FOUND));
                            ///array3.Start();
                            //Object tttt3 = new Object(); lock (tttt3) { TH.Add(array3); }

                            //Initiatye Variables.
                            Order = DummyOrder;
                            ChessRules.CurrentOrder = DummyCurrentOrder;
                        }
                    }, () =>
                    {
                        Object O1 = new Object();
                        lock (O1)
                        {
                            if (Order == 1)
                                a = Color.Gray;
                            else
                                a = Color.Brown;
                            //Order *= -1;
                            //ChessRules.CurrentOrder *= -1;

                            int ii4 = ii, jj4 = jj, ik14 = ik1, j14 = j1;
                            int Ord4 = Order;
                            Color a4 = a;
                            int iAStarGreedy4 = iAStarGreedy;
                            Do |= this.FullGameThinkingQuantumTreeCastleBrown(a4, Ord4, iAStarGreedy4, ii4, jj4, ik14, j14, FOUND, LeafAStarGreedy);
                            //var array4 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeCastleBrown(a4, Ord4, iAStarGreedy4, ii4, jj4, ik14, j14, FOUND));
                            //array4.Start();
                            //Object tttt4 = new Object(); lock (tttt4) { TH.Add(array4); }

                            //Initiatye Variables.
                            Order = DummyOrder;
                            ChessRules.CurrentOrder = DummyCurrentOrder;
                        }
                    }, () =>
                    {
                        Object O1 = new Object();
                        lock (O1)
                        {
                            if (Order == 1)
                                a = Color.Gray;
                            else
                                a = Color.Brown;
                            //Order *= -1;
                            //ChessRules.CurrentOrder *= -1;
                            int ii5 = ii, jj5 = jj, ik15 = ik1, j15 = j1;
                            int Ord5 = Order;
                            Color a5 = a;
                            int iAStarGreedy5 = iAStarGreedy;
                            Do |= this.FullGameThinkingQuantumTreeMinisterBrown(a5, Ord5, iAStarGreedy5, ii5, jj5, ik15, j15, FOUND, LeafAStarGreedy);
                            //var array5 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeMinisterBrown(a5, Ord5, iAStarGreedy5, ii5, jj5, ik15, j15, FOUND));
                            //array5.Start();
                            //Object tttt5 = new Object(); lock (tttt5) { TH.Add(array5); }

                            //Initiatye Variables.
                            Order = DummyOrder;
                            ChessRules.CurrentOrder = DummyCurrentOrder;
                        }
                    }, () =>
                    {
                        Object O1 = new Object();
                        lock (O1)
                        {
                            if (Order == 1)
                                a = Color.Gray;
                            else
                                a = Color.Brown;
                            //Order *= -1;
                            //ChessRules.CurrentOrder *= -1;
                            int ii6 = ii, jj6 = jj, ik16 = ik1, j16 = j1;
                            int Ord6 = Order;
                            Color a6 = a;
                            int iAStarGreedy6 = iAStarGreedy;
                            Do |= this.FullGameThinkingQuantumTreeKingBrown(a6, Ord6, iAStarGreedy6, ii6, jj6, ik16, j16, FOUND, LeafAStarGreedy);
                            //var array6 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeKingBrown(a6, Ord6, iAStarGreedy6, ii6, jj6, ik16, j16, FOUND));
                            //array6.Start();
                            //Object tttt6 = new Object(); lock (tttt6) { TH.Add(array6); }
                            Order = DummyOrder;
                            ChessRules.CurrentOrder = DummyCurrentOrder;
                        }
                    });
                });

                Parallel.ForEach(TH, items => Task.WaitAll(items));
                output.Wait();
                return Do;
            }
        }
        //full game main method for deeper decicion and making
        public bool FullGameThinkingQuantumTree(int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;

            bool Do = false;
            //Initiatye Variables.
            int DummyOrder = Order;
            int DummyCurrentOrder = ChessRules.CurrentOrder;

            Color a;
            if (Order == 1)
                a = Color.Gray;
            else
                a = Color.Brown;

            Object OOOOO = new Object();
            lock (OOOOO)
            {

                //when search finished stop and return
                if (FullBoundryConditions(CurrentAStarGredyMax, Order, iAStarGreedy))
                    return false;

            }
            Object O = new Object();
            lock (O)
            {
                //when blitz game (limited game)
                if (AllDraw.Blitz)
                    FullGameMakimgBlitz(ref Index, ref jindex, Order, LeafAStarGreedy);
            }
            /*Object OO = new Object();
            lock (OO)
            {

                if (Order == -1)
                {
                    //Index[0] = -1;
                    //Soldeir
                    //Initiatye Variables.
                    int ii1 = ii, jj1 = jj, ik11 = ik1, j11 = j1;
                    int Ord1 = OrderP;
                    Color a1 = a;
                    int iAStarGreedy1 = iAStarGreedy;
                    var array1 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeSoldierGray(a1, Ord1, iAStarGreedy1, ii1, jj1, ik11, j11, FOUND));
                    //array1.Start();
                    //Object tttt1 = new Object(); lock (tttt1) { TH.Add(array1); }

                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    if (Order== 1)
                        a = Color.Gray;
                    else
                        a = Color.Brown;
                    //Order *= -1;
                    //ChessRules.CurrentOrder *= -1;

                    int ii2 = ii, jj2 = jj, ik12 = ik1, j12 = j1;
                    int Ord2 = Order;
                    Color a2 = a;
                    int iAStarGreedy2 = iAStarGreedy;
                    var array2 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeElephantGray(a2, Ord2, iAStarGreedy2, ii2, jj2, ik12, j12, FOUND));
                    //array2.Start();
                   //Object tttt2 = new Object(); lock (tttt2) { TH.Add(array2); }

                    //Initiatye Variables.
                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    if (Order== 1)
                        a = Color.Gray;
                    else
                        a = Color.Brown;
                    //Order *= -1;
                    //ChessRules.CurrentOrder *= -1;

                    int ii3 = ii, jj3 = jj, ik13 = ik1, j13 = j1;
                    int Ord3 = Order;
                    Color a3 = a;
                    int iAStarGreedy3 = iAStarGreedy;
                    var array3 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeHourseGray(a3, Ord3, iAStarGreedy3, ii3, jj3, ik13, j13, FOUND));
                    ///array3.Start();
                    //Object tttt3 = new Object(); lock (tttt3) { TH.Add(array3); }

                    //Initiatye Variables.
                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    if (Order== 1)
                        a = Color.Gray;
                    else
                        a = Color.Brown;
                    //Order *= -1;
                    //ChessRules.CurrentOrder *= -1;

                    int ii4 = ii, jj4 = jj, ik14 = ik1, j14 = j1;
                    int Ord4 = Order;
                    Color a4 = a;
                    int iAStarGreedy4 = iAStarGreedy;
                    var array4 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeCastleGray(a4, Ord4, iAStarGreedy4, ii4, jj4, ik14, j14, FOUND));
                    //array4.Start();
                    //Object tttt4 = new Object(); lock (tttt4) { TH.Add(array4); }

                    //Initiatye Variables.
                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    if (Order== 1)
                        a = Color.Gray;
                    else
                        a = Color.Brown;
                    //Order *= -1;
                    //ChessRules.CurrentOrder *= -1;
                    int ii5 = ii, jj5 = jj, ik15 = ik1, j15 = j1;
                    int Ord5 = Order;
                    Color a5 = a;
                    int iAStarGreedy5 = iAStarGreedy;
                    var array5 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeMinisterGray(a5, Ord5, iAStarGreedy5, ii5, jj5, ik15, j15, FOUND));
                    //array5.Start();
                    //Object tttt5 = new Object(); lock (tttt5) { TH.Add(array5); }

                    //Initiatye Variables.
                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    if (Order== 1)
                        a = Color.Gray;
                    else
                        a = Color.Brown;
                    //Order *= -1;
                    //ChessRules.CurrentOrder *= -1;
                    int ii6 = ii, jj6 = jj, ik16 = ik1, j16 = j1;
                    int Ord6 = Order;
                    Color a6 = a;
                    int iAStarGreedy6 = iAStarGreedy;
                    var array6 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeKingGray(a6, Ord6, iAStarGreedy6, ii6, jj6, ik16, j16, FOUND));
                    //array6.Start();
                    //Object tttt6 = new Object(); lock (tttt6) { TH.Add(array6); }

                }
                //For Brown Order Blitz Game Calculate Maximum Table Inclusive AStarGreedy First Game Search.
                else
                {
                    int ii1 = ii, jj1 = jj, ik11 = ik1, j11 = j1;
                    int Ord1 = OrderP;
                    Color a1 = a;
                    int iAStarGreedy1 = iAStarGreedy;
                    var array1 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeSoldierBrown(a1, Ord1, iAStarGreedy1, ii1, jj1, ik11, j11, FOUND));
                    //array1.Start();
                    //Object tttt1 = new Object(); lock (tttt1) { TH.Add(array1); }

                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    if (Order== 1)
                        a = Color.Gray;
                    else
                        a = Color.Brown;
                    //Order *= -1;
                    //ChessRules.CurrentOrder *= -1;

                    int ii2 = ii, jj2 = jj, ik12 = ik1, j12 = j1;
                    int Ord2 = Order;
                    Color a2 = a;
                    int iAStarGreedy2 = iAStarGreedy;
                    var array2 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeElephantBrown(a2, Ord2, iAStarGreedy2, ii2, jj2, ik12, j12, FOUND));
                    //array2.Start();
                   //Object tttt2 = new Object(); lock (tttt2) { TH.Add(array2); }

                    //Initiatye Variables.
                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    if (Order== 1)
                        a = Color.Gray;
                    else
                        a = Color.Brown;
                    //Order *= -1;
                    //ChessRules.CurrentOrder *= -1;

                    int ii3 = ii, jj3 = jj, ik13 = ik1, j13 = j1;
                    int Ord3 = Order;
                    Color a3 = a;
                    int iAStarGreedy3 = iAStarGreedy;
                    var array3 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeHourseBrown(a3, Ord3, iAStarGreedy3, ii3, jj3, ik13, j13, FOUND));
                    ///array3.Start();
                    //Object tttt3 = new Object(); lock (tttt3) { TH.Add(array3); }

                    //Initiatye Variables.
                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    if (Order== 1)
                        a = Color.Gray;
                    else
                        a = Color.Brown;
                    //Order *= -1;
                    //ChessRules.CurrentOrder *= -1;

                    int ii4 = ii, jj4 = jj, ik14 = ik1, j14 = j1;
                    int Ord4 = Order;
                    Color a4 = a;
                    int iAStarGreedy4 = iAStarGreedy;
                    var array4 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeCastleBrown(a4, Ord4, iAStarGreedy4, ii4, jj4, ik14, j14, FOUND));
                    //array4.Start();
                    //Object tttt4 = new Object(); lock (tttt4) { TH.Add(array4); }

                    //Initiatye Variables.
                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    if (Order== 1)
                        a = Color.Gray;
                    else
                        a = Color.Brown;
                    //Order *= -1;
                    //ChessRules.CurrentOrder *= -1;
                    int ii5 = ii, jj5 = jj, ik15 = ik1, j15 = j1;
                    int Ord5 = Order;
                    Color a5 = a;
                    int iAStarGreedy5 = iAStarGreedy;
                    var array5 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeMinisterBrown(a5, Ord5, iAStarGreedy5, ii5, jj5, ik15, j15, FOUND));
                    //array5.Start();
                    //Object tttt5 = new Object(); lock (tttt5) { TH.Add(array5); }

                    //Initiatye Variables.
                    Order = DummyOrder;
                    ChessRules.CurrentOrder = DummyCurrentOrder;


                    if (Order== 1)
                        a = Color.Gray;
                    else
                        a = Color.Brown;
                    //Order *= -1;
                    //ChessRules.CurrentOrder *= -1;
                    int ii6 = ii, jj6 = jj, ik16 = ik1, j16 = j1;
                    int Ord6 = Order;
                    Color a6 = a;
                    int iAStarGreedy6 = iAStarGreedy;
                    var array6 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeKingBrown(a6, Ord6, iAStarGreedy6, ii6, jj6, ik16, j16, FOUND));
                    //array6.Start();
                    //Object tttt6 = new Object(); lock (tttt6) { TH.Add(array6); }
                }
                
            }
            */
            if (TH == null)
                TH = new List<Task>();

            if (Order == 1)
            {
                //Index[0] = -1;
                //Soldeir
                //Initiatye Variables.               
                var array = Task.Factory.StartNew(() => Do = FullGameThinkingQuantumTreeGray(a, Order, iAStarGreedy, ii, jj, ik1, j1, FOUND, LeafAStarGreedy));
                ///array.Start();
                array.Wait();

            }
            //For Brown Order Blitz Game Calculate Maximum Table Inclusive AStarGreedy First Game Search.
            else
            {
                var array = Task.Factory.StartNew(() => Do = FullGameThinkingQuantumTreeBrown(a, Order, iAStarGreedy, ii, jj, ik1, j1, FOUND, LeafAStarGreedy));
                //array.Start();
                array.Wait();
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTree:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        //full game decicion making second method
        bool FullGameThinkingQuantumTreeObject(int Order, int iAStarGreedy, int ii, int jj, int ik1, int j1, bool FOUND, int LeafAStarGreedy)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //
            bool Do = false;
            //Initiatye Variables.
            int DummyOrder = Order;
            int DummyCurrentOrder = ChessRules.CurrentOrder;

            Color a;
            if (Order == 1)
                a = Color.Gray;
            else
                a = Color.Brown;
            ////Order *= -1;
            //Index = -1;
            //jindex = -1;
            //Kind =
            Object O = new Object();
            lock (O)
            {
                //when blitz game (limited game)
                if (AllDraw.Blitz)
                    FullGameMakimgBlitz(ref Index, ref jindex, Order, LeafAStarGreedy);
            }
            if (Order == 1)
            {
                var output = Task.Factory.StartNew(() =>
                Parallel.For(0, MaxGrayMidle(), i =>
                {
                    Parallel.Invoke(() =>

                    {
                        Object ooo = new Object();
                        lock (ooo)
                        {
                            if (i < SodierMidle)
                            {
                                Object O1 = new Object();
                                lock (O1)
                                {
                                    if (Order == 1)
                                        a = Color.Gray;
                                    else
                                        a = Color.Brown;
                                    int ii1 = ii, jj1 = jj, ik11 = ik1, j11 = j1;
                                    int Ord1 = OrderP;
                                    Color a1 = a;
                                    int iAStarGreedy1 = iAStarGreedy;
                                    int i1 = i;
                                    Do |= FullGameThinkingQuantumTreeSoldier(i1, a1, Ord1, iAStarGreedy1, ii1, jj1, ik11, j11, FOUND, LeafAStarGreedy);
                                    //var array1 = Task.Factory.StartNew(() => Do |= this.FullGameThinkingQuantumTreeSoldierGray(a1, Ord1, iAStarGreedy1, ii1, jj1, ik11, j11, FOUND));
                                    //array1.Start();
                                    //Object tttt1 = new Object(); lock (tttt1) { TH.Add(array1); }

                                    Order = DummyOrder;
                                    ChessRules.CurrentOrder = DummyCurrentOrder;
                                }
                            }
                        }
                    }, () =>
                    {
                        Object ooo = new Object();
                        lock (ooo)
                        {

                            if (i < ElefantMidle)
                            {
                                Object O1 = new Object();
                                lock (O1)
                                {
                                    if (Order == 1)
                                        a = Color.Gray;
                                    else
                                        a = Color.Brown;
                                    //Order *= -1;
                                    //ChessRules.CurrentOrder *= -1;

                                    int ii2 = ii, jj2 = jj, ik12 = ik1, j12 = j1;
                                    int Ord2 = Order;
                                    Color a2 = a;
                                    int iAStarGreedy2 = iAStarGreedy;
                                    int i2 = i;
                                    Do |= this.FullGameThinkingQuantumTreeElephant(i2, a2, Ord2, iAStarGreedy2, ii2, jj2, ik12, j12, FOUND, LeafAStarGreedy);
                                    //Initiatye Variables.
                                    Order = DummyOrder;
                                    ChessRules.CurrentOrder = DummyCurrentOrder;
                                }
                            }
                        }
                    }, () =>
                    {
                        Object ooo = new Object();
                        lock (ooo)
                        {

                            if (i < HourseMidle)
                            {
                                Object O1 = new Object();
                                lock (O1)
                                {
                                    if (Order == 1)
                                        a = Color.Gray;
                                    else
                                        a = Color.Brown;
                                    //Order *= -1;
                                    //ChessRules.CurrentOrder *= -1;

                                    int ii3 = ii, jj3 = jj, ik13 = ik1, j13 = j1;
                                    int Ord3 = Order;
                                    Color a3 = a;
                                    int iAStarGreedy3 = iAStarGreedy;
                                    int i3 = i;
                                    Do |= this.FullGameThinkingQuantumTreeHourse(i3, a3, Ord3, iAStarGreedy3, ii3, jj3, ik13, j13, FOUND, LeafAStarGreedy);
                                    //Initiatye Variables.
                                    Order = DummyOrder;
                                    ChessRules.CurrentOrder = DummyCurrentOrder;
                                }
                            }
                        }
                    }, () =>
                    {
                        Object ooo = new Object();
                        lock (ooo)
                        {

                            if (i < CastleMidle)
                            {
                                Object O1 = new Object();
                                lock (O1)
                                {
                                    if (Order == 1)
                                        a = Color.Gray;
                                    else
                                        a = Color.Brown;
                                    //Order *= -1;
                                    //ChessRules.CurrentOrder *= -1;

                                    int ii4 = ii, jj4 = jj, ik14 = ik1, j14 = j1;
                                    int Ord4 = Order;
                                    Color a4 = a;
                                    int iAStarGreedy4 = iAStarGreedy;
                                    int i4 = i;
                                    Do |= this.FullGameThinkingQuantumTreeCastle(i4, a4, Ord4, iAStarGreedy4, ii4, jj4, ik14, j14, FOUND, LeafAStarGreedy);
                                    //Initiatye Variables.
                                    Order = DummyOrder;
                                    ChessRules.CurrentOrder = DummyCurrentOrder;
                                }
                            }
                        }
                    }, () =>
                    {
                        Object ooo = new Object();
                        lock (ooo)
                        {

                            if (i < MinisterMidle)
                            {
                                Object O1 = new Object();
                                lock (O1)
                                {
                                    if (Order == 1)
                                        a = Color.Gray;
                                    else
                                        a = Color.Brown;
                                    //Order *= -1;
                                    //ChessRules.CurrentOrder *= -1;
                                    int ii5 = ii, jj5 = jj, ik15 = ik1, j15 = j1;
                                    int Ord5 = Order;
                                    Color a5 = a;
                                    int iAStarGreedy5 = iAStarGreedy;
                                    int i5 = i;
                                    Do |= this.FullGameThinkingQuantumTreeMinister(i5, a5, Ord5, iAStarGreedy5, ii5, jj5, ik15, j15, FOUND, LeafAStarGreedy);
                                    //Initiatye Variables.
                                    Order = DummyOrder;
                                    ChessRules.CurrentOrder = DummyCurrentOrder;
                                }
                            }
                        }
                    }, () =>
                    {
                        Object ooo = new Object();
                        lock (ooo)
                        {

                            if (i < KingMidle)

                            {
                                Object O1 = new Object();
                                lock (O1)
                                {
                                    if (Order == 1)
                                        a = Color.Gray;
                                    else
                                        a = Color.Brown;
                                    //Order *= -1;
                                    //ChessRules.CurrentOrder *= -1;
                                    int ii6 = ii, jj6 = jj, ik16 = ik1, j16 = j1;
                                    int Ord6 = Order;
                                    Color a6 = a;
                                    int iAStarGreedy6 = iAStarGreedy;
                                    int i6 = i;
                                    Do |= this.FullGameThinkingQuantumTreeKing(i6, a6, Ord6, iAStarGreedy6, ii6, jj6, ik16, j16, FOUND, LeafAStarGreedy);
                                    Order = DummyOrder;
                                    ChessRules.CurrentOrder = DummyCurrentOrder;
                                }
                            }
                        }
                    });
                })
                );
                output.Wait();

            }
            //For Brown Order Blitz Game Calculate Maximum Table Inclusive AStarGreedy First Game Search.
            else
            {
                var output = Task.Factory.StartNew(() =>
                Parallel.For(MinBrownMidle(), MaxGrayMidle(), i =>
                {
                    Parallel.Invoke(() =>
                    {
                        Object ooo = new Object();
                        lock (ooo)
                        {

                            if (i >= SodierMidle && i < SodierHigh)
                            {

                                Object O1 = new Object();
                                lock (O1)
                                {
                                    if (Order == 1)
                                        a = Color.Gray;
                                    else
                                        a = Color.Brown;
                                    int ii1 = ii, jj1 = jj, ik11 = ik1, j11 = j1;
                                    int Ord1 = OrderP;
                                    Color a1 = a;
                                    int iAStarGreedy1 = iAStarGreedy;
                                    int i1 = i;
                                    Do |= this.FullGameThinkingQuantumTreeSoldier(i1, a1, Ord1, iAStarGreedy1, ii1, jj1, ik11, j11, FOUND, LeafAStarGreedy);
                                    Order = DummyOrder;
                                    ChessRules.CurrentOrder = DummyCurrentOrder;
                                }
                            }
                        }
                    }, () =>
                    {
                        if (i >= ElefantMidle && i < ElefantHigh)
                        {
                            Object ooo = new Object();
                            lock (ooo)
                            {
                                if (Order == 1)
                                    a = Color.Gray;
                                else
                                    a = Color.Brown;
                                int ii2 = ii, jj2 = jj, ik12 = ik1, j12 = j1;
                                int Ord2 = Order;
                                Color a2 = a;
                                int iAStarGreedy2 = iAStarGreedy;
                                int i2 = i;
                                Do |= this.FullGameThinkingQuantumTreeElephant(i2, a2, Ord2, iAStarGreedy2, ii2, jj2, ik12, j12, FOUND, LeafAStarGreedy);
                                //Initiatye Variables.
                                Order = DummyOrder;
                                ChessRules.CurrentOrder = DummyCurrentOrder;
                            }
                        }
                    }, () =>
                    {
                        if (i >= HourseMidle && i < HourseHight)
                        {
                            Object O1 = new Object();
                            lock (O1)
                            {
                                if (Order == 1)
                                    a = Color.Gray;
                                else
                                    a = Color.Brown;

                                int ii3 = ii, jj3 = jj, ik13 = ik1, j13 = j1;
                                int Ord3 = Order;
                                Color a3 = a;
                                int iAStarGreedy3 = iAStarGreedy;
                                int i3 = i;
                                Do |= this.FullGameThinkingQuantumTreeHourse(i3, a3, Ord3, iAStarGreedy3, ii3, jj3, ik13, j13, FOUND, LeafAStarGreedy);
                                //Initiatye Variables.
                                Order = DummyOrder;
                                ChessRules.CurrentOrder = DummyCurrentOrder;
                            }
                        }
                    }, () =>
                    {
                        if (i >= CastleMidle && i < CastleHigh)
                        {
                            Object ooo = new Object();
                            lock (ooo)
                            {
                                if (Order == 1)
                                    a = Color.Gray;
                                else
                                    a = Color.Brown;
                                int ii4 = ii, jj4 = jj, ik14 = ik1, j14 = j1;
                                int Ord4 = Order;
                                Color a4 = a;
                                int iAStarGreedy4 = iAStarGreedy;
                                int i4 = i;
                                Do |= this.FullGameThinkingQuantumTreeCastle(i4, a4, Ord4, iAStarGreedy4, ii4, jj4, ik14, j14, FOUND, LeafAStarGreedy);
                                //Initiatye Variables.
                                Order = DummyOrder;
                                ChessRules.CurrentOrder = DummyCurrentOrder;
                            }
                        }
                    }, () =>
                    {
                        if (i >= MinisterMidle && i < MinisterHigh)
                        {
                            Object ooo = new Object();
                            lock (ooo)
                            {
                                if (Order == 1)
                                    a = Color.Gray;
                                else
                                    a = Color.Brown;
                                int ii5 = ii, jj5 = jj, ik15 = ik1, j15 = j1;
                                int Ord5 = Order;
                                Color a5 = a;
                                int iAStarGreedy5 = iAStarGreedy;
                                int i5 = i;
                                Do |= this.FullGameThinkingQuantumTreeMinister(i5, a5, Ord5, iAStarGreedy5, ii5, jj5, ik15, j15, FOUND, LeafAStarGreedy);
                                //Initiatye Variables.
                                Order = DummyOrder;
                                ChessRules.CurrentOrder = DummyCurrentOrder;
                            }
                        }

                    }, () =>
                    {
                        if (i >= KingMidle && i < KingHigh)
                        {
                            Object ooo = new Object();
                            lock (ooo)
                            {
                                if (Order == 1)
                                    a = Color.Gray;
                                else
                                    a = Color.Brown;
                                if (Order == 1)
                                    a = Color.Gray;
                                else
                                    a = Color.Brown;
                                int ii6 = ii, jj6 = jj, ik16 = ik1, j16 = j1;
                                int Ord6 = Order;
                                Color a6 = a;
                                int iAStarGreedy6 = iAStarGreedy;
                                int i6 = i;
                                Do |= this.FullGameThinkingQuantumTreeKing(i6, a6, Ord6, iAStarGreedy6, ii6, jj6, ik16, j16, FOUND, LeafAStarGreedy);
                                Order = DummyOrder;
                                ChessRules.CurrentOrder = DummyCurrentOrder;
                            }
                        }
                    });
                })
                );
                output.Wait();
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FullGameThinkingQuantumTreeObject:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Do;
        }
        //clone a table
        int[,] CloneATable(int[,] Tab)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            int[,] Tabl = new int[8, 8];
            for (var i = 0; i < 8; i++)
                for (var j = 0; j < 8; j++)
                    Tabl[i, j] = Tab[i, j];
            ////{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("CloneATable:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Tabl;
        }
        //return maximum of six type values 
        int MaxOfSixHeuristic(int _1, int _2, int _3, int _4, int _5, int _6)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            int[] LessB = new int[6];
            LessB[0] = _1;
            LessB[1] = _2;
            LessB[2] = _3;
            LessB[3] = _4;
            LessB[4] = _5;
            LessB[5] = _6;

            int Value = -1;
            int Les = Int32.MinValue;
            for (var i = 0; i < 6; i++)
            {
                if (LessB[i] > Les)
                {
                    Les = LessB[i];
                    Value = i;
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("MaxOfSixHeuristic:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Value;
        }
        //return minimum pf six type values
        int MinOfSixHeuristic(int _1, int _2, int _3, int _4, int _5, int _6)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            int[] LessB = new int[6];
            LessB[0] = _1;
            LessB[1] = _2;
            LessB[2] = _3;
            LessB[3] = _4;
            LessB[4] = _5;
            LessB[5] = _6;

            int Value = -1;
            int Les = Int32.MaxValue;
            for (var i = 0; i < 6; i++)
            {
                if (LessB[i] < Les)
                {
                    Les = LessB[i];
                    Value = i;
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("MinOfSixHeuristic:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Value;
        }
        //best movement indexes founder method.
        List<List<int>> FoundOfBestMovments(int AStarGreedy, ref List<int> i, ref List<int> j, ref List<int> k, AllDraw Dummy, Color a, int Order)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //initiate local variables.
            List<List<int>> p = new List<List<int>>();

            for (var ii = 0; ii < 6; ii++)
            {
                List<int> pl = new List<int>();
                p.Add(pl);

                Less = Int32.MinValue;
            }
            List<AllDraw> DummyList = new List<AllDraw>();
            DummyList.Add(Dummy);
            MaxHeuristicAStarGreedytBackWard.Clear();
            //found best movment depend of max Heuristic.
            Dummy.HeuristicAStarGreedySearch(0, a, Order, false);
            //proccess from a stored global variable decicion making.
            if (MaxHeuristicAStarGreedytBackWard[0][1] != -1)//soldier.
            {
                i.Add(MaxHeuristicAStarGreedytBackWard[0][2]);
                j.Add(MaxHeuristicAStarGreedytBackWard[0][3]);
                k.Add(MaxHeuristicAStarGreedytBackWard[0][4]);
                p[0].Add(MaxHeuristicAStarGreedytBackWard[0][2]);
            }
            else if (MaxHeuristicAStarGreedytBackWard[0][5] != -1)//Elephant
            {
                i.Add(MaxHeuristicAStarGreedytBackWard[0][6]);
                j.Add(MaxHeuristicAStarGreedytBackWard[0][7]);
                k.Add(MaxHeuristicAStarGreedytBackWard[0][8]);
                p[1].Add(MaxHeuristicAStarGreedytBackWard[0][6]);
            }
            else if (MaxHeuristicAStarGreedytBackWard[0][9] != -1)//Hourse
            {
                i.Add(MaxHeuristicAStarGreedytBackWard[0][10]);
                j.Add(MaxHeuristicAStarGreedytBackWard[0][11]);
                k.Add(MaxHeuristicAStarGreedytBackWard[0][12]);
                p[2].Add(MaxHeuristicAStarGreedytBackWard[0][10]);
            }
            else if (MaxHeuristicAStarGreedytBackWard[0][13] != -1)//Castles.
            {
                i.Add(MaxHeuristicAStarGreedytBackWard[0][14]);
                j.Add(MaxHeuristicAStarGreedytBackWard[0][15]);
                k.Add(MaxHeuristicAStarGreedytBackWard[0][16]);
                p[3].Add(MaxHeuristicAStarGreedytBackWard[0][14]);
            }
            else if (MaxHeuristicAStarGreedytBackWard[0][17] != -1)//Minister
            {
                i.Add(MaxHeuristicAStarGreedytBackWard[0][18]);
                j.Add(MaxHeuristicAStarGreedytBackWard[0][19]);
                k.Add(MaxHeuristicAStarGreedytBackWard[0][20]);
                p[4].Add(MaxHeuristicAStarGreedytBackWard[0][18]);
            }
            else if (MaxHeuristicAStarGreedytBackWard[0][21] != -1)//King.
            {
                i.Add(MaxHeuristicAStarGreedytBackWard[0][22]);
                j.Add(MaxHeuristicAStarGreedytBackWard[0][23]);
                k.Add(MaxHeuristicAStarGreedytBackWard[0][24]);
                p[5].Add(MaxHeuristicAStarGreedytBackWard[0][22]);
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("FoundOfBestMovments:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;

            //not found
            return p;
        }

        //Copying of Items of Enemy Non Move and Current Moved.
        public AllDraw CopyRemeiningItems(AllDraw ADummy, int Order)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //Initiate Local Variables.
            AllDraw Dummy = new AllDraw(OrderPlate, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged);
            Dummy.TableList.Add(TableList[0]);
            Dummy.SolderesOnTable = new DrawSoldierQ[SodierHigh];
            Dummy.ElephantOnTable = new DrawElefantQ[ElefantHigh];
            Dummy.HoursesOnTable = new DrawHourseQ[HourseHight];
            Dummy.CastlesOnTable = new DrawCastleQ[CastleHigh];
            Dummy.MinisterOnTable = new DrawMinisterQ[MinisterHigh];
            Dummy.KingOnTable = new DrawKingQ[KingHigh];
            //For All Sodiers Movments.
            for (var i = 0; i < SodierHigh; i++)
            {

                //Construction of Current Solders. 
                Dummy.SolderesOnTable[i] = new DrawSoldierQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, SolderesOnTable[i].Row, SolderesOnTable[i].Column, SolderesOnTable[i].color, CloneATable(SolderesOnTable[i].Table), SolderesOnTable[i].Order, false, SolderesOnTable[i].Current);

            }
            //For All Elephant Objects.
            for (var i = 0; i < ElefantHigh; i++)
            {

                //Construction of Curren Elephant.
                Dummy.ElephantOnTable[i] = new DrawElefantQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, ElephantOnTable[i].Row, ElephantOnTable[i].Column, ElephantOnTable[i].color, CloneATable(ElephantOnTable[i].Table), ElephantOnTable[i].Order, false, ElephantOnTable[i].Current);

            }
            //for All Hourse Objects.
            for (var i = 0; i < HourseHight; i++)
            {

                //Construction of Hourse Objects.
                Dummy.HoursesOnTable[i] = new DrawHourseQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, HoursesOnTable[i].Row, HoursesOnTable[i].Column, HoursesOnTable[i].color, CloneATable(HoursesOnTable[i].Table), HoursesOnTable[i].Order, false, HoursesOnTable[i].Current);

            }
            //For All Castles Objects.
            for (var i = 0; i < CastleHigh; i++)
            {

                //Construction of Castles Objects.
                Dummy.CastlesOnTable[i] = new DrawCastleQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, CastlesOnTable[i].Row, CastlesOnTable[i].Column, CastlesOnTable[i].color, CloneATable(CastlesOnTable[i].Table), CastlesOnTable[i].Order, false, CastlesOnTable[i].Current);

            }
            //For All Minister Objects.
            for (var i = 0; i < MinisterHigh; i++)
            {

                //Construction of Current Minister.
                Dummy.MinisterOnTable[i] = new DrawMinisterQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, MinisterOnTable[i].Row, MinisterOnTable[i].Column, MinisterOnTable[i].color, CloneATable(MinisterOnTable[i].Table), MinisterOnTable[i].Order, false, MinisterOnTable[i].Current);

            }
            //For All King Objects.
            for (var i = 0; i < KingHigh; i++)
            {

                //Construction of Kings Objects.
                Dummy.KingOnTable[i] = new DrawKingQ(CurrentAStarGredyMax, MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsChanged, KingOnTable[i].Row, KingOnTable[i].Column, KingOnTable[i].color, CloneATable(KingOnTable[i].Table), KingOnTable[i].Order, false, KingOnTable[i].Current);

            }
            //Gray Order.
            if (Order == 1)
            {
                //For Gray Soders Objects.
                for (var i = 0; i < SodierMidle; i++)
                {

                    //Clone a Movments.
                    ADummy.SolderesOnTable[i].Clone(ref Dummy.SolderesOnTable[i]);

                }
                //For Gray Elephant.
                for (var i = 0; i < ElefantMidle; i++)
                {

                    //Clone a  Movments.
                    ADummy.ElephantOnTable[i].Clone(ref Dummy.ElephantOnTable[i]);

                }
                //For Gray Hourses.
                for (var i = 0; i < HourseMidle; i++)
                {

                    //Clone a Movments.
                    ADummy.HoursesOnTable[i].Clone(ref Dummy.HoursesOnTable[i]);

                }
                //For Gray Castles.
                for (var i = 0; i < CastleMidle; i++)
                {

                    //Clone a Movments.
                    ADummy.CastlesOnTable[i].Clone(ref Dummy.CastlesOnTable[i]);

                }
                //For Gray Ministers.
                for (var i = 0; i < MinisterMidle; i++)
                {

                    //Clone a Movments.
                    ADummy.MinisterOnTable[i].Clone(ref Dummy.MinisterOnTable[i]);

                }
                //For Gray King.
                for (var i = 0; i < KingMidle; i++)
                {

                    //Clone a Movments.
                    ADummy.KingOnTable[i].Clone(ref Dummy.KingOnTable[i]);

                }
                //For All Solders.
            }
            else//For Order Brown.
            {
                {
                    //For Brown Solders.
                    for (var i = SodierMidle; i < SodierHigh; i++)
                    {

                        //Clone a Movments.
                        ADummy.SolderesOnTable[i].Clone(ref Dummy.SolderesOnTable[i]);

                    }
                    //For All Brown Elephants.
                    for (var i = ElefantMidle; i < ElefantHigh; i++)
                    {

                        //Clone a Enemy.
                        ADummy.ElephantOnTable[i].Clone(ref Dummy.ElephantOnTable[i]);

                    }
                    //For All Brown Hourses.
                    for (var i = HourseMidle; i < HourseHight; i++)
                    {

                        //Clone a Enemy.
                        ADummy.HoursesOnTable[i].Clone(ref Dummy.HoursesOnTable[i]);

                    }
                    //For Brown Castles. 
                    for (var i = CastleMidle; i < CastleHigh; i++)
                    {

                        //Clone a Movments.
                        ADummy.CastlesOnTable[i].Clone(ref Dummy.CastlesOnTable[i]);

                    }
                    //For Gray Minsters.
                    for (var i = MinisterMidle; i < MinisterHigh; i++)
                    {

                        //Clone a Enemy.
                        ADummy.MinisterOnTable[i].Clone(ref Dummy.MinisterOnTable[i]);

                    }
                    //For Brown Kings.
                    for (var i = KingMidle; i < KingHigh; i++)
                    {

                        //Clone a Enemy.
                        ADummy.KingOnTable[i].Clone(ref Dummy.KingOnTable[i]);

                    }
                }

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("CopyRemeiningItems:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            //Return Constructed Tables.
            return Dummy;


        }
        //determiniation and detection of zeros
        public bool TableZero(int[,] Ta)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            bool Zerro = true;
            for (var i = 0; i < 8; i++)
                for (var j = 0; j < 8; j++)
                    if (Ta[i, j] != 0)
                        Zerro = false;
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("TableZero:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            return Zerro;
        }
        //operantional for victom learning autamata penalty make performing pbetter Heuristic values of current specific object
        void CheckedMateConfiguratiionSoldier(int Order, int i, bool Regrad)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            for (var j = 0; j < SolderesOnTable[i].SoldierThinkingQuantum[0].PenaltyRegardListSolder.Count; j++)
            {

                if (SolderesOnTable[i].SoldierThinkingQuantum[0].LearningVarsObject.Count == SolderesOnTable[i].SoldierThinkingQuantum[0].PenaltyRegardListSolder.Count)
                    if (SolderesOnTable[i].SoldierThinkingQuantum[0].LearningVarsObject[j][1] && (!SolderesOnTable[i].SoldierThinkingQuantum[0].LearningVarsObject[j][4]))
                    {
                        SolderesOnTable[i].SoldierThinkingQuantum[0].PenaltyRegardListSolder[j].Initiate();
                        //if(Regrad)
                        //SolderesOnTable[i].SoldierThinkingQuantum[0].PenaltyRegardListSolder[j].LearningAlgorithmRegard();
                        //else
                        if (!Regrad)
                            SolderesOnTable[i].SoldierThinkingQuantum[0].PenaltyRegardListSolder[j].LearningAlgorithmPenalty();
                        SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicPenaltyValuePerform(SolderesOnTable[i].SoldierThinkingQuantum[0].PenaltyRegardListSolder[j], Order, ref SolderesOnTable[i].SoldierThinkingQuantum[0].HeuristicListSolder[j][0], true);
                    }

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("CheckedMateConfiguratiionSoldier:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //operantional for victom learning autamata penalty make performing pbetter Heuristic values of current specific object
        void CheckedMateConfiguratiionElephant(int Order, int i, bool Regrad)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            for (var j = 0; j < ElephantOnTable[i].ElefantThinkingQuantum[0].PenaltyRegardListElefant.Count; j++)
            {

                if (ElephantOnTable[i].ElefantThinkingQuantum[0].LearningVarsObject.Count == ElephantOnTable[i].ElefantThinkingQuantum[0].PenaltyRegardListElefant.Count)
                    if (ElephantOnTable[i].ElefantThinkingQuantum[0].LearningVarsObject[j][1] && (!ElephantOnTable[i].ElefantThinkingQuantum[0].LearningVarsObject[j][4]))
                    {
                        ElephantOnTable[i].ElefantThinkingQuantum[0].PenaltyRegardListElefant[j].Initiate();
                        //if(Regrad)
                        //ElephantOnTable[i].ElefantThinkingQuantum[0].PenaltyRegardListElefant[j].LearningAlgorithmRegard();
                        //else
                        if (!Regrad)
                            ElephantOnTable[i].ElefantThinkingQuantum[0].PenaltyRegardListElefant[j].LearningAlgorithmPenalty();
                        ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicPenaltyValuePerform(ElephantOnTable[i].ElefantThinkingQuantum[0].PenaltyRegardListElefant[j], Order, ref ElephantOnTable[i].ElefantThinkingQuantum[0].HeuristicListElefant[j][0], true);
                    }

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("CheckedMateConfiguratiionElephant:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //operantional for victom learning autamata penalty make performing pbetter Heuristic values of current specific object
        void CheckedMateConfiguratiionHourse(int Order, int i, bool Regrad)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            for (var j = 0; j < HoursesOnTable[i].HourseThinkingQuantum[0].PenaltyRegardListHourse.Count; j++)
            {

                if (HoursesOnTable[i].HourseThinkingQuantum[0].LearningVarsObject.Count == HoursesOnTable[i].HourseThinkingQuantum[0].PenaltyRegardListHourse.Count)
                    if (HoursesOnTable[i].HourseThinkingQuantum[0].LearningVarsObject[j][1] && (!HoursesOnTable[i].HourseThinkingQuantum[0].LearningVarsObject[j][4]))
                    {
                        HoursesOnTable[i].HourseThinkingQuantum[0].PenaltyRegardListHourse[j].Initiate();
                        //if(Regrad)
                        //HoursesOnTable[i].HourseThinkingQuantum[0].PenaltyRegardListHourse[j].LearningAlgorithmRegard();
                        //else
                        if (!Regrad)
                            HoursesOnTable[i].HourseThinkingQuantum[0].PenaltyRegardListHourse[j].LearningAlgorithmPenalty();
                        HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicPenaltyValuePerform(HoursesOnTable[i].HourseThinkingQuantum[0].PenaltyRegardListHourse[j], Order, ref HoursesOnTable[i].HourseThinkingQuantum[0].HeuristicListHourse[j][0], true);
                    }

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("CheckedMateConfiguratiionHourse:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }

        //operantional for victom learning autamata penalty make performing pbetter Heuristic values of current specific object
        void CheckedMateConfiguratiionCastle(int Order, int i, bool Regrad)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            for (var j = 0; j < CastlesOnTable[i].CastleThinkingQuantum[0].PenaltyRegardListCastle.Count; j++)
            {

                if (CastlesOnTable[i].CastleThinkingQuantum[0].LearningVarsObject.Count == CastlesOnTable[i].CastleThinkingQuantum[0].PenaltyRegardListCastle.Count)
                    if (CastlesOnTable[i].CastleThinkingQuantum[0].LearningVarsObject[j][1] && (!CastlesOnTable[i].CastleThinkingQuantum[0].LearningVarsObject[j][4]))
                    {
                        CastlesOnTable[i].CastleThinkingQuantum[0].PenaltyRegardListCastle[j].Initiate();
                        //if(Regrad)
                        //CastlesOnTable[i].CastleThinkingQuantum[0].PenaltyRegardListCastle[j].LearningAlgorithmRegard();
                        //else
                        if (!Regrad)
                            CastlesOnTable[i].CastleThinkingQuantum[0].PenaltyRegardListCastle[j].LearningAlgorithmPenalty();
                        CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicPenaltyValuePerform(CastlesOnTable[i].CastleThinkingQuantum[0].PenaltyRegardListCastle[j], Order, ref CastlesOnTable[i].CastleThinkingQuantum[0].HeuristicListCastle[j][0], true);
                    }

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("CheckedMateConfiguratiionCastle:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //operantional for victom learning autamata penalty make performing pbetter Heuristic values of current specific object
        void CheckedMateConfiguratiionMinister(int Order, int i, bool Regrad)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            for (var j = 0; j < MinisterOnTable[i].MinisterThinkingQuantum[0].PenaltyRegardListMinister.Count; j++)
            {

                if (MinisterOnTable[i].MinisterThinkingQuantum[0].LearningVarsObject.Count == MinisterOnTable[i].MinisterThinkingQuantum[0].PenaltyRegardListMinister.Count)
                    if (MinisterOnTable[i].MinisterThinkingQuantum[0].LearningVarsObject[j][1] && (!MinisterOnTable[i].MinisterThinkingQuantum[0].LearningVarsObject[j][4]))
                    {
                        MinisterOnTable[i].MinisterThinkingQuantum[0].PenaltyRegardListMinister[j].Initiate();
                        //if(Regrad)
                        //MinisterOnTable[i].MinisterThinkingQuantum[0].PenaltyRegardListMinister[j].LearningAlgorithmRegard();
                        //else
                        if (!Regrad)
                            MinisterOnTable[i].MinisterThinkingQuantum[0].PenaltyRegardListMinister[j].LearningAlgorithmPenalty();
                        MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicPenaltyValuePerform(MinisterOnTable[i].MinisterThinkingQuantum[0].PenaltyRegardListMinister[j], Order, ref MinisterOnTable[i].MinisterThinkingQuantum[0].HeuristicListMinister[j][0], true);
                    }

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("CheckedMateConfiguratiionMinister:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //operantional for victom learning autamata penalty make performing pbetter Heuristic values of current specific object
        void CheckedMateConfiguratiionking(int Order, int i, bool Regrad)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            for (var j = 0; j < KingOnTable[i].KingThinkingQuantum[0].PenaltyRegardListKing.Count; j++)
            {

                if (KingOnTable[i].KingThinkingQuantum[0].LearningVarsObject.Count == KingOnTable[i].KingThinkingQuantum[0].PenaltyRegardListKing.Count)
                    if (KingOnTable[i].KingThinkingQuantum[0].LearningVarsObject[j][1] && (!KingOnTable[i].KingThinkingQuantum[0].LearningVarsObject[j][4]))
                    {
                        KingOnTable[i].KingThinkingQuantum[0].PenaltyRegardListKing[j].Initiate();
                        //if(Regrad)
                        //KingOnTable[i].KingThinkingQuantum[0].PenaltyRegardListKing[j].LearningAlgorithmRegard();
                        //else
                        if (!Regrad)
                            KingOnTable[i].KingThinkingQuantum[0].PenaltyRegardListKing[j].LearningAlgorithmPenalty();
                        KingOnTable[i].KingThinkingQuantum[0].HeuristicPenaltyValuePerform(KingOnTable[i].KingThinkingQuantum[0].PenaltyRegardListKing[j], Order, ref KingOnTable[i].KingThinkingQuantum[0].HeuristicListKing[j][0], true);
                    }

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("CheckedMateConfiguratiionking:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //specific learning autamata network oparational
        void CheckedMateConfiguratiion(int Order)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {
                if (ThinkingQuantumChess.LearningVarsCheckedMateOccured && ThinkingQuantumChess.LearningVarsCheckedMateOccuredOneCheckedMate)
                {
                    if (Order == 1)
                    {
                        for (var i = 0; i < SodierMidle; i++)
                            if (SolderesOnTable != null && SolderesOnTable[i] != null)

                                CheckedMateConfiguratiionSoldier(Order, i, true);


                        for (var i = 0; i < ElefantMidle; i++)
                            if (ElephantOnTable != null && ElephantOnTable[i] != null)

                                CheckedMateConfiguratiionElephant(Order, i, true);

                        for (var i = 0; i < HourseMidle; i++)
                            if (HoursesOnTable != null && HoursesOnTable[i] != null)

                                CheckedMateConfiguratiionHourse(Order, i, true);

                        for (var i = 0; i < CastleMidle; i++)
                            if (CastlesOnTable != null && CastlesOnTable[i] != null)

                                CheckedMateConfiguratiionCastle(Order, i, true);

                        for (var i = 0; i < MinisterMidle; i++)
                            if (MinisterOnTable != null && MinisterOnTable[i] != null)

                                CheckedMateConfiguratiionMinister(Order, i, true);

                        for (var i = 0; i < KingMidle; i++)
                            if (KingOnTable != null && KingOnTable[i] != null)

                                CheckedMateConfiguratiionking(Order, i, true);

                    }
                    else
                    {
                        for (var i = SodierMidle; i < SodierHigh; i++)
                            if (SolderesOnTable != null && SolderesOnTable[i] != null)

                                CheckedMateConfiguratiionSoldier(Order, i, true);

                        for (var i = ElefantMidle; i < ElefantHigh; i++)
                            if (ElephantOnTable != null && ElephantOnTable[i] != null)

                                CheckedMateConfiguratiionElephant(Order, i, true);

                        for (var i = HourseMidle; i < HourseHight; i++)
                            if (HoursesOnTable != null && HoursesOnTable[i] != null)

                                CheckedMateConfiguratiionHourse(Order, i, true);

                        for (var i = CastleMidle; i < CastleHigh; i++)
                            if (CastlesOnTable != null && CastlesOnTable[i] != null)

                                CheckedMateConfiguratiionCastle(Order, i, true);

                        for (var i = MinisterMidle; i < MinisterHigh; i++)
                            if (MinisterOnTable != null && MinisterOnTable[i] != null)

                                CheckedMateConfiguratiionMinister(Order, i, true);

                        for (var i = KingMidle; i < KingHigh; i++)
                            if (KingOnTable != null && KingOnTable[i] != null)

                                CheckedMateConfiguratiionking(Order, i, true);

                    }


                }
                else
                {
                    if (Order == 1)
                    {
                        for (var i = 0; i < SodierMidle; i++)
                            if (SolderesOnTable != null && SolderesOnTable[i] != null)

                                CheckedMateConfiguratiionSoldier(Order, i, false);

                        for (var i = 0; i < ElefantMidle; i++)
                            if (ElephantOnTable != null && ElephantOnTable[i] != null)

                                CheckedMateConfiguratiionElephant(Order, i, false);

                        for (var i = 0; i < HourseMidle; i++)
                            if (HoursesOnTable != null && HoursesOnTable[i] != null)

                                CheckedMateConfiguratiionHourse(Order, i, false);

                        for (var i = 0; i < CastleMidle; i++)
                            if (CastlesOnTable != null && CastlesOnTable[i] != null)

                                CheckedMateConfiguratiionCastle(Order, i, false);

                        for (var i = 0; i < MinisterMidle; i++)
                            if (MinisterOnTable != null && MinisterOnTable[i] != null)

                                CheckedMateConfiguratiionMinister(Order, i, false);

                        for (var i = 0; i < KingMidle; i++)
                            if (KingOnTable != null && KingOnTable[i] != null)

                                CheckedMateConfiguratiionking(Order, i, false);

                    }
                    else
                    {
                        for (var i = SodierMidle; i < SodierHigh; i++)
                            if (SolderesOnTable != null && SolderesOnTable[i] != null)

                                CheckedMateConfiguratiionSoldier(Order, i, false);

                        for (var i = ElefantMidle; i < ElefantHigh; i++)
                            if (ElephantOnTable != null && ElephantOnTable[i] != null)

                                CheckedMateConfiguratiionElephant(Order, i, false);

                        for (var i = HourseMidle; i < HourseHight; i++)
                            if (HoursesOnTable != null && HoursesOnTable[i] != null)

                                CheckedMateConfiguratiionHourse(Order, i, false);

                        for (var i = CastleMidle; i < CastleHigh; i++)
                            if (CastlesOnTable != null && CastlesOnTable[i] != null)

                                CheckedMateConfiguratiionCastle(Order, i, false);

                        for (var i = MinisterMidle; i < MinisterHigh; i++)
                            if (MinisterOnTable != null && MinisterOnTable[i] != null)

                                CheckedMateConfiguratiionMinister(Order, i, false);

                        for (var i = KingMidle; i < KingHigh; i++)
                            if (KingOnTable != null && KingOnTable[i] != null)

                                CheckedMateConfiguratiionking(Order, i, false);

                    }

                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("CheckedMateConfiguratiion:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //monitor
        void SemaphoreExxedTime(int time, int Kind)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;

            if (time > 10000)
            {
                if (Kind == 1)
                    OutPut.Append("\r\nSolder Semaphre Full Game Exeede time");
                else
if (Kind == 2)
                    OutPut.Append("\r\nelephant Semaphre Full Game Exeede time");
                else
if (Kind == 3)
                    OutPut.Append("\r\nHourse Semaphre Full Game Exeede time");
                else
if (Kind == 4)
                    OutPut.Append("\r\nCastle Semaphre Full Game Exeede time");
                else
if (Kind == 5)
                    OutPut.Append("\r\nMinister Semaphre Full Game Exeede time");
                else if (Kind == 6)
                    OutPut.Append("\r\nKing Semaphre Full Game Exeede time");

            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("SemaphoreExxedTime:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
        }
        //Main Initiate ThinkingQuantum Method.
        public int[,] Initiate(int ii, int jj, Color a, int[,] Table, int Order, bool TB, bool FOUND, int LeafAStarGreedy, bool SetDept = false)
        {

            Object o = new Object();
            lock (o)
            {
                ThinkingQuantumChess.Colleralation = int.MinValue;
                ThinkingQuantumChess.DeColleralation = int.MaxValue;

                if (FOUND && (!FirstTraversalTree))
                    NumberOfLeafComputation = ThinkingQuantumChess.NumbersOfAllNode;
                else
                    NumberOfLeafComputation = -1;
                ThinkingQuantumChess.IsAtLeAStOneKillerAtDraw = false;
                //long Time = TimeElapced.TimeNow();Spaces++;
                var parallelOptions = new ParallelOptions();
                parallelOptions.MaxDegreeOfParallelism = PlatformHelper.ProcessorCount;
                SetDeptIgnore = SetDept;
                int[,] TableHeuristic = null;
                int Current = ChessRules.CurrentOrder;
                int DummyOrder = Order;

                Object O = new Object();
                lock (O)
                {
                    AllDraw.ActionStringReady = false;
                    ThinkingQuantumChess.LearningVarsCheckedMateOccured = false;
                    ThinkingQuantumChess.LearningVarsCheckedMateOccuredOneCheckedMate = false;
                    RegardOccurred = false;
                    Object OO21 = new Object();
                    lock (OO21)
                    {
                        TaskBegin = 0;
                        TaskEnd = 0;
                    }

                    Object OO1 = new Object();
                    lock (OO1)
                    {
                        lock (OO1)
                        {

                            if (AllDraw.THIScomboBoxMaxLevelText != "")
                                MaxDuringLevelThinkingQuantumCreation = System.Convert.ToInt32(AllDraw.THIScomboBoxMaxLevelText);

                        }
                    }
                    Object Om1 = new Object();
                    lock (Om1)
                    {
                        MinThinkingQuantumTreeDepth = 0;
                    }

                    ThinkingQuantumChess.FoundFirstMating = 0;
                    ThinkingQuantumChess.FoundFirstSelfMating = 0;
                    //Monitor Log File Appending First Line. 
                    Object On = new Object();
                    lock (On)
                    {

                        OutPut.Append("\n\r=====================================================================================================================================================================<br/>");
                        OutPut.Append("\n\rMovment Number: " + AllDraw.MovmentsNumber);

                    }
                    //Initiate Local and Global Variables.            
                    Object ol = new Object();
                    lock (ol)
                    {
                        CurrentHeuristic = Int32.MinValue;
                        MaxHeuristicxT = Int32.MinValue;
                        DrawCastleQ.MaxHeuristicxB = Int32.MinValue;
                        DrawElefantQ.MaxHeuristicxE = Int32.MinValue;
                        DrawHourseQ.MaxHeuristicxH = Int32.MinValue;
                        DrawKingQ.MaxHeuristicxK = Int32.MinValue;
                        DrawMinisterQ.MaxHeuristicxM = Int32.MinValue;
                        DrawSoldierQ.MaxHeuristicxS = Int32.MinValue;
                        MovementsAStarGreedyHeuristicFoundT = false;
                        DrawTable = false;
                        ChessRules.CheckBrownObjectDangourFirstTimesOcured = false;
                        ChessRules.CheckGrayObjectDangourFirstTimesOcured = false;
                    }
                }

                MaxHeuristicAStarGreedytBackWard.Clear();

                int[,] Tab = null;

                if (!FOUND)
                {
                    Object O7 = new Object();
                    lock (O7)
                    {
                        ThinkingQuantumChess.NotSolvedKingDanger = false;
                        LoopHeuristicIndex = 0;
                        Less = Int32.MinValue;
                    }
                }
                //THIS.Invoke((MethodInvoker)delegate()
                {
                    Object OOO = new Object();
                    lock (OOO)
                    {
                        if (!SetDept)
                            MaxAStarGreedy = System.Convert.ToInt32(AllDraw.MaxDuringLevelThinkingQuantumCreation);
                        AllDraw.AStarGreedyiLevelMax = MaxAStarGreedy;
                        AStarGreedyiLevelMax = System.Convert.ToInt32(AllDraw.MaxDuringLevelThinkingQuantumCreation);
                        AllDraw.MaxAStarGreedyHeuristicProgress = 6;
                        for (var i = 0; i <= MaxAStarGreedy; i++)
                            AllDraw.MaxAStarGreedyHeuristicProgress += AllDraw.MaxAStarGreedyHeuristicProgress * 6;
                        increASedProgress = (int)((int)999999999 / (int)(AllDraw.MaxAStarGreedyHeuristicProgress));
                        Object Omm1 = new Object();
                        lock (Omm1)
                        {
                            AStarGreedytMaxCount = (int)MaxAStarGreedy;
                        }
                    }
                }//);

                ChessRules.CurrentOrder = Current;
                Order = DummyOrder;
                int iiii = ii, jjjj = jj, Ord = Order;
                int MaxAStarGreedy1 = 0;
                Object OOOO = new Object();
                lock (OOOO)
                {
                    if (MaxAStarGreedy == 0)
                        MaxAStarGreedy = PlatformHelper.ProcessorCount;
                    MaxAStarGreedy1 = MaxAStarGreedy;

                    int[,] Tabl = CloneATable(Table);
                    Color aaa = a;
                    var array = Task.Factory.StartNew(() => InitiateAStarGreedyt(MaxAStarGreedy1, iiii, jjjj, aaa, Tabl, Ord, false, FOUND, LeafAStarGreedy));
                    array.Wait();
                }
                Object Om = new Object();
                lock (Om)
                {
                    MinThinkingQuantumTreeDepth = MaxAStarGreedy - MinThinkingQuantumTreeDepth;
                    //Initaite Local Varibales.
                    Tab = new int[8, 8];
                    Less = Int32.MinValue;
                }
                ChessRules.CurrentOrder = Current;
                Order = DummyOrder;
                Object OO = new Object();
                lock (OO)
                {
                    OutPut.Append("\r\nMinimum ThinkingQuantum Tree Depth:" + MinThinkingQuantumTreeDepth.ToString() + "!");
                }
                //Order = OrderP;
                NumberOfLeafComputation = -1;


                TableHeuristic = HeuristicAStarGreedySearch(0, a, Order, false);
                if ((TableHeuristic == null || ((TableZero(TableHeuristic)))) && UsePenaltyRegardMechnisamT)
                {


                    Object OOoOO = new Object();
                    lock (OOoOO)
                    {
                        OutPut.Append("\r\nTable Zero.Possibly Full Penalty!");



                        bool aa = UsePenaltyRegardMechnisamT;
                        UsePenaltyRegardMechnisamT = false;
                        //THISDummy = THISDummy.RemovePenalltyFromFirstBranches(Order);
                        RemovePenalltyFromFirstBranches(Order);
                        MaxAStarGreedy = 1;
                        AStarGreedyiLevelMax = 1;
                        Less = Int32.MinValue;
                        //TableHeuristic = THISDummy.HeuristicAStarGreedySearchPenalties(0, a, Order, false,ref HaveKilled);
                        //TableHeuristic = THISDummy.HeuristicAStarGreedySearch(0, a, Order, false,ref HaveKilled);
                        TableHeuristic = HeuristicAStarGreedySearch(0, a, Order, false);
                        //THISDummy.UsePenaltyRegardMechnisamT = aa;
                        UsePenaltyRegardMechnisamT = aa;
                    }


                }
                else
                if ((TableHeuristic == null || ((TableZero(TableHeuristic)))))
                    OutPut.Append("\r\nTable Zero.Possibly Full failed!");

                //If Table Found.

                if (TableHeuristic != null)
                {
                    Object OOOOO = new Object();
                    lock (OOOOO)
                    {
                        Ord = Order;
                        if (Ord == 1)
                        {
                            OutPut.Append("\r\nHeuristic Find Best Movements AStarGreedy " + AStarGreedy.ToString() + " By Bob!");
                        }
                        else
                        {
                            OutPut.Append("\r\nHeuristic Find Best Movements AStarGreedy " + AStarGreedy.ToString() + " By Alice!");

                        }
                    }
                    Order = DummyOrder;
                    ChessRules.CurrentOrder = Current;
                }
                else
                {
                    Object OOoOO = new Object();
                    lock (OOoOO)
                    {
                        //Clear AStarGreedy Varibales.
                        AllDraw.StoreADraw.Clear();
                        TableCurrent.Clear();
                        AStarGreedy = 0;
                    }

                    Order = DummyOrder;
                    ChessRules.CurrentOrder = Current;
                    //THISDummy.Dispose();
                    Object Omm = new Object();
                    lock (Omm)
                    {
                        DrawTable = true;
                        FoundATable = true;
                    }
                }
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("Initiate:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return CloneATable(TableHeuristic);
            }
        }
        //Identification of Illegal AStarGreedy First and Common Hurist Movments.
        public bool IsEnemyThingsinStable(int[,] TableHeuristic, int[,] TableAction, int Order)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            //Iniatiet Local Variables.
            int[,] Cromosom1 = TableHeuristic;
            int[,] Cromosom2 = TableAction;
            bool and = true;

            bool Find = false;
            //bool Hit = false;
            int FindNumber = 0;
            int
                  CromosomRowFirst = -1, CromosomColumnFirst = -1,
                  CromosomRow = -1, CromosomColumn = -1;
            //Initiate Local Variables.

            //For All Table Home
            for (var i = 0; i < 8; i++)
            {
                for (var j = 0; j < 8; j++)
                {
                    //Gray Order.
                    if (Order == 1)
                    {
                        //Situation 11.
                        if (and)
                        {
                            //All The Brown Object Ignored.
                            if (Cromosom1[i, j] < 0 && Cromosom2[i, j] < 0)
                                continue;
                        }
                        else///Situation 2.
                        {
                            //All The Brown Ojects Ignored.
                            if (Cromosom1[i, j] < 0 || Cromosom2[i, j] < 0)
                                continue;
                        }
                    }
                    else//Brown Order.
                    {
                        //Situation 1.
                        if (and)
                        {
                            //All The Gray Objects Ignored.
                            if (Cromosom1[i, j] > 0 && Cromosom2[i, j] > 0)
                                continue;

                        }
                        else
                        {
                            //All The Gray Objects Ignored.
                            if (Cromosom1[i, j] > 0 || Cromosom2[i, j] > 0)
                                continue;
                        }
                    }
                    if (!(ArrangmentsChanged))
                    {
                        {
                            if (Order == 1 && j == 6 && i > 0 && i < 7)
                            {
                                if (((Cromosom2[i, j + 1] > 0) || (Cromosom2[i + 1, j + 1] > 0 && Cromosom1[i + 1, j + 1] < 0) || (Cromosom2[i - 1, j + 1] > 0 && Cromosom1[i - 1, j + 1] < 0) && Cromosom1[i, j] == 1))
                                {
                                    CromosomRowFirst = i;
                                    CromosomColumnFirst = j;
                                    if (Cromosom2[i, j + 1] > 0)
                                    {
                                        CromosomRow = i;
                                        CromosomColumn = j + 1;
                                    }
                                    else if (Cromosom2[i + 1, j + 1] > 0 && Cromosom1[i + 1, j + 1] < 0)
                                    {
                                        CromosomRow = i + 1;
                                        CromosomColumn = j + 1;
                                    }
                                    else if (Cromosom2[i - 1, j + 1] > 0 && Cromosom1[i - 1, j + 1] < 0)
                                    {
                                        CromosomRow = i - 1;
                                        CromosomColumn = j + 1;
                                    }
                                    Find = true;
                                    FindNumber++;
                                    AllDraw.SodierConversionOcuured = true;

                                }

                            }
                            else
                                if (Order == -1 && j == 1 && i > 0 && i < 7)
                            {
                                if (((Cromosom2[i, j - 1] < 0) || (Cromosom2[i + 1, j - 1] < 0 && Cromosom1[i + 1, j - 1] > 0) || (Cromosom2[i - 1, j - 1] < 0 && Cromosom1[i - 1, j - 1] < 0) && Cromosom1[i, j] == -1))
                                {
                                    CromosomRowFirst = i;
                                    CromosomColumnFirst = j;
                                    if (Cromosom2[i, j - 1] > 0)
                                    {
                                        CromosomRow = i;
                                        CromosomColumn = j - 1;
                                    }
                                    else if (Cromosom2[i + 1, j - 1] > 0 && Cromosom1[i + 1, j - 1] < 0)
                                    {
                                        CromosomRow = i + 1;
                                        CromosomColumn = j - 1;
                                    }
                                    else if (Cromosom2[i - 1, j - 1] > 0 && Cromosom1[i - 1, j - 1] < 0)
                                    {
                                        CromosomRow = i - 1;
                                        CromosomColumn = j - 1;
                                    }
                                    FindNumber++;
                                    AllDraw.SodierConversionOcuured = true;
                                }
                            }

                            //Castles King Validity Condition.
                            if (Order == 1 && j == 0)
                            {
                                //Small Gray Castles King.
                                if (i == 6 && Cromosom2[i, j] == 6 && Cromosom2[i - 1, j] == 4 && Cromosom1[i, j] != 6 && Cromosom1[i - 1, j] != 4)
                                {
                                    CromosomRowFirst = i - 3;
                                    CromosomColumnFirst = j;
                                    CromosomRow = i;
                                    CromosomColumn = j;
                                    Find = true;
                                    FindNumber++;
                                    ChessRules.SmallKingCastleGray = true;
                                    CastlesKing = true;
                                }
                                else //Big Briges King Gray.
                                    if (i == 2 && Cromosom2[i, j] == 6 && Cromosom2[i + 1, j] == 4 && Cromosom1[i, j] != 6 && Cromosom1[i + 1, j] != 4)
                                {
                                    CromosomRowFirst = i + 3;
                                    CromosomColumnFirst = j;
                                    CromosomRow = i;
                                    CromosomColumn = j;
                                    Find = true;
                                    FindNumber++;
                                    ChessRules.BigKingCastleGray = true;
                                    CastlesKing = true;
                                }

                            }
                            else if (j == 7)
                            {
                                //Small Castles King Brown.
                                if (i == 6 && Cromosom2[i, j] == -6 && Cromosom2[i - 1, j] == -4 && Cromosom1[i, j] != -6 && Cromosom1[i - 1, j] != -4)
                                {
                                    CromosomRowFirst = i - 3;
                                    CromosomColumnFirst = j;
                                    CromosomRow = i;
                                    CromosomColumn = j;
                                    Find = true;
                                    FindNumber++;
                                    ChessRules.SmallKingCastleBrown = true;
                                    CastlesKing = true;
                                }
                                else//Big Castles King Brown.
                                    if (i == 2 && Cromosom2[i, j] == -6 && Cromosom2[i + 1, j] == -4 && Cromosom1[i, j] != -6 && Cromosom1[i + 1, j] != -4)
                                {
                                    CromosomRowFirst = i + 3;
                                    CromosomColumnFirst = j;
                                    CromosomRow = i;
                                    CromosomColumn = j;
                                    Find = true;
                                    FindNumber++;
                                    ChessRules.BigKingCastleBrown = true;
                                    CastlesKing = true;
                                }

                            }

                        }
                    }
                    else
                    {
                        {
                            if (Order == 1 && j == 1 && i > 0 && i < 7)
                            {
                                if (((Cromosom2[i, j - 1] > 0) || (Cromosom2[i + 1, j - 1] > 0 && Cromosom1[i + 1, j - 1] < 0) || (Cromosom2[i - 1, j - 1] > 0 && Cromosom1[i - 1, j - 1] < 0) && Cromosom1[i, j] == 1))
                                {
                                    CromosomRowFirst = i;
                                    CromosomColumnFirst = j;
                                    if (Cromosom2[i, j - 1] > 0)
                                    {
                                        CromosomRow = i;
                                        CromosomColumn = j - 1;
                                    }
                                    else if (Cromosom2[i + 1, j - 1] > 0 && Cromosom1[i + 1, j - 1] < 0)
                                    {
                                        CromosomRow = i + 1;
                                        CromosomColumn = j - 1;
                                    }
                                    else if (Cromosom2[i - 1, j - 1] > 0 && Cromosom1[i - 1, j - 1] < 0)
                                    {
                                        CromosomRow = i - 1;
                                        CromosomColumn = j - 1;
                                    }
                                    FindNumber++;
                                    AllDraw.SodierConversionOcuured = true;

                                }

                            }
                            else
                                if (Order == -1 && j == 6 && i > 0 && i < 7)
                            {
                                if (((Cromosom2[i, j + 1] < 0) || (Cromosom2[i + 1, j + 1] < 0 && Cromosom1[i + 1, j + 1] > 0) || (Cromosom2[i - 1, j + 1] < 0 && Cromosom1[i - 1, j + 1] < 0) && Cromosom1[i, j] == -1))
                                {
                                    CromosomRowFirst = i;
                                    CromosomColumnFirst = j;
                                    if (Cromosom2[i, j + 1] > 0)
                                    {
                                        CromosomRow = i;
                                        CromosomColumn = j + 1;
                                    }
                                    else if (Cromosom2[i + 1, j + 1] > 0 && Cromosom1[i + 1, j + 1] < 0)
                                    {
                                        CromosomRow = i + 1;
                                        CromosomColumn = j + 1;
                                    }
                                    else if (Cromosom2[i - 1, j + 1] > 0 && Cromosom1[i - 1, j + 1] < 0)
                                    {
                                        CromosomRow = i - 1;
                                        CromosomColumn = j + 1;
                                    }
                                    Find = true;
                                    FindNumber++;
                                    AllDraw.SodierConversionOcuured = true;
                                }
                            }

                            //Castles King Validity Condition.
                            if (Order == 1 && j == 7)
                            {
                                //Small Gray Castles King.
                                if (i == 6 && Cromosom2[i, j] == 6 && Cromosom2[i - 1, j] == 4 && Cromosom1[i, j] != 6 && Cromosom1[i - 1, j] != 4)
                                {
                                    CromosomRowFirst = i - 3;
                                    CromosomColumnFirst = j;
                                    CromosomRow = i;
                                    CromosomColumn = j;
                                    Find = true;
                                    FindNumber++;
                                    ChessRules.SmallKingCastleGray = true;
                                    CastlesKing = true;
                                }
                                else //Big Briges King Gray.
                                    if (i == 2 && Cromosom2[i, j] == 6 && Cromosom2[i + 1, j] == 4 && Cromosom1[i, j] != 6 && Cromosom1[i + 1, j] != 4)
                                {
                                    CromosomRowFirst = i + 3;
                                    CromosomColumnFirst = j;
                                    CromosomRow = i;
                                    CromosomColumn = j;
                                    Find = true;
                                    FindNumber++;
                                    ChessRules.BigKingCastleGray = true;
                                    CastlesKing = true;
                                }

                            }
                            else if (j == 0)
                            {
                                //Small Castles King Brown.
                                if (i == 6 && Cromosom2[i, j] == -6 && Cromosom2[i - 1, j] == -4 && Cromosom1[i, j] != -6 && Cromosom1[i - 1, j] != -4)
                                {
                                    CromosomRowFirst = i - 3;
                                    CromosomColumnFirst = j;
                                    CromosomRow = i;
                                    CromosomColumn = j;
                                    Find = true;
                                    FindNumber++;
                                    ChessRules.SmallKingCastleBrown = true;
                                    CastlesKing = true;
                                }
                                else//Big Castles King Brown.
                                    if (i == 2 && Cromosom2[i, j] == -6 && Cromosom2[i + 1, j] == -4 && Cromosom1[i, j] != -6 && Cromosom1[i + 1, j] != -4)
                                {
                                    CromosomRowFirst = i + 3;
                                    CromosomColumnFirst = j;
                                    CromosomRow = i;
                                    CromosomColumn = j;
                                    Find = true;
                                    FindNumber++;
                                    ChessRules.BigKingCastleBrown = true;
                                    CastlesKing = true;
                                }

                            }

                        }
                    }

                    //When To Same Location Tbles are Different in Gen.
                    if (Cromosom1[i, j] != Cromosom2[i, j])
                    {
                        //When Cromosom 2 is Empty.
                        if (Cromosom2[i, j] == 0)
                        {
                            //Initiate Location of Table.
                            continue;
                        }
                        else
                        {
                            //Situation 1.0
                            if (and)
                            {
                                //When Cromosom1 Current Location is Empty.
                                if (Cromosom1[i, j] == 0)
                                {
                                    //Initiate Location of Gen.
                                    CromosomRow = i;
                                    CromosomColumn = j;
                                    Find = true;
                                    FindNumber++;
                                    continue;
                                }
                            }
                        }
                        //Store Location of Gen and Calculate Gen Numbers.
                        CromosomRow = i;
                        CromosomColumn = j;
                        Find = true;
                        FindNumber++;
                    }
                }
            }
            //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("IsEnemyThingsinStable:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
            //If Gen Foundation is Valid. 
            if (((FindNumber == 1 || FindNumber == 2) && Find) || CastlesKing || AllDraw.SodierConversionOcuured)
                return Find;
            //Gen Not Found.
            return false;
        }
        //web translator monitor strings
        List<int[]> WhereNumbers(String Tag)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object OOOO = new Object();
            lock (OOOO)
            {

                List<int[]> TagList = new List<int[]>();
                for (var i = 0; i < Tag.Length; i++)
                {
                    if (i + 1 < Tag.Length)
                    {
                        for (var j = i + 1; j < i + QuantumRefrigiz.AllDraw.MaxAStarGreedy.ToString().Length + 1; j++)
                        {

                            int A = System.Convert.ToInt32(Tag.Substring(i, j - i));
                            if (A >= 0 && A <= AllDraw.MaxAStarGreedy)
                            {
                                int[] Loc = new int[2];
                                Loc[0] = i;
                                Loc[1] = j - i;
                                TagList.Add(Loc);
                            }




                        }
                    }
                }
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("WhereNumbers:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;

                return TagList;
            }
        }
        String CreateHtmlTag(String Tag)
        {
            //long Time = TimeElapced.TimeNow();Spaces++;
            Object O = new Object();
            lock (O)
            {
                //List<int[]> List = new List<int[]>();
                //List = WhereNumbers(Tag);
                //for (var i = 0; i < List.Count; i++)
                //Tag = Tag.Replace(Tag.Substring(List[i][0], List[i][1]), "<font Color=\"Gold\">" + Tag.Substring(List[i][0], List[i][1]) + "</font>");

                if (Tag.Contains("ThinkingQuantum"))
                    Tag = Tag.Replace("ThinkingQuantum", "<font Color=\"Green\">" + "ThinkingQuantum" + "</font>");
                if (Tag.Contains("Perception"))
                    Tag = Tag.Replace("Perception", "<font Color=\"Green\">" + "Perception" + "</font>");
                if (Tag.Contains("Bob"))
                    Tag = Tag.Replace("Bob", "<font Color=\"Gray\">" + "Bob" + "</font>");
                if (Tag.Contains("Alice"))
                    Tag = Tag.Replace("Alice", "<font Color=\"Brown\">" + "Brown" + "</font>");
                if (Tag.Contains("AStarGreedy "))
                    Tag = Tag.Replace("AStarGreedy ", "<font Color=\"Yellow\">" + "AStarGreedy " + "</font>");
                if (Tag.Contains("Level"))
                    Tag = Tag.Replace("Level", "<font Color=\"Blue\">" + "Level" + "</Font>");
                /*              if (Tag.Contains("Soldeir"))
                                  Tag = Tag.Replace("Soldeir", "<font Color=\"Silver\">" + "Soldeir" + "</font>");
                              else
                              if (Tag.Contains("Elephant"))
                                  Tag = Tag.Replace("Elephant", "<font Color=\"Silver\">" + "Elephant" + "</font>");
                              else
                              if (Tag.Contains("Hourse"))
                                  Tag = Tag.Replace("Hourse", "<font Color=\"Silver\">" + "Hourse" + "</font>");
                              else
                              if (Tag.Contains("Castle"))
                                  Tag = Tag.Replace("Castle", "<font Color=\"Silver\">" + "Castle" + "</font>");
                              else
                              if (Tag.Contains("Minister"))
                                  Tag = Tag.Replace("Minister", "<font Color=\"Silver\">" + "Minister" + "</font>");
                              else
                              if (Tag.Contains("King"))
                                  Tag = Tag.Replace("King", "<font Color=\"Silver\">" + "King" + "</font>");
              */
                String R = "<font Color=\"Red\">" + Tag + "</font>";
                //{ AllDraw.OutPut.Append("\r\n");for (int l = 0; l < Spaces; l++) AllDraw.OutPut.Append(Space);  AllDraw.OutPut.Append("CreateHtmlTag:" + (TimeElapced.TimeNow() - Time).ToString());}Spaces--;
                return R;
            }
        }
        public void RewriteAllDrawRecQ(BinaryFormatter Formatters, FileStream DummyFileStream, int Order)
        {
            Object o = new Object();
            lock (o)
            {


                AllDraw Node = this;


                while (DummyFileStream.Position < DummyFileStream.Length)
                {

                    Formatters.Serialize(DummyFileStream, Node);

                    for (int i = 0; i < Node.SodierHigh; i++)
                    {
                        if (Node.SolderesOnTable == null)
                            continue;
                        if (Node.SolderesOnTable[i] == null)
                            continue;
                        if (Node.SolderesOnTable[i].SoldierThinkingQuantum == null)
                            continue;
                        if (Node.SolderesOnTable[i].SoldierThinkingQuantum[0] == null)
                            continue;
                        if (Node.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy == null)
                            continue;
                        Formatters.Serialize(DummyFileStream, Node.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count);
                        for (int j = 0; j < Node.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Count; j++)
                        {
                            Formatters.Serialize(DummyFileStream, Node.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j]);

                            Node.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].RewriteAllDrawRecQ(Formatters, DummyFileStream, Order * -1);
                        }
                    }
                    for (int i = 0; i < Node.ElefantHigh; i++)
                    {
                        if (Node.ElephantOnTable == null)
                            continue;
                        if (Node.ElephantOnTable[i] == null)
                            continue;
                        if (Node.ElephantOnTable[i].ElefantThinkingQuantum == null)
                            continue;
                        if (Node.ElephantOnTable[i].ElefantThinkingQuantum[0] == null)
                            continue;
                        if (Node.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy == null)
                            continue;
                        Formatters.Serialize(DummyFileStream, Node.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count);
                        for (int j = 0; j < Node.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Count; j++)
                        {
                            Formatters.Serialize(DummyFileStream, Node.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j]);
                            Node.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].RewriteAllDrawRecQ(Formatters, DummyFileStream, Order * -1);

                        }
                    }
                    for (int i = 0; i < Node.HourseHight; i++)
                    {
                        if (Node.HoursesOnTable == null)
                            continue;
                        if (Node.HoursesOnTable[i] == null)
                            continue;
                        if (Node.HoursesOnTable[i].HourseThinkingQuantum == null)
                            continue;
                        if (Node.HoursesOnTable[i].HourseThinkingQuantum[0] == null)
                            continue;
                        if (Node.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy == null)
                            continue;
                        Formatters.Serialize(DummyFileStream, Node.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count);
                        for (int j = 0; j < Node.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Count; j++)
                        {
                            Formatters.Serialize(DummyFileStream, Node.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j]);
                            Node.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].RewriteAllDrawRecQ(Formatters, DummyFileStream, Order * -1);
                        }

                    }
                    for (int i = 0; i < Node.CastleHigh; i++)
                    {
                        if (Node.CastlesOnTable == null)
                            continue;
                        if (Node.CastlesOnTable[i] == null)
                            continue;
                        if (Node.CastlesOnTable[i].CastleThinkingQuantum == null)
                            continue;
                        if (Node.CastlesOnTable[i].CastleThinkingQuantum[0] == null)
                            continue;
                        if (Node.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy == null)
                            continue;
                        Formatters.Serialize(DummyFileStream, Node.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count);
                        for (int j = 0; j < Node.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Count; j++)
                        {
                            Formatters.Serialize(DummyFileStream, Node.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j]);
                            Node.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].RewriteAllDrawRecQ(Formatters, DummyFileStream, Order * -1);
                        }
                    }

                    for (int i = 0; i < Node.MinisterHigh; i++)
                    {
                        if (Node.MinisterOnTable == null)
                            continue;
                        if (Node.MinisterOnTable[i] == null)
                            continue;
                        if (Node.MinisterOnTable[i].MinisterThinkingQuantum == null)
                            continue;
                        if (Node.MinisterOnTable[i].MinisterThinkingQuantum[0] == null)
                            continue;
                        if (Node.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy == null)
                            continue;
                        Formatters.Serialize(DummyFileStream, Node.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count);
                        for (int j = 0; j < Node.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Count; j++)
                        {
                            Formatters.Serialize(DummyFileStream, Node.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j]);
                            Node.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].RewriteAllDrawRecQ(Formatters, DummyFileStream, Order * -1);
                        }

                    }
                    for (int i = 0; i < Node.KingHigh; i++)
                    {
                        if (Node.KingOnTable == null)
                            continue;
                        if (Node.KingOnTable[i] == null)
                            continue;
                        if (Node.KingOnTable[i].KingThinkingQuantum == null)
                            continue;
                        if (Node.KingOnTable[i].KingThinkingQuantum[0] == null)
                            continue;
                        if (Node.KingOnTable[i].KingThinkingQuantum[0] == null)
                            continue;
                        if (Node.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy == null)
                            continue;
                        Formatters.Serialize(DummyFileStream, Node.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count);
                        for (int j = 0; j < Node.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Count; j++)
                        {
                            Formatters.Serialize(DummyFileStream, Node.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j]);
                            Node.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].RewriteAllDrawRecQ(Formatters, DummyFileStream, Order * -1);
                        }
                    }
                }
            }
        }
        public AllDraw LoaderECQ(bool Quantum, int Order, FileStream DummyFileStream, BinaryFormatter Formatters)
        {
            Object o = new Object();
            lock (o)
            {

                bool Act = false;
                AllDraw Node = this;

                if (DummyFileStream.Position >= DummyFileStream.Length)
                    return Node;



                //Node = (AllDraw)Formatters.Deserialize(DummyFileStream);


                for (int i = 0; i < Node.SodierHigh; i++)
                {
                    if (Node.SolderesOnTable == null)
                        continue;
                    if (Node.SolderesOnTable[i] == null)
                        continue;
                    if (Node.SolderesOnTable[i].SoldierThinkingQuantum == null)
                        continue;
                    if (Node.SolderesOnTable[i].SoldierThinkingQuantum[0] == null)
                        continue;
                    if (Node.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy == null)
                        continue;
                    int count = (Int32)Formatters.Deserialize(DummyFileStream);
                    Node.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Clear();
                    for (int j = 0; j < count; j++)
                    {
                        if (DummyFileStream.Position < DummyFileStream.Length)
                        {

                            Node.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy.Add((AllDraw)Formatters.Deserialize(DummyFileStream));
                            Node.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].LoaderECQ(Quantum, Order, DummyFileStream, Formatters);
                            Node.SolderesOnTable[i].SoldierThinkingQuantum[0].AStarGreedy[j].AStarGreedyString = Node;
                        }
                    }
                }
                for (int i = 0; i < Node.ElefantHigh; i++)
                {
                    if (Node.ElephantOnTable == null)
                        continue;
                    if (Node.ElephantOnTable[i] == null)
                        continue;
                    if (Node.ElephantOnTable[i].ElefantThinkingQuantum == null)
                        continue;
                    if (Node.ElephantOnTable[i].ElefantThinkingQuantum[0] == null)
                        continue;
                    if (Node.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy == null)
                        continue;
                    int count = (Int32)Formatters.Deserialize(DummyFileStream);
                    Node.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Clear();

                    for (int j = 0; j < count; j++)
                    {
                        if (DummyFileStream.Position < DummyFileStream.Length)
                        {
                            Node.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy.Add((AllDraw)Formatters.Deserialize(DummyFileStream));
                            Node.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].LoaderECQ(Quantum, Order, DummyFileStream, Formatters);
                            Node.ElephantOnTable[i].ElefantThinkingQuantum[0].AStarGreedy[j].AStarGreedyString = Node;
                        }
                    }
                }
                for (int i = 0; i < Node.HourseHight; i++)
                {
                    if (Node.HoursesOnTable == null)
                        continue;
                    if (Node.HoursesOnTable[i] == null)
                        continue;
                    if (Node.HoursesOnTable[i].HourseThinkingQuantum == null)
                        continue;
                    if (Node.HoursesOnTable[i].HourseThinkingQuantum[0] == null)
                        continue;
                    if (Node.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy == null)
                        continue;
                    int count = (Int32)Formatters.Deserialize(DummyFileStream);
                    Node.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Clear();
                    for (int j = 0; j < count; j++)
                    {
                        if (DummyFileStream.Position < DummyFileStream.Length)
                        {
                            Node.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy.Add((AllDraw)Formatters.Deserialize(DummyFileStream));
                            Node.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].LoaderECQ(Quantum, Order, DummyFileStream, Formatters);
                            Node.HoursesOnTable[i].HourseThinkingQuantum[0].AStarGreedy[j].AStarGreedyString = Node;
                        }

                    }
                }
                for (int i = 0; i < Node.CastleHigh; i++)
                {
                    if (Node.CastlesOnTable == null)
                        continue;
                    if (Node.CastlesOnTable[i] == null)
                        continue;
                    if (Node.CastlesOnTable[i].CastleThinkingQuantum == null)
                        continue;
                    if (Node.CastlesOnTable[i].CastleThinkingQuantum[0] == null)
                        continue;
                    if (Node.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy == null)
                        continue;
                    int count = (Int32)Formatters.Deserialize(DummyFileStream);
                    Node.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Clear();
                    for (int j = 0; j < count; j++)
                    {
                        if (DummyFileStream.Position < DummyFileStream.Length)
                        {
                            Node.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy.Add((AllDraw)Formatters.Deserialize(DummyFileStream));
                            Node.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].LoaderECQ(Quantum, Order, DummyFileStream, Formatters);
                            Node.CastlesOnTable[i].CastleThinkingQuantum[0].AStarGreedy[j].AStarGreedyString = Node;

                        }
                    }
                }
                for (int i = 0; i < Node.MinisterHigh; i++)
                {
                    if (Node.MinisterOnTable == null)
                        continue;
                    if (Node.MinisterOnTable[i] == null)
                        continue;
                    if (Node.MinisterOnTable[i].MinisterThinkingQuantum == null)
                        continue;
                    if (Node.MinisterOnTable[i].MinisterThinkingQuantum[0] == null)
                        continue;
                    if (Node.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy == null)
                        continue;
                    int count = (Int32)Formatters.Deserialize(DummyFileStream);
                    Node.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Clear();
                    for (int j = 0; j < count; j++)
                    {
                        if (DummyFileStream.Position < DummyFileStream.Length)
                        {
                            Node.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy.Add((AllDraw)Formatters.Deserialize(DummyFileStream));
                            Node.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].LoaderECQ(Quantum, Order, DummyFileStream, Formatters);
                            Node.MinisterOnTable[i].MinisterThinkingQuantum[0].AStarGreedy[j].AStarGreedyString = Node;
                        }

                    }
                }
                for (int i = 0; i < Node.KingHigh; i++)
                {
                    if (Node.KingOnTable == null)
                        continue;
                    if (Node.KingOnTable[i] == null)
                        continue;
                    if (Node.KingOnTable[i].KingThinkingQuantum == null)
                        continue;
                    if (Node.KingOnTable[i].KingThinkingQuantum[0] == null)
                        continue;
                    if (Node.KingOnTable[i].KingThinkingQuantum[0] == null)
                        continue;
                    if (Node.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy == null)
                        continue;
                    int count = (Int32)Formatters.Deserialize(DummyFileStream);
                    Node.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Clear();
                    for (int j = 0; j < count; j++)
                    {
                        if (DummyFileStream.Position < DummyFileStream.Length)
                        {
                            Node.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy.Add((AllDraw)Formatters.Deserialize(DummyFileStream));
                            Node.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].LoaderECQ(Quantum, Order, DummyFileStream, Formatters);
                            Node.KingOnTable[i].KingThinkingQuantum[0].AStarGreedy[j].AStarGreedyString = Node;
                        }
                    }
                }
                //  if (!Act)
                //   return this;
                //this = (AllDraw)Formatters.Deserialize(DummyFileStream);



                //return CreateAllDrawFromMemmory(Last, new AllDraw(MovementsAStarGreedyHeuristicFoundT, IgnoreSelfObjectsT, UsePenaltyRegardMechnisamT, BestMovmentsT, PredictHeuristicT, OnlySelfT, AStarGreedyHeuristicT, ArrangmentsT), Order);
                return Node;
                //return Node.al;
            }
        }

    }
}
//End of Documentation.
